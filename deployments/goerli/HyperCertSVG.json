{
  "address": "0x10df6c27dD4D30e286cBB888Bb4A76a5B37D3Dc3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BackgroundAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[2]",
          "name": "colorPair",
          "type": "string[2]"
        }
      ],
      "name": "ColorPairAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "svgString",
          "type": "string"
        }
      ],
      "name": "addBackground",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[2]",
          "name": "colorPair",
          "type": "string[2]"
        }
      ],
      "name": "addColorPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "backgroundCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "backgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "colorPairCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colorPairs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "scopesOfImpact",
          "type": "string[]"
        },
        {
          "internalType": "uint64[2]",
          "name": "workTimeframe",
          "type": "uint64[2]"
        },
        {
          "internalType": "uint64[2]",
          "name": "impactTimeframe",
          "type": "uint64[2]"
        },
        {
          "internalType": "uint256",
          "name": "units",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUnits",
          "type": "uint256"
        }
      ],
      "name": "generateSvgFraction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "scopesOfImpact",
          "type": "string[]"
        },
        {
          "internalType": "uint64[2]",
          "name": "workTimeframe",
          "type": "uint64[2]"
        },
        {
          "internalType": "uint64[2]",
          "name": "impactTimeframe",
          "type": "uint64[2]"
        },
        {
          "internalType": "uint256",
          "name": "totalUnits",
          "type": "uint256"
        }
      ],
      "name": "generateSvgHyperCert",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whole",
          "type": "uint256"
        }
      ],
      "name": "getPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 8,
  "solcInputHash": "f38a7af1e7b1550cb2084257ef9cbced",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BackgroundAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[2]\",\"name\":\"colorPair\",\"type\":\"string[2]\"}],\"name\":\"ColorPairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svgString\",\"type\":\"string\"}],\"name\":\"addBackground\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[2]\",\"name\":\"colorPair\",\"type\":\"string[2]\"}],\"name\":\"addColorPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backgroundCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colorPairCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorPairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"scopesOfImpact\",\"type\":\"string[]\"},{\"internalType\":\"uint64[2]\",\"name\":\"workTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"impactTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnits\",\"type\":\"uint256\"}],\"name\":\"generateSvgFraction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"scopesOfImpact\",\"type\":\"string[]\"},{\"internalType\":\"uint64[2]\",\"name\":\"workTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"impactTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint256\",\"name\":\"totalUnits\",\"type\":\"uint256\"}],\"name\":\"generateSvgHyperCert\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whole\",\"type\":\"uint256\"}],\"name\":\"getPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface\"},\"returns\":{\"_0\":\"true, if the interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"backgrounds\":{\"details\":\"id => background\"},\"colorPairs\":{\"details\":\"id => colorPairs [prime, second]\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"UPGRADER_ROLE()\":{\"notice\":\"User role required in order to upgrade the contract\"},\"constructor\":{\"notice\":\"Contract constructor logic\"},\"initialize()\":{\"notice\":\"Contract initialization logic\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns a flag indicating if the contract supports the specified interface\"},\"updateVersion()\":{\"notice\":\"Update the contract version numberOnly allowed for member of UPGRADER_ROLE\"},\"version()\":{\"notice\":\"gets the current version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperCertSVG.sol\":\"HyperCertSVG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/HyperCertSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Ref: https://github.com/solv-finance/solv-v2-ivo/blob/main/vouchers/bond-voucher/contracts/BondVoucherDescriptor.sol\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"./lib/DateTime.sol\\\";\\nimport \\\"./lib/strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract HyperCertSVG is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    using StringsUpgradeable for uint256;\\n    using strings for *;\\n\\n    /// @notice User role required in order to upgrade the contract\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    /// @notice Current version of the contract\\n    uint16 internal _version;\\n\\n    /// @dev id => background\\n    mapping(uint256 => string) public backgrounds;\\n    /// @dev id => colorPairs [prime, second]\\n    mapping(uint256 => string[2]) public colorPairs;\\n\\n    uint256 public backgroundCounter;\\n    uint256 public colorPairCounter;\\n\\n    struct SVGParams {\\n        string name;\\n        string[] scopesOfImpact;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        uint256 units;\\n        uint256 totalUnits;\\n    }\\n\\n    event BackgroundAdded(uint256 id);\\n    event ColorPairAdded(uint256 id, string[2] colorPair);\\n\\n    /*******************\\n     * DEPLOY\\n     ******************/\\n\\n    /// @notice Contract constructor logic\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract initialization logic\\n    function initialize() public initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n\\n        backgroundCounter = 0;\\n    }\\n\\n    function addBackground(string memory svgString) external returns (uint256 id) {\\n        id = backgroundCounter;\\n        backgrounds[id] = svgString;\\n        emit BackgroundAdded(id);\\n        backgroundCounter += 1;\\n    }\\n\\n    function addColorPair(string[2] memory colorPair) external returns (uint256 id) {\\n        id = colorPairCounter;\\n        colorPairs[id] = colorPair;\\n        emit ColorPairAdded(id, colorPair);\\n        colorPairCounter += 1;\\n    }\\n\\n    function generateSvgHyperCert(\\n        string memory name,\\n        string[] memory scopesOfImpact,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 totalUnits\\n    ) external view virtual returns (string memory) {\\n        SVGParams memory svgParams;\\n        svgParams.name = name;\\n        svgParams.scopesOfImpact = scopesOfImpact;\\n        svgParams.workTimeframe = workTimeframe;\\n        svgParams.impactTimeframe = impactTimeframe;\\n        svgParams.totalUnits = totalUnits;\\n        return _generateHyperCert(svgParams);\\n    }\\n\\n    function generateSvgFraction(\\n        string memory name,\\n        string[] memory scopesOfImpact,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view virtual returns (string memory) {\\n        SVGParams memory svgParams;\\n        svgParams.name = name;\\n        svgParams.scopesOfImpact = scopesOfImpact;\\n        svgParams.workTimeframe = workTimeframe;\\n        svgParams.impactTimeframe = impactTimeframe;\\n        svgParams.units = units;\\n        svgParams.totalUnits = totalUnits;\\n        return _generateHyperCertFraction(svgParams);\\n    }\\n\\n    function _generateHyperCert(SVGParams memory params) internal view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg width=\\\"550\\\" height=\\\"850\\\" viewBox=\\\"0 0 550 850\\\" '\\n                    'xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n                    _generateBackgroundColor(),\\n                    _generateBackground(params.scopesOfImpact[0]),\\n                    _generateHeader(params),\\n                    _generateName(params),\\n                    _generateScopeOfImpact(params),\\n                    _generateFooter(params),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    function _generateHyperCertFraction(SVGParams memory params) internal view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg width=\\\"550\\\" height=\\\"850\\\" viewBox=\\\"0 0 550 850\\\" '\\n                    'xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n                    _generateBackgroundColor(),\\n                    _generateBackground(params.scopesOfImpact[0]),\\n                    _generateHeader(params),\\n                    _generateName(params),\\n                    _generateScopeOfImpact(params),\\n                    _generateFraction(params),\\n                    _generateFooter(params),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    function _generateBackgroundColor() internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<rect id=\\\"background-color-2\\\" x=\\\".5\\\" y=\\\"0\\\" width=\\\"550\\\" height=\\\"850\\\" rx=\\\"32\\\" ry=\\\"32\\\"/>'\\n                )\\n            );\\n    }\\n\\n    function _generateBackground(string memory primaryScopeOfImpact) internal view returns (string memory background) {\\n        background = backgrounds[_getBackgroundIndex(primaryScopeOfImpact)];\\n        if (bytes(background).length == 0) {\\n            background = backgrounds[0];\\n        }\\n    }\\n\\n    function _getBackgroundIndex(string memory primaryScopeOfImpact) internal view returns (uint256 index) {\\n        bytes32 stringBytes = stringToBytes32(primaryScopeOfImpact);\\n        index = uint256(stringBytes) % 10;\\n    }\\n\\n    function _generateHeader(SVGParams memory params) internal pure virtual returns (string memory) {\\n        (uint256 yearFrom, uint256 monthFrom, uint256 dayFrom) = DateTime.timestampToDate(params.workTimeframe[0]);\\n        (uint256 yearTo, uint256 monthTo, uint256 dayTo) = DateTime.timestampToDate(params.workTimeframe[1]);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    abi.encodePacked(\\n                        '<path id=\\\"foreground-color-2\\\" '\\n                        'd=\\\"M435,777.83H115v-50H435v50Zm0-532.83H115v360H435V245Zm0-122.83H115v-50H435v50Z\\\"/>'\\n                    ),\\n                    abi.encodePacked(\\n                        '<g id=\\\"divider-color\\\" text-rendering=\\\"optimizeSpeed\\\" font-size=\\\"10\\\" fill=\\\"white\\\">',\\n                        '<path id=\\\"divider-color-2\\\" d=\\\"M156.35,514.59h237.31\\\" '\\n                        'style=\\\"fill: none; stroke: #ffce43; stroke-miterlimit: 10; stroke-width: 2px;\\\"/>',\\n                        '<text id=\\\"work-period-color\\\" transform=\\\"translate(134.75 102.06)\\\" '\\n                        'style=\\\"font-family: Helvetica; font-size: 15px;\\\">',\\n                        '<tspan x=\\\"0\\\" y=\\\"0\\\" style=\\\"letter-spacing: -.05em;\\\">Work Period: ',\\n                        abi.encodePacked(yearFrom.toString(), \\\"-\\\", monthFrom.toString(), \\\"-\\\", dayFrom.toString()),\\n                        \\\" > \\\",\\n                        abi.encodePacked(yearTo.toString(), \\\"-\\\", monthTo.toString(), \\\"-\\\", dayTo.toString()),\\n                        \\\"</tspan></text></g>\\\"\\n                    )\\n                )\\n            );\\n    }\\n\\n    //TODO ugly string manipulation\\n    function _generateName(SVGParams memory params) internal pure virtual returns (string memory) {\\n        string memory renderedText = string.concat('<tspan x=\\\"0\\\" y=\\\"0\\\">', params.name, \\\"</tspan>\\\");\\n        uint256 inputLength = params.name.toSlice().len();\\n        if (inputLength > 13) {\\n            strings.slice memory ogSlice = params.name.toSlice();\\n            strings.slice memory delim = \\\" \\\".toSlice();\\n\\n            uint256 currentLine = 0;\\n            uint256 lineEntry = 0;\\n            uint256 lineLength = 0;\\n            strings.slice[] memory line = new strings.slice[](6);\\n            string[] memory allLines = new string[](3);\\n\\n            while (currentLine < 3) {\\n                strings.slice memory part = ogSlice.split(delim);\\n\\n                if (part.empty()) {\\n                    line[lineEntry] = ogSlice;\\n                    allLines[currentLine] = \\\" \\\".toSlice().join(line);\\n                    break;\\n                }\\n\\n                if (lineLength + part.len() > 10) {\\n                    if (currentLine == 2) line[lineEntry] = \\\"...\\\".toSlice();\\n                    allLines[currentLine] = \\\" \\\".toSlice().join(line);\\n\\n                    currentLine += 1;\\n\\n                    line = new strings.slice[](6);\\n                    line[0] = part;\\n                    lineLength = part.len();\\n                    lineEntry = 1;\\n                } else {\\n                    lineLength += part.len();\\n                    line[lineEntry] = part;\\n                    lineEntry += 1;\\n                }\\n            }\\n\\n            renderedText = string(\\n                abi.encodePacked(\\n                    abi.encodePacked('<tspan x=\\\"0\\\" y=\\\"0\\\">', allLines[0], \\\"</tspan>\\\"),\\n                    abi.encodePacked('<tspan x=\\\"0\\\" y=\\\"36\\\">', allLines[1], \\\"</tspan>\\\"),\\n                    abi.encodePacked('<tspan x=\\\"0\\\" y=\\\"72\\\">', allLines[2], \\\"</tspan>\\\")\\n                )\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<g id=\\\"name-color\\\" text-rendering=\\\"optimizeSpeed\\\" font-size=\\\"30\\\">',\\n                    abi.encodePacked(\\n                        '<text id=\\\"name-color-2\\\" transform=\\\"translate(156.35 300)\\\" '\\n                        'style=\\\"fill: #ffce43; font-family: Monaco;\\\">',\\n                        renderedText,\\n                        \\\"</text>\\\"\\n                    ),\\n                    \\\"</g>\\\"\\n                )\\n            );\\n    }\\n\\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 27 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 27 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        string memory parsedString = string(bytesArray);\\n        if (_bytes32[28] != 0) {\\n            parsedString = string.concat(parsedString, \\\"...\\\");\\n        }\\n        return parsedString;\\n    }\\n\\n    function _generateScopeOfImpact(SVGParams memory params) internal pure virtual returns (string memory) {\\n        string memory renderedText = \\\"\\\";\\n        uint256 inputLength = params.scopesOfImpact.length;\\n        if (inputLength > 3) inputLength = 3;\\n        for (uint256 i = 0; i < inputLength; i++) {\\n            bytes32 stringShort = stringToBytes32(params.scopesOfImpact[i]);\\n            renderedText = string.concat(\\n                renderedText,\\n                '<tspan x=\\\"0\\\" y=\\\"',\\n                uint256(20 * i).toString(),\\n                '\\\">',\\n                bytes32ToString(stringShort),\\n                \\\"</tspan>\\\"\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<g id=\\\"description-color\\\" text-rendering=\\\"optimizeSpeed\\\" font-size=\\\"15\\\" fill=\\\"white\\\">',\\n                    '<text transform=\\\"translate(155 460)\\\" style=\\\"font-family: Helvetica; font-size: 15px;\\\">',\\n                    renderedText,\\n                    \\\"</text></g>\\\"\\n                )\\n            );\\n    }\\n\\n    function _generateFraction(SVGParams memory params) internal view virtual returns (string memory) {\\n        uint256 percent = getPercent(params.units, params.totalUnits);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<g id=\\\"fraction-color\\\" text-rendering=\\\"optimizeSpeed\\\" font-size=\\\"30\\\">',\\n                    '<text id=\\\"fraction-color-2\\\" transform=\\\"translate(156.35 568.03)\\\" '\\n                    'style=\\\"fill: #ffce43; font-family: Monaco\\\">'\\n                    '<tspan x=\\\"0\\\" y=\\\"0\\\">',\\n                    // abi.encodePacked(((params.units / params.totalUnits) * 10000).toString()),\\n                    string.concat(string(uint2decimal(percent, 2)), \\\" %\\\"),\\n                    \\\"</tspan></text></g>\\\"\\n                )\\n            );\\n    }\\n\\n    function _generateTotalUnits(SVGParams memory params) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<g id=\\\"total-units-color\\\" text-rendering=\\\"optimizeSpeed\\\" font-size=\\\"30\\\">',\\n                    '<text id=\\\"total-units-color\\\" transform=\\\"translate(156.35 568.03)\\\" '\\n                    'style=\\\"fill: #ffce43; font-family: Monaco\\\">'\\n                    '<tspan x=\\\"0\\\" y=\\\"0\\\">',\\n                    params.totalUnits.toString(),\\n                    \\\"</tspan></text></g>\\\"\\n                )\\n            );\\n    }\\n\\n    function _generateFooter(SVGParams memory params) internal pure virtual returns (string memory) {\\n        (uint256 yearFrom, uint256 monthFrom, uint256 dayFrom) = DateTime.timestampToDate(params.impactTimeframe[0]);\\n        (uint256 yearTo, uint256 monthTo, uint256 dayTo) = DateTime.timestampToDate(params.impactTimeframe[1]);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<g id=\\\"impact-period-color\\\" text-rendering=\\\"optimizeSpeed\\\" font-size=\\\"10\\\" fill=\\\"white\\\">',\\n                    '<text id=\\\"impact-period-color-2\\\" transform=\\\"translate(134.75 758)\\\" '\\n                    'style=\\\"font-family: Helvetica; font-size: 15px;\\\">',\\n                    '<tspan x=\\\"0\\\" y=\\\"0\\\" style=\\\"letter-spacing: -.05em;\\\">Impact Period: ',\\n                    abi.encodePacked(yearFrom.toString(), \\\"-\\\", monthFrom.toString(), \\\"-\\\", dayFrom.toString()),\\n                    \\\" > \\\",\\n                    abi.encodePacked(yearTo.toString(), \\\"-\\\", monthTo.toString(), \\\"-\\\", dayTo.toString()),\\n                    \\\"</tspan></text></g>\\\"\\n                )\\n            );\\n    }\\n\\n    function getPercent(uint256 part, uint256 whole) public pure returns (uint256 percent) {\\n        uint256 numerator = part * 100000;\\n        require(numerator > part, \\\"Overflow\\\"); // Should use SafeMath throughout if this was a real implementation.\\n        uint256 temp = numerator / whole + 5; // proper rounding up\\n        return temp / 10;\\n    }\\n\\n    function uint2decimal(uint256 self, uint8 decimals) internal view returns (bytes memory) {\\n        uint256 base = 10**decimals;\\n        string memory round = (self / base).toString();\\n        string memory fraction = (self % base).toString();\\n        uint256 fractionLength = bytes(fraction).length;\\n\\n        bytes memory fullStr = abi.encodePacked(round, \\\".\\\");\\n        if (fractionLength < decimals) {\\n            for (uint8 i = 0; i < decimals - fractionLength; i++) {\\n                fullStr = abi.encodePacked(fullStr, \\\"0\\\");\\n            }\\n        }\\n\\n        return abi.encodePacked(fullStr, fraction);\\n    }\\n\\n    /*******************\\n     * ADMIN\\n     ******************/\\n    /// @notice gets the current version of the contract\\n    function version() public view virtual returns (uint256) {\\n        return _version;\\n    }\\n\\n    /// @notice Update the contract version number\\n    /// @notice Only allowed for member of UPGRADER_ROLE\\n    function updateVersion() external onlyRole(UPGRADER_ROLE) {\\n        _version += 1;\\n    }\\n\\n    /// @notice Returns a flag indicating if the contract supports the specified interface\\n    /// @param interfaceId Id of the interface\\n    /// @return true, if the interface is supported\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice upgrade authorization logic\\n    /// @dev adds onlyRole(UPGRADER_ROLE) requirement\\n    function _authorizeUpgrade(\\n        address /*newImplementation*/\\n    )\\n        internal\\n        view\\n        override\\n        onlyRole(UPGRADER_ROLE) // solhint-disable-next-line no-empty-blocks\\n    {\\n        //empty block\\n    }\\n}\\n\",\"keccak256\":\"0xa5ef37bb134fbaff17ce009cd5d2723e0dabdfdf311a1c91bb63817e4d44a93a\",\"license\":\"MIT\"},\"contracts/lib/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        unchecked {\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            int256 _day = L - (2447 * _month) / 80;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            year = uint256(_year);\\n            month = uint256(_month);\\n            day = uint256(_day);\\n        }\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        unchecked {\\n            (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        }\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        unchecked {\\n            (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n            uint256 secs = timestamp % SECONDS_PER_DAY;\\n            hour = secs / SECONDS_PER_HOUR;\\n            secs = secs % SECONDS_PER_HOUR;\\n            minute = secs / SECONDS_PER_MINUTE;\\n            second = secs % SECONDS_PER_MINUTE;\\n        }\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month) internal pure returns (uint256 daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x1dac7a637d6ea44cc3c4189aed3bffc0c511769b3b1a8d15c62538829ac74a37\",\"license\":\"MIT\"},\"contracts/lib/strings.sol\":{\"content\":\"/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n *\\n *       Ref: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary strings {\\n    struct slice {\\n        uint256 _len;\\n        uint256 _ptr;\\n    }\\n\\n    function memcpy(\\n        uint256 dest,\\n        uint256 src,\\n        uint256 len\\n    ) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = type(uint256).max;\\n        if (len > 0) {\\n            mask = 256**(32 - len) - 1;\\n        }\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the length of a null-terminated bytes32 string.\\n     * @param self The value to find the length of.\\n     * @return The length of the string, from 0 to 32.\\n     */\\n    function len(bytes32 self) internal pure returns (uint256) {\\n        uint256 ret;\\n        if (self == 0) return 0;\\n        if (uint256(self) & type(uint128).max == 0) {\\n            ret += 16;\\n            self = bytes32(uint256(self) / 0x100000000000000000000000000000000);\\n        }\\n        if (uint256(self) & type(uint64).max == 0) {\\n            ret += 8;\\n            self = bytes32(uint256(self) / 0x10000000000000000);\\n        }\\n        if (uint256(self) & type(uint32).max == 0) {\\n            ret += 4;\\n            self = bytes32(uint256(self) / 0x100000000);\\n        }\\n        if (uint256(self) & type(uint16).max == 0) {\\n            ret += 2;\\n            self = bytes32(uint256(self) / 0x10000);\\n        }\\n        if (uint256(self) & type(uint8).max == 0) {\\n            ret += 1;\\n        }\\n        return 32 - ret;\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\n     *      null-terminated utf-8 string.\\n     * @param self The bytes32 value to convert to a slice.\\n     * @return A new slice containing the value of the input argument up to the\\n     *         first null.\\n     */\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, 0x20))\\n            mstore(ptr, self)\\n            mstore(add(ret, 0x20), ptr)\\n        }\\n        ret._len = len(self);\\n    }\\n\\n    /*\\n     * @dev Returns a new slice containing the same data as the current slice.\\n     * @param self The slice to copy.\\n     * @return A new slice containing the same data as `self`.\\n     */\\n    function copy(slice memory self) internal pure returns (slice memory) {\\n        return slice(self._len, self._ptr);\\n    }\\n\\n    /*\\n     * @dev Copies a slice to a new string.\\n     * @param self The slice to copy.\\n     * @return A newly allocated string containing the slice's text.\\n     */\\n    function toString(slice memory self) internal pure returns (string memory) {\\n        string memory ret = new string(self._len);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        memcpy(retptr, self._ptr, self._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the length in runes of the slice. Note that this operation\\n     *      takes time proportional to the length of the slice; avoid using it\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\n     *      the slice is empty or not.\\n     * @param self The slice to operate on.\\n     * @return The length of the slice in runes.\\n     */\\n    function len(slice memory self) internal pure returns (uint256 l) {\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\n        uint256 ptr = self._ptr - 31;\\n        uint256 end = ptr + self._len;\\n        for (l = 0; ptr < end; l++) {\\n            uint8 b;\\n            assembly {\\n                b := and(mload(ptr), 0xFF)\\n            }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if (b < 0xE0) {\\n                ptr += 2;\\n            } else if (b < 0xF0) {\\n                ptr += 3;\\n            } else if (b < 0xF8) {\\n                ptr += 4;\\n            } else if (b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first slice to compare.\\n     * @param other The second slice to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(slice memory self, slice memory other) internal pure returns (int256) {\\n        uint256 shortest = self._len;\\n        if (other._len < self._len) shortest = other._len;\\n\\n        uint256 selfptr = self._ptr;\\n        uint256 otherptr = other._ptr;\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask = type(uint256).max; // 0xffff...\\n                if (shortest < 32) {\\n                    mask = ~(2**(8 * (32 - shortest + idx)) - 1);\\n                }\\n                unchecked {\\n                    uint256 diff = (a & mask) - (b & mask);\\n                    if (diff != 0) return int256(diff);\\n                }\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n        return int256(self._len) - int256(other._len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two slices contain the same text.\\n     * @param self The first slice to compare.\\n     * @param self The second slice to compare.\\n     * @return True if the slices are equal, false otherwise.\\n     */\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\n        return compare(self, other) == 0;\\n    }\\n\\n    /*\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\n     *      slice to point to the next rune and returning `self`.\\n     * @param self The slice to operate on.\\n     * @param rune The slice that will contain the first rune.\\n     * @return `rune`.\\n     */\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\n        rune._ptr = self._ptr;\\n\\n        if (self._len == 0) {\\n            rune._len = 0;\\n            return rune;\\n        }\\n\\n        uint256 l;\\n        uint256 b;\\n        // Load the first byte of the rune into the LSBs of b\\n        assembly {\\n            b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF)\\n        }\\n        if (b < 0x80) {\\n            l = 1;\\n        } else if (b < 0xE0) {\\n            l = 2;\\n        } else if (b < 0xF0) {\\n            l = 3;\\n        } else {\\n            l = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (l > self._len) {\\n            rune._len = self._len;\\n            self._ptr += self._len;\\n            self._len = 0;\\n            return rune;\\n        }\\n\\n        self._ptr += l;\\n        self._len -= l;\\n        rune._len = l;\\n        return rune;\\n    }\\n\\n    /*\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\n     *      to the next rune.\\n     * @param self The slice to operate on.\\n     * @return A slice containing only the first rune from `self`.\\n     */\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\n        nextRune(self, ret);\\n    }\\n\\n    /*\\n     * @dev Returns the number of the first codepoint in the slice.\\n     * @param self The slice to operate on.\\n     * @return The number of the first codepoint in the slice.\\n     */\\n    function ord(slice memory self) internal pure returns (uint256 ret) {\\n        if (self._len == 0) {\\n            return 0;\\n        }\\n\\n        uint256 word;\\n        uint256 length;\\n        uint256 divisor = 2**248;\\n\\n        // Load the rune into the MSBs of b\\n        assembly {\\n            word := mload(mload(add(self, 32)))\\n        }\\n        uint256 b = word / divisor;\\n        if (b < 0x80) {\\n            ret = b;\\n            length = 1;\\n        } else if (b < 0xE0) {\\n            ret = b & 0x1F;\\n            length = 2;\\n        } else if (b < 0xF0) {\\n            ret = b & 0x0F;\\n            length = 3;\\n        } else {\\n            ret = b & 0x07;\\n            length = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (length > self._len) {\\n            return 0;\\n        }\\n\\n        for (uint256 i = 1; i < length; i++) {\\n            divisor = divisor / 256;\\n            b = (word / divisor) & 0xFF;\\n            if (b & 0xC0 != 0x80) {\\n                // Invalid UTF-8 sequence\\n                return 0;\\n            }\\n            ret = (ret * 64) | (b & 0x3F);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if `self` starts with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        if (self._ptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let selfptr := mload(add(self, 0x20))\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        bool equal = true;\\n        if (self._ptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let selfptr := mload(add(self, 0x20))\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n            self._ptr += needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice ends with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        uint256 selfptr = self._ptr + self._len - needle._len;\\n\\n        if (selfptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\n     *      end of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        uint256 selfptr = self._ptr + self._len - needle._len;\\n        bool equal = true;\\n        if (selfptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    // Returns the memory address of the first byte of the first occurrence of\\n    // `needle` in `self`, or the first byte after `self` if not found.\\n    function findPtr(\\n        uint256 selflen,\\n        uint256 selfptr,\\n        uint256 needlelen,\\n        uint256 needleptr\\n    ) private pure returns (uint256) {\\n        uint256 ptr = selfptr;\\n        uint256 idx;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask;\\n                if (needlelen > 0) {\\n                    mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\\n                }\\n\\n                bytes32 needledata;\\n                assembly {\\n                    needledata := and(mload(needleptr), mask)\\n                }\\n\\n                uint256 end = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly {\\n                    ptrdata := and(mload(ptr), mask)\\n                }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr >= end) return selfptr + selflen;\\n                    ptr++;\\n                    assembly {\\n                        ptrdata := and(mload(ptr), mask)\\n                    }\\n                }\\n                return ptr;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly {\\n                    hash := keccak256(needleptr, needlelen)\\n                }\\n\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\n                    bytes32 testHash;\\n                    assembly {\\n                        testHash := keccak256(ptr, needlelen)\\n                    }\\n                    if (hash == testHash) return ptr;\\n                    ptr += 1;\\n                }\\n            }\\n        }\\n        return selfptr + selflen;\\n    }\\n\\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(\\n        uint256 selflen,\\n        uint256 selfptr,\\n        uint256 needlelen,\\n        uint256 needleptr\\n    ) private pure returns (uint256) {\\n        uint256 ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask;\\n                if (needlelen > 0) {\\n                    mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\\n                }\\n\\n                bytes32 needledata;\\n                assembly {\\n                    needledata := and(mload(needleptr), mask)\\n                }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly {\\n                    ptrdata := and(mload(ptr), mask)\\n                }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr) return selfptr;\\n                    ptr--;\\n                    assembly {\\n                        ptrdata := and(mload(ptr), mask)\\n                    }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly {\\n                    hash := keccak256(needleptr, needlelen)\\n                }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly {\\n                        testHash := keccak256(ptr, needlelen)\\n                    }\\n                    if (hash == testHash) return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\n     *      if `needle` is not found.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len -= ptr - self._ptr;\\n        self._ptr = ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain the part of the string from the start of\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\n     *      is not found, `self` is set to the empty slice.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint256 ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len = ptr - self._ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and `token` to everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function split(\\n        slice memory self,\\n        slice memory needle,\\n        slice memory token\\n    ) internal pure returns (slice memory) {\\n        uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = self._ptr;\\n        token._len = ptr - self._ptr;\\n        if (ptr == self._ptr + self._len) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n            self._ptr = ptr + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and returning everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` up to the first occurrence of `delim`.\\n     */\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        split(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(\\n        slice memory self,\\n        slice memory needle,\\n        slice memory token\\n    ) internal pure returns (slice memory) {\\n        uint256 ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and returning everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` after the last occurrence of `delim`.\\n     */\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        rsplit(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return The number of occurrences of `needle` found in `self`.\\n     */\\n    function count(slice memory self, slice memory needle) internal pure returns (uint256 cnt) {\\n        uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\n        while (ptr <= self._ptr + self._len) {\\n            cnt++;\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns True if `self` contains `needle`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return True if `needle` is found in `self`, false otherwise.\\n     */\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\n    }\\n\\n    /*\\n     * @dev Returns a newly allocated string containing the concatenation of\\n     *      `self` and `other`.\\n     * @param self The first slice to concatenate.\\n     * @param other The second slice to concatenate.\\n     * @return The concatenation of the two strings.\\n     */\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\n        string memory ret = new string(self._len + other._len);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n        memcpy(retptr, self._ptr, self._len);\\n        memcpy(retptr + self._len, other._ptr, other._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\n     *      newly allocated string.\\n     * @param self The delimiter to use.\\n     * @param parts A list of slices to join.\\n     * @return A newly allocated string containing all the slices in `parts`,\\n     *         joined with `self`.\\n     */\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\n        if (parts.length == 0) return \\\"\\\";\\n\\n        uint256 length = self._len * (parts.length - 1);\\n        for (uint256 i = 0; i < parts.length; i++) length += parts[i]._len;\\n\\n        string memory ret = new string(length);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\n            retptr += parts[i]._len;\\n            if (i < parts.length - 1) {\\n                memcpy(retptr, self._ptr, self._len);\\n                retptr += self._len;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0xc989d0c026e2c63955cfe5b85fa6d47190d8e9fb5c195f9b20878791deddfd2c\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613eda6200012060003960008181610577015281816105b7015281816106a5015281816106e501526107740152613eda6000f3fe6080604052600436106101405760003560e01c806359c42f21116100b657806394a2eeb81161006f57806394a2eeb814610368578063a217fddf14610388578063a3e033f11461039d578063b1552267146103bd578063d547741f146103d3578063f72c0d8b146103f357600080fd5b806359c42f21146102b35780635e70664c146102d357806362219866146102f35780638129fc1c146103135780638ac1da721461032857806391d148541461034857600080fd5b80633659cfe6116101085780633659cfe6146102275780633d5b23e31461024757806348c02dc11461025d5780634f1ef2861461027257806352d1902d1461028557806354fd4d501461029a57600080fd5b806301ffc9a71461014557806304bde4dd1461017a578063248a9ca3146101a75780632f2ff15d146101e557806336568abe14610207575b600080fd5b34801561015157600080fd5b5061016561016036600461281e565b610415565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061019a610195366004612848565b610426565b60405161017191906128b1565b3480156101b357600080fd5b506101d76101c2366004612848565b60009081526065602052604090206001015490565b604051908152602001610171565b3480156101f157600080fd5b506102056102003660046128db565b6104c0565b005b34801561021357600080fd5b506102056102223660046128db565b6104ea565b34801561023357600080fd5b50610205610242366004612907565b61056d565b34801561025357600080fd5b506101d760fe5481565b34801561026957600080fd5b5061020561064c565b6102056102803660046129e7565b61069b565b34801561029157600080fd5b506101d7610767565b3480156102a657600080fd5b5060fb5461ffff166101d7565b3480156102bf57600080fd5b5061019a6102ce366004612a48565b61081a565b3480156102df57600080fd5b506101d76102ee366004612a8a565b610846565b3480156102ff57600080fd5b506101d761030e366004612a48565b6108b3565b34801561031f57600080fd5b5061020561092c565b34801561033457600080fd5b5061019a610343366004612bab565b610a6c565b34801561035457600080fd5b506101656103633660046128db565b610ab1565b34801561037457600080fd5b5061019a610383366004612c44565b610adc565b34801561039457600080fd5b506101d7600081565b3480156103a957600080fd5b506101d76103b8366004612cd2565b610b19565b3480156103c957600080fd5b506101d760ff5481565b3480156103df57600080fd5b506102056103ee3660046128db565b610b83565b3480156103ff57600080fd5b506101d7600080516020613e6783398151915281565b600061042082610ba8565b92915050565b60fc602052600090815260409020805461043f90612d6c565b80601f016020809104026020016040519081016040528092919081815260200182805461046b90612d6c565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b505050505081565b6000828152606560205260409020600101546104db81610bdd565b6104e58383610be7565b505050565b6001600160a01b038116331461055f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105698282610c6d565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b55760405162461bcd60e51b815260040161055690612da6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105fe600080516020613e87833981519152546001600160a01b031690565b6001600160a01b0316146106245760405162461bcd60e51b815260040161055690612df2565b61062d81610cd4565b6040805160008082526020820190925261064991839190610cec565b50565b600080516020613e6783398151915261066481610bdd565b60fb80546001919060009061067e90849061ffff16612e54565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106e35760405162461bcd60e51b815260040161055690612da6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661072c600080516020613e87833981519152546001600160a01b031690565b6001600160a01b0316146107525760405162461bcd60e51b815260040161055690612df2565b61075b82610cd4565b61056982826001610cec565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108075760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610556565b50600080516020613e8783398151915290565b60fd602052816000526040600020816002811061083657600080fd5b01805490925061043f9150612d6c565b60fe54600081815260fc602052604090206108618382612ebd565b506040518181527fabb811cda210349363acfb5609934d3717818d26783decefcd058c05030652f09060200160405180910390a1600160fe60008282546108a89190612f7c565b909155509092915050565b6000806108c384620186a0612f8f565b90508381116108ff5760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b6044820152606401610556565b600061090b8483612fc4565b610916906005612f7c565b9050610923600a82612fc4565b95945050505050565b600054610100900460ff161580801561094c5750600054600160ff909116105b806109665750303b158015610966575060005460ff166001145b6109c95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610556565b6000805460ff1916600117905580156109ec576000805461ff0019166101001790555b6109f4610e57565b6109fc610e57565b610a07600033610be7565b610a1f600080516020613e6783398151915233610be7565b600060fe558015610649576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6060610a7661270e565b8781526020810187905260408101869052606081018590526080810184905260a08101839052610aa581610ec4565b98975050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060610ae661270e565b86815260208101869052604081018590526060810184905260a08101839052610b0e81610f4e565b979650505050505050565b60ff54600081815260fd60205260409020610b3690836002612750565b507f5ecb6e80c43cb0e0bdb5cee29498fd6f694ddd330a970ac2f363506fa7673d468183604051610b68929190612fd8565b60405180910390a1600160ff60008282546108a89190612f7c565b600082815260656020526040902060010154610b9e81610bdd565b6104e58383610c6d565b60006001600160e01b03198216637965db0b60e01b148061042057506301ffc9a760e01b6001600160e01b0319831614610420565b6106498133610fab565b610bf18282610ab1565b6105695760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c293390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c778282610ab1565b156105695760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020613e6783398151915261056981610bdd565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d1f576104e58361100f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d79575060408051601f3d908101601f19168201909252610d769181019061302f565b60015b610ddc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610556565b600080516020613e878339815191528114610e4b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610556565b506104e58383836110ab565b600054610100900460ff16610ec25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610556565b565b6060610ece6110d6565b610ef58360200151600081518110610ee857610ee8613048565b6020026020010151611163565b610efe846112cf565b610f0785611498565b610f10866118b1565b610f1987611972565b610f22886119d9565b604051602001610f389796959493929190613120565b6040516020818303038152906040529050919050565b6060610f586110d6565b610f728360200151600081518110610ee857610ee8613048565b610f7b846112cf565b610f8485611498565b610f8d866118b1565b610f96876119d9565b604051602001610f38969594939291906131d4565b610fb58282610ab1565b61056957610fcd816001600160a01b03166014611aac565b610fd8836020611aac565b604051602001610fe9929190613273565b60408051601f198184030181529082905262461bcd60e51b8252610556916004016128b1565b6001600160a01b0381163b61107c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610556565b600080516020613e8783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110b483611c4e565b6000825111806110c15750805b156104e5576110d08383611c8e565b50505050565b606060405160200161114f907f3c726563742069643d226261636b67726f756e642d636f6c6f722d322220783d81527f222e352220793d2230222077696474683d2235353022206865696768743d22386020820152741a981110393c1e9119991110393c9e91199911179f60591b604082015260550190565b604051602081830303815290604052905090565b606060fc600061117284611d79565b8152602001908152602001600020805461118b90612d6c565b80601f01602080910402602001604051908101604052809291908181526020018280546111b790612d6c565b80156112045780601f106111d957610100808354040283529160200191611204565b820191906000526020600020905b8154815290600101906020018083116111e757829003601f168201915b5050505050905080516000036112ca576000805260fc6020527f3d65bc8af043c3492e2efc328ab30f794c3cc5eba72564adef73ad45ad4ac2ea805461124990612d6c565b80601f016020809104026020016040519081016040528092919081815260200182805461127590612d6c565b80156112c25780601f10611297576101008083540402835291602001916112c2565b820191906000526020600020905b8154815290600101906020018083116112a557829003601f168201915b505050505090505b919050565b6060600080600061130385604001516000600281106112f0576112f0613048565b60200201516001600160401b0316611d92565b925092509250600080600061132888604001516001600281106112f0576112f0613048565b9250925092506040516020016113c8907f3c706174682069643d22666f726567726f756e642d636f6c6f722d322220643d81527f224d3433352c3737372e383348313135762d3530483433357635305a6d302d3560208201527f33322e3833483131357633363048343335563234355a6d302d3132322e38334860408201527118989abb169a98241a199abb1a982d11179f60711b606082015260720190565b6040516020818303038152906040526113e087611db1565b6113e987611db1565b6113f287611db1565b604051602001611404939291906132e8565b60405160208183030381529060405261141c85611db1565b61142585611db1565b61142e85611db1565b604051602001611440939291906132e8565b60408051601f198184030181529082905261145e9291602001613342565b60408051601f198184030181529082905261147c9291602001613576565b6040516020818303038152906040529650505050505050919050565b6060600082600001516040516020016114b191906135a5565b604051602081830303815290604052905060006114d96114d48560000151611eb9565b611ee6565b9050600d81111561186b5760006114f38560000151611eb9565b90506000611519604051806040016040528060018152602001600160fd1b815250611eb9565b60408051600680825260e08201909252919250600091829182918291816020015b604080518082019091526000808252602082015281526020019060019003908161153a5750506040805160038082526080820190925291925060009190602082015b606081526020019060019003908161157c5790505090505b60038510156117945760006115a98888611fbf565b90506115b481511590565b1561162657878386815181106115cc576115cc613048565b6020026020010181905250611603836115fd604051806040016040528060018152602001600160fd1b815250611eb9565b90611fe5565b82878151811061161557611615613048565b602002602001018190525050611794565b600a61163182611ee6565b61163b9086612f7c565b111561174d578560020361168b5761166d6040518060400160405280600381526020016217171760e91b815250611eb9565b83868151811061167f5761167f613048565b60200260200101819052505b6116b1836115fd604051806040016040528060018152602001600160fd1b815250611eb9565b8287815181106116c3576116c3613048565b60209081029190910101526116d9600187612f7c565b60408051600680825260e08201909252919750816020015b60408051808201909152600080825260208201528152602001906001900390816116f1579050509250808360008151811061172e5761172e613048565b602002602001018190525061174281611ee6565b93506001945061178e565b61175681611ee6565b6117609085612f7c565b93508083868151811061177557611775613048565b602090810291909101015261178b600186612f7c565b94505b50611594565b806000815181106117a7576117a7613048565b60200260200101516040516020016117bf91906135a5565b604051602081830303815290604052816001815181106117e1576117e1613048565b60200260200101516040516020016117f991906135f3565b6040516020818303038152906040528260028151811061181b5761181b613048565b60200260200101516040516020016118339190613642565b60408051601f1981840301815290829052611852939291602001613672565b6040516020818303038152906040529850505050505050505b8160405160200161187c91906136b5565b60408051601f198184030181529082905261189991602001613766565b60405160208183030381529060405292505050919050565b6040805160208082019092526000815290820151516060919060038111156118d7575060035b60005b8181101561196057600061190a866020015183815181106118fd576118fd613048565b6020026020010151612188565b90508361192061191b846014612f8f565b611db1565b611929836121a7565b60405160200161193b939291906137e9565b60405160208183030381529060405293505080806119589061386d565b9150506118da565b50816040516020016118999190613886565b6060600061198883608001518460a001516108b3565b9050611995816002612317565b6040516020016119a5919061398f565b60408051601f19818403018152908290526119c2916020016139b5565b604051602081830303815290604052915050919050565b606060008060006119fa85606001516000600281106112f0576112f0613048565b9250925092506000806000611a1f88606001516001600281106112f0576112f0613048565b925092509250611a2e86611db1565b611a3786611db1565b611a4086611db1565b604051602001611a52939291906132e8565b604051602081830303815290604052611a6a84611db1565b611a7384611db1565b611a7c84611db1565b604051602001611a8e939291906132e8565b60408051601f198184030181529082905261147c9291602001613ae3565b60606000611abb836002612f8f565b611ac6906002612f7c565b6001600160401b03811115611add57611add612922565b6040519080825280601f01601f191660200182016040528015611b07576020820181803683370190505b509050600360fc1b81600081518110611b2257611b22613048565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b5157611b51613048565b60200101906001600160f81b031916908160001a9053506000611b75846002612f8f565b611b80906001612f7c565b90505b6001811115611bf8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bb457611bb4613048565b1a60f81b828281518110611bca57611bca613048565b60200101906001600160f81b031916908160001a90535060049490941c93611bf181613c7d565b9050611b83565b508315611c475760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610556565b9392505050565b611c578161100f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611cf65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610556565b600080846001600160a01b031684604051611d119190613c94565b600060405180830381855af49150503d8060008114611d4c576040519150601f19603f3d011682016040523d82523d6000602084013e611d51565b606091505b50915091506109238282604051806060016040528060278152602001613ea7602791396123ff565b600080611d8583612188565b9050611c47600a82613cb0565b60008080611da4620151808504612438565b9196909550909350915050565b606081600003611dd85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e025780611dec8161386d565b9150611dfb9050600a83612fc4565b9150611ddc565b6000816001600160401b03811115611e1c57611e1c612922565b6040519080825280601f01601f191660200182016040528015611e46576020820181803683370190505b5090505b8415611eb157611e5b600183613cc4565b9150611e68600a86613cb0565b611e73906030612f7c565b60f81b818381518110611e8857611e88613048565b60200101906001600160f81b031916908160001a905350611eaa600a86612fc4565b9450611e4a565b949350505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b600080601f8360200151611efa9190613cc4565b8351909150600090611f0c9083612f7c565b9050600092505b80821015611fb857815160ff166080811015611f3b57611f34600184612f7c565b9250611fa5565b60e08160ff161015611f5257611f34600284612f7c565b60f08160ff161015611f6957611f34600384612f7c565b60f88160ff161015611f8057611f34600484612f7c565b60fc8160ff161015611f9757611f34600584612f7c565b611fa2600684612f7c565b92505b5082611fb08161386d565b935050611f13565b5050919050565b6040805180820190915260008082526020820152611fde8383836124d4565b5092915050565b606081516000036120055750604080516020810190915260008152610420565b6000600183516120159190613cc4565b84516120219190612f8f565b905060005b835181101561206c5783818151811061204157612041613048565b602002602001015160000151826120589190612f7c565b9150806120648161386d565b915050612026565b506000816001600160401b0381111561208757612087612922565b6040519080825280601f01601f1916602001820160405280156120b1576020820181803683370190505b5090506020810160005b855181101561217d57612109828783815181106120da576120da613048565b6020026020010151602001518884815181106120f8576120f8613048565b60200260200101516000015161257f565b85818151811061211b5761211b613048565b602002602001015160000151826121329190612f7c565b9150600186516121429190613cc4565b81101561216b5761215c828860200151896000015161257f565b86516121689083612f7c565b91505b806121758161386d565b9150506120bb565b509095945050505050565b80516000908290820361219e5750600092915050565b50506020015190565b606060005b601b8160ff161080156121e05750828160ff16602081106121cf576121cf613048565b1a60f81b6001600160f81b03191615155b156121f757806121ef81613cd7565b9150506121ac565b60008160ff166001600160401b0381111561221457612214612922565b6040519080825280601f01601f19166020018201604052801561223e576020820181803683370190505b509050600091505b601b8260ff1610801561227a5750838260ff166020811061226957612269613048565b1a60f81b6001600160f81b03191615155b156122d657838260ff166020811061229457612294613048565b1a60f81b818360ff16815181106122ad576122ad613048565b60200101906001600160f81b031916908160001a905350816122ce81613cd7565b925050612246565b8084601c1a60f81b6001600160f81b03191615611eb157806040516020016122fe9190613cf6565b6040516020818303038152906040529050949350505050565b6060600061232683600a613e01565b9050600061233761191b8387612fc4565b9050600061234861191b8488613cb0565b90506000815190506000836040516020016123639190613e10565b60405160208183030381529060405290508660ff168210156123d05760005b61238f8360ff8a16613cc4565b8160ff1610156123ce57816040516020016123aa9190613e35565b604051602081830303815290604052915080806123c690613cd7565b915050612382565b505b80836040516020016123e3929190613576565b6040516020818303038152906040529550505050505092915050565b6060831561240e575081611c47565b82511561241e5782518084602001fd5b8160405162461bcd60e51b815260040161055691906128b1565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161249557612495612fae565b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b6040805180820190915260008082526020820152600061250685600001518660200151866000015187602001516125f9565b6020808701805191860191909152519091506125229082613cc4565b8352845160208601516125359190612f7c565b81036125445760008552612576565b835183516125529190612f7c565b85518690612561908390613cc4565b90525083516125709082612f7c565b60208601525b50909392505050565b602081106125b75781518352612596602084612f7c565b92506125a3602083612f7c565b91506125b0602082613cc4565b905061257f565b60001981156125e65760016125cd836020613cc4565b6125d990610100613e5a565b6125e39190613cc4565b90505b9151835183169219169190911790915250565b6000838186851161270457602085116126b35760008515612645576001612621876020613cc4565b61262c906008612f8f565b612637906002613e5a565b6126419190613cc4565b1990505b845181166000876126568b8b612f7c565b6126609190613cc4565b855190915083165b8281146126a55781861061268d576126808b8b612f7c565b9650505050505050611eb1565b856126978161386d565b965050838651169050612668565b859650505050505050611eb1565b508383206000905b6126c58689613cc4565b8211612702578583208082036126e15783945050505050611eb1565b6126ec600185612f7c565b93505081806126fa9061386d565b9250506126bb565b505b610b0e8787612f7c565b6040518060c00160405280606081526020016060815260200161272f612799565b815260200161273c612799565b815260200160008152602001600081525090565b8260028101928215612789579160200282015b8281111561278957825182906127799082612ebd565b5091602001919060010190612763565b506127959291506127b7565b5090565b60405180604001604052806002906020820280368337509192915050565b808211156127955760006127cb82826127d4565b506001016127b7565b5080546127e090612d6c565b6000825580601f106127f0575050565b601f01602090049060005260206000209081019061064991905b80821115612795576000815560010161280a565b60006020828403121561283057600080fd5b81356001600160e01b031981168114611c4757600080fd5b60006020828403121561285a57600080fd5b5035919050565b60005b8381101561287c578181015183820152602001612864565b50506000910152565b6000815180845261289d816020860160208601612861565b601f01601f19169290920160200192915050565b602081526000611c476020830184612885565b80356001600160a01b03811681146112ca57600080fd5b600080604083850312156128ee57600080fd5b823591506128fe602084016128c4565b90509250929050565b60006020828403121561291957600080fd5b611c47826128c4565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561295a5761295a612922565b60405290565b604051601f8201601f191681016001600160401b038111828210171561298857612988612922565b604052919050565b60006001600160401b038311156129a9576129a9612922565b6129bc601f8401601f1916602001612960565b90508281528383830111156129d057600080fd5b828260208301376000602084830101529392505050565b600080604083850312156129fa57600080fd5b612a03836128c4565b915060208301356001600160401b03811115612a1e57600080fd5b8301601f81018513612a2f57600080fd5b612a3e85823560208401612990565b9150509250929050565b60008060408385031215612a5b57600080fd5b50508035926020909101359150565b600082601f830112612a7b57600080fd5b611c4783833560208501612990565b600060208284031215612a9c57600080fd5b81356001600160401b03811115612ab257600080fd5b611eb184828501612a6a565b600082601f830112612acf57600080fd5b813560206001600160401b0380831115612aeb57612aeb612922565b8260051b612afa838201612960565b9384528581018301938381019088861115612b1457600080fd5b84880192505b85831015610aa557823584811115612b325760008081fd5b612b408a87838c0101612a6a565b8352509184019190840190612b1a565b600082601f830112612b6157600080fd5b612b69612938565b806040840185811115612b7b57600080fd5b845b8181101561217d5780356001600160401b0381168114612b9d5760008081fd5b845260209384019301612b7d565b6000806000806000806101008789031215612bc557600080fd5b86356001600160401b0380821115612bdc57600080fd5b612be88a838b01612a6a565b97506020890135915080821115612bfe57600080fd5b50612c0b89828a01612abe565b955050612c1b8860408901612b50565b9350612c2a8860808901612b50565b925060c0870135915060e087013590509295509295509295565b600080600080600060e08688031215612c5c57600080fd5b85356001600160401b0380821115612c7357600080fd5b612c7f89838a01612a6a565b96506020880135915080821115612c9557600080fd5b50612ca288828901612abe565b945050612cb28760408801612b50565b9250612cc18760808801612b50565b9497939650919460c0013592915050565b60006020808385031215612ce557600080fd5b82356001600160401b0380821115612cfc57600080fd5b818501915085601f830112612d1057600080fd5b612d18612938565b806040840188811115612d2a57600080fd5b845b81811015612d5e57803585811115612d445760008081fd5b612d508b828901612a6a565b855250928601928601612d2c565b509098975050505050505050565b600181811c90821680612d8057607f821691505b602082108103612da057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115611fde57611fde612e3e565b601f8211156104e557600081815260208120601f850160051c81016020861015612e965750805b601f850160051c820191505b81811015612eb557828155600101612ea2565b505050505050565b81516001600160401b03811115612ed657612ed6612922565b612eea81612ee48454612d6c565b84612e6f565b602080601f831160018114612f1f5760008415612f075750858301515b600019600386901b1c1916600185901b178555612eb5565b600085815260208120601f198616915b82811015612f4e57888601518255948401946001909101908401612f2f565b5085821015612f6c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561042057610420612e3e565b6000816000190483118215151615612fa957612fa9612e3e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612fd357612fd3612fae565b500490565b82815260406020808301829052600091608084019190840185845b600281101561302257603f19878603018352613010858351612885565b94509183019190830190600101612ff3565b5092979650505050505050565b60006020828403121561304157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b7f3c7376672077696474683d2235353022206865696768743d223835302220766981527f6577426f783d2230203020353530203835302220786d6c6e733d22687474703a60208201527f2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c6960408201527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b606082015261111f60f11b608082015260820190565b60008151613116818560208601612861565b9290920192915050565b600061312b8261305e565b8951602061313c8284838f01612861565b8a5191909201916131508284838e01612861565b895191909201916131648284838d01612861565b885191909201916131788284838c01612861565b8751919092019161318c8284838b01612861565b865191909201916131a08284838a01612861565b855191909201916131b48284838901612861565b50651e17b9bb339f60d11b91019081526006019998505050505050505050565b60006131df8261305e565b885160206131f08284838e01612861565b895191909201916132048284838d01612861565b885191909201916132188284838c01612861565b8751919092019161322c8284838b01612861565b865191909201916132408284838a01612861565b855191909201916132548284838901612861565b50651e17b9bb339f60d11b910190815260060198975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132ab816017850160208801612861565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132dc816028840160208801612861565b01602801949350505050565b600084516132fa818460208901612861565b8083019050602d60f81b808252855161331a816001850160208a01612861565b60019201918201528351613335816002840160208801612861565b0160020195945050505050565b7f3c672069643d22646976696465722d636f6c6f722220746578742d72656e646581527f72696e673d226f7074696d697a6553706565642220666f6e742d73697a653d22602082015270189811103334b6361e913bb434ba32911f60791b60408201527f3c706174682069643d22646976696465722d636f6c6f722d322220643d224d3160518201527f35362e33352c3531342e3539683233372e333122207374796c653d2266696c6c60718201527f3a206e6f6e653b207374726f6b653a20236666636534333b207374726f6b652d60918201527f6d697465726c696d69743a2031303b207374726f6b652d77696474683a20327060b1820152643c1d91179f60d91b60d18201527f3c746578742069643d22776f726b2d706572696f642d636f6c6f72222074726160d68201527f6e73666f726d3d227472616e736c617465283133342e3735203130322e30362960f68201527f22207374796c653d22666f6e742d66616d696c793a2048656c7665746963613b61011682015272103337b73a16b9b4bd329d10189ab83c1d911f60691b6101368201527f3c747370616e20783d22302220793d223022207374796c653d226c65747465726101498201527f2d73706163696e673a202d2e3035656d3b223e576f726b20506572696f643a206101698201526000611eb1613557613551613542610189860188613104565b620101f160ed1b815260030190565b85613104565b721e17ba39b830b71f1e17ba32bc3a1f1e17b39f60691b815260130190565b60008351613588818460208801612861565b83519083019061359c818360208801612861565b01949350505050565b721e3a39b830b7103c1e911811103c9e9118111f60691b815281516000906135d4816013850160208701612861565b671e17ba39b830b71f60c11b6013939091019283015250601b01919050565b731e3a39b830b7103c1e911811103c9e91199b111f60611b81528151600090613623816014850160208701612861565b671e17ba39b830b71f60c11b6014939091019283015250601c01919050565b731e3a39b830b7103c1e911811103c9e911b99111f60611b81528151600090613623816014850160208701612861565b60008451613684818460208901612861565b845190830190613698818360208901612861565b84519101906136ab818360208801612861565b0195945050505050565b7f3c746578742069643d226e616d652d636f6c6f722d3222207472616e73666f7281527f6d3d227472616e736c617465283135362e3335203330302922207374796c653d60208201527f2266696c6c3a20236666636534333b20666f6e742d66616d696c793a204d6f6e60408201526530b1b79d911f60d11b606082015260008251613748816066850160208701612861565b661e17ba32bc3a1f60c91b6066939091019283015250606d01919050565b7f3c672069643d226e616d652d636f6c6f722220746578742d72656e646572696e81527f673d226f7074696d697a6553706565642220666f6e742d73697a653d223330226020820152601f60f91b6040820152600082516137ce816041850160208701612861565b631e17b39f60e11b6041939091019283015250604501919050565b600084516137fb818460208901612861565b6f1e3a39b830b7103c1e911811103c9e9160811b9083019081528451613828816010840160208901612861565b61111f60f11b60109290910191820152835161384b816012840160208801612861565b671e17ba39b830b71f60c11b60129290910191820152601a0195945050505050565b60006001820161387f5761387f612e3e565b5060010190565b7f3c672069643d226465736372697074696f6e2d636f6c6f722220746578742d7281527f656e646572696e673d226f7074696d697a6553706565642220666f6e742d73696020820152743d329e91189a91103334b6361e913bb434ba32911f60591b60408201527f3c74657874207472616e73666f726d3d227472616e736c61746528313535203460558201527f36302922207374796c653d22666f6e742d66616d696c793a2048656c7665746960758201527531b09d903337b73a16b9b4bd329d10189ab83c1d911f60511b60958201526000825161396d8160ab850160208701612861565b6a1e17ba32bc3a1f1e17b39f60a91b60ab93909101928301525060b601919050565b600082516139a1818460208701612861565b61202560f01b920191825250600201919050565b7f3c672069643d226672616374696f6e2d636f6c6f722220746578742d72656e6481527f6572696e673d226f7074696d697a6553706565642220666f6e742d73697a653d602082015264111998111f60d91b60408201527f3c746578742069643d226672616374696f6e2d636f6c6f722d3222207472616e60458201527f73666f726d3d227472616e736c617465283135362e3335203536382e3033292260658201527f207374796c653d2266696c6c3a20236666636534333b20666f6e742d66616d6960858201527f6c793a204d6f6e61636f223e3c747370616e20783d22302220793d2230223e0060a582015260008251613ab98160c4850160208701612861565b721e17ba39b830b71f1e17ba32bc3a1f1e17b39f60691b60c493909101928301525060d701919050565b7f3c672069643d22696d706163742d706572696f642d636f6c6f7222207465787481527f2d72656e646572696e673d226f7074696d697a6553706565642220666f6e742d60208201527f73697a653d223130222066696c6c3d227768697465223e00000000000000000060408201527f3c746578742069643d22696d706163742d706572696f642d636f6c6f722d322260578201527f207472616e73666f726d3d227472616e736c617465283133342e37352037353860778201527f2922207374796c653d22666f6e742d66616d696c793a2048656c7665746963616097820152731d903337b73a16b9b4bd329d10189ab83c1d911f60611b60b78201527f3c747370616e20783d22302220793d223022207374796c653d226c657474657260cb8201527f2d73706163696e673a202d2e3035656d3b223e496d7061637420506572696f6460eb8201526101d160f51b61010b820152600061010d8451613c508183860160208901612861565b613c73613557613c6d8484880101620101f160ed1b815260030190565b87613104565b9695505050505050565b600081613c8c57613c8c612e3e565b506000190190565b60008251613ca6818460208701612861565b9190910192915050565b600082613cbf57613cbf612fae565b500690565b8181038181111561042057610420612e3e565b600060ff821660ff8103613ced57613ced612e3e565b60010192915050565b60008251613d08818460208701612861565b6217171760e91b920191825250600301919050565b600181815b80851115613d58578160001904821115613d3e57613d3e612e3e565b80851615613d4b57918102915b93841c9390800290613d22565b509250929050565b600082613d6f57506001610420565b81613d7c57506000610420565b8160018114613d925760028114613d9c57613db8565b6001915050610420565b60ff841115613dad57613dad612e3e565b50506001821b610420565b5060208310610133831016604e8410600b8410161715613ddb575081810a610420565b613de58383613d1d565b8060001904821115613df957613df9612e3e565b029392505050565b6000611c4760ff841683613d60565b60008251613e22818460208701612861565b601760f91b920191825250600101919050565b60008251613e47818460208701612861565b600360fc1b920191825250600101919050565b6000611c478383613d6056fe189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806359c42f21116100b657806394a2eeb81161006f57806394a2eeb814610368578063a217fddf14610388578063a3e033f11461039d578063b1552267146103bd578063d547741f146103d3578063f72c0d8b146103f357600080fd5b806359c42f21146102b35780635e70664c146102d357806362219866146102f35780638129fc1c146103135780638ac1da721461032857806391d148541461034857600080fd5b80633659cfe6116101085780633659cfe6146102275780633d5b23e31461024757806348c02dc11461025d5780634f1ef2861461027257806352d1902d1461028557806354fd4d501461029a57600080fd5b806301ffc9a71461014557806304bde4dd1461017a578063248a9ca3146101a75780632f2ff15d146101e557806336568abe14610207575b600080fd5b34801561015157600080fd5b5061016561016036600461281e565b610415565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061019a610195366004612848565b610426565b60405161017191906128b1565b3480156101b357600080fd5b506101d76101c2366004612848565b60009081526065602052604090206001015490565b604051908152602001610171565b3480156101f157600080fd5b506102056102003660046128db565b6104c0565b005b34801561021357600080fd5b506102056102223660046128db565b6104ea565b34801561023357600080fd5b50610205610242366004612907565b61056d565b34801561025357600080fd5b506101d760fe5481565b34801561026957600080fd5b5061020561064c565b6102056102803660046129e7565b61069b565b34801561029157600080fd5b506101d7610767565b3480156102a657600080fd5b5060fb5461ffff166101d7565b3480156102bf57600080fd5b5061019a6102ce366004612a48565b61081a565b3480156102df57600080fd5b506101d76102ee366004612a8a565b610846565b3480156102ff57600080fd5b506101d761030e366004612a48565b6108b3565b34801561031f57600080fd5b5061020561092c565b34801561033457600080fd5b5061019a610343366004612bab565b610a6c565b34801561035457600080fd5b506101656103633660046128db565b610ab1565b34801561037457600080fd5b5061019a610383366004612c44565b610adc565b34801561039457600080fd5b506101d7600081565b3480156103a957600080fd5b506101d76103b8366004612cd2565b610b19565b3480156103c957600080fd5b506101d760ff5481565b3480156103df57600080fd5b506102056103ee3660046128db565b610b83565b3480156103ff57600080fd5b506101d7600080516020613e6783398151915281565b600061042082610ba8565b92915050565b60fc602052600090815260409020805461043f90612d6c565b80601f016020809104026020016040519081016040528092919081815260200182805461046b90612d6c565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b505050505081565b6000828152606560205260409020600101546104db81610bdd565b6104e58383610be7565b505050565b6001600160a01b038116331461055f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105698282610c6d565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105b55760405162461bcd60e51b815260040161055690612da6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105fe600080516020613e87833981519152546001600160a01b031690565b6001600160a01b0316146106245760405162461bcd60e51b815260040161055690612df2565b61062d81610cd4565b6040805160008082526020820190925261064991839190610cec565b50565b600080516020613e6783398151915261066481610bdd565b60fb80546001919060009061067e90849061ffff16612e54565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106e35760405162461bcd60e51b815260040161055690612da6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661072c600080516020613e87833981519152546001600160a01b031690565b6001600160a01b0316146107525760405162461bcd60e51b815260040161055690612df2565b61075b82610cd4565b61056982826001610cec565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108075760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610556565b50600080516020613e8783398151915290565b60fd602052816000526040600020816002811061083657600080fd5b01805490925061043f9150612d6c565b60fe54600081815260fc602052604090206108618382612ebd565b506040518181527fabb811cda210349363acfb5609934d3717818d26783decefcd058c05030652f09060200160405180910390a1600160fe60008282546108a89190612f7c565b909155509092915050565b6000806108c384620186a0612f8f565b90508381116108ff5760405162461bcd60e51b81526020600482015260086024820152674f766572666c6f7760c01b6044820152606401610556565b600061090b8483612fc4565b610916906005612f7c565b9050610923600a82612fc4565b95945050505050565b600054610100900460ff161580801561094c5750600054600160ff909116105b806109665750303b158015610966575060005460ff166001145b6109c95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610556565b6000805460ff1916600117905580156109ec576000805461ff0019166101001790555b6109f4610e57565b6109fc610e57565b610a07600033610be7565b610a1f600080516020613e6783398151915233610be7565b600060fe558015610649576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6060610a7661270e565b8781526020810187905260408101869052606081018590526080810184905260a08101839052610aa581610ec4565b98975050505050505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060610ae661270e565b86815260208101869052604081018590526060810184905260a08101839052610b0e81610f4e565b979650505050505050565b60ff54600081815260fd60205260409020610b3690836002612750565b507f5ecb6e80c43cb0e0bdb5cee29498fd6f694ddd330a970ac2f363506fa7673d468183604051610b68929190612fd8565b60405180910390a1600160ff60008282546108a89190612f7c565b600082815260656020526040902060010154610b9e81610bdd565b6104e58383610c6d565b60006001600160e01b03198216637965db0b60e01b148061042057506301ffc9a760e01b6001600160e01b0319831614610420565b6106498133610fab565b610bf18282610ab1565b6105695760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c293390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c778282610ab1565b156105695760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020613e6783398151915261056981610bdd565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d1f576104e58361100f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d79575060408051601f3d908101601f19168201909252610d769181019061302f565b60015b610ddc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610556565b600080516020613e878339815191528114610e4b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610556565b506104e58383836110ab565b600054610100900460ff16610ec25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610556565b565b6060610ece6110d6565b610ef58360200151600081518110610ee857610ee8613048565b6020026020010151611163565b610efe846112cf565b610f0785611498565b610f10866118b1565b610f1987611972565b610f22886119d9565b604051602001610f389796959493929190613120565b6040516020818303038152906040529050919050565b6060610f586110d6565b610f728360200151600081518110610ee857610ee8613048565b610f7b846112cf565b610f8485611498565b610f8d866118b1565b610f96876119d9565b604051602001610f38969594939291906131d4565b610fb58282610ab1565b61056957610fcd816001600160a01b03166014611aac565b610fd8836020611aac565b604051602001610fe9929190613273565b60408051601f198184030181529082905262461bcd60e51b8252610556916004016128b1565b6001600160a01b0381163b61107c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610556565b600080516020613e8783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110b483611c4e565b6000825111806110c15750805b156104e5576110d08383611c8e565b50505050565b606060405160200161114f907f3c726563742069643d226261636b67726f756e642d636f6c6f722d322220783d81527f222e352220793d2230222077696474683d2235353022206865696768743d22386020820152741a981110393c1e9119991110393c9e91199911179f60591b604082015260550190565b604051602081830303815290604052905090565b606060fc600061117284611d79565b8152602001908152602001600020805461118b90612d6c565b80601f01602080910402602001604051908101604052809291908181526020018280546111b790612d6c565b80156112045780601f106111d957610100808354040283529160200191611204565b820191906000526020600020905b8154815290600101906020018083116111e757829003601f168201915b5050505050905080516000036112ca576000805260fc6020527f3d65bc8af043c3492e2efc328ab30f794c3cc5eba72564adef73ad45ad4ac2ea805461124990612d6c565b80601f016020809104026020016040519081016040528092919081815260200182805461127590612d6c565b80156112c25780601f10611297576101008083540402835291602001916112c2565b820191906000526020600020905b8154815290600101906020018083116112a557829003601f168201915b505050505090505b919050565b6060600080600061130385604001516000600281106112f0576112f0613048565b60200201516001600160401b0316611d92565b925092509250600080600061132888604001516001600281106112f0576112f0613048565b9250925092506040516020016113c8907f3c706174682069643d22666f726567726f756e642d636f6c6f722d322220643d81527f224d3433352c3737372e383348313135762d3530483433357635305a6d302d3560208201527f33322e3833483131357633363048343335563234355a6d302d3132322e38334860408201527118989abb169a98241a199abb1a982d11179f60711b606082015260720190565b6040516020818303038152906040526113e087611db1565b6113e987611db1565b6113f287611db1565b604051602001611404939291906132e8565b60405160208183030381529060405261141c85611db1565b61142585611db1565b61142e85611db1565b604051602001611440939291906132e8565b60408051601f198184030181529082905261145e9291602001613342565b60408051601f198184030181529082905261147c9291602001613576565b6040516020818303038152906040529650505050505050919050565b6060600082600001516040516020016114b191906135a5565b604051602081830303815290604052905060006114d96114d48560000151611eb9565b611ee6565b9050600d81111561186b5760006114f38560000151611eb9565b90506000611519604051806040016040528060018152602001600160fd1b815250611eb9565b60408051600680825260e08201909252919250600091829182918291816020015b604080518082019091526000808252602082015281526020019060019003908161153a5750506040805160038082526080820190925291925060009190602082015b606081526020019060019003908161157c5790505090505b60038510156117945760006115a98888611fbf565b90506115b481511590565b1561162657878386815181106115cc576115cc613048565b6020026020010181905250611603836115fd604051806040016040528060018152602001600160fd1b815250611eb9565b90611fe5565b82878151811061161557611615613048565b602002602001018190525050611794565b600a61163182611ee6565b61163b9086612f7c565b111561174d578560020361168b5761166d6040518060400160405280600381526020016217171760e91b815250611eb9565b83868151811061167f5761167f613048565b60200260200101819052505b6116b1836115fd604051806040016040528060018152602001600160fd1b815250611eb9565b8287815181106116c3576116c3613048565b60209081029190910101526116d9600187612f7c565b60408051600680825260e08201909252919750816020015b60408051808201909152600080825260208201528152602001906001900390816116f1579050509250808360008151811061172e5761172e613048565b602002602001018190525061174281611ee6565b93506001945061178e565b61175681611ee6565b6117609085612f7c565b93508083868151811061177557611775613048565b602090810291909101015261178b600186612f7c565b94505b50611594565b806000815181106117a7576117a7613048565b60200260200101516040516020016117bf91906135a5565b604051602081830303815290604052816001815181106117e1576117e1613048565b60200260200101516040516020016117f991906135f3565b6040516020818303038152906040528260028151811061181b5761181b613048565b60200260200101516040516020016118339190613642565b60408051601f1981840301815290829052611852939291602001613672565b6040516020818303038152906040529850505050505050505b8160405160200161187c91906136b5565b60408051601f198184030181529082905261189991602001613766565b60405160208183030381529060405292505050919050565b6040805160208082019092526000815290820151516060919060038111156118d7575060035b60005b8181101561196057600061190a866020015183815181106118fd576118fd613048565b6020026020010151612188565b90508361192061191b846014612f8f565b611db1565b611929836121a7565b60405160200161193b939291906137e9565b60405160208183030381529060405293505080806119589061386d565b9150506118da565b50816040516020016118999190613886565b6060600061198883608001518460a001516108b3565b9050611995816002612317565b6040516020016119a5919061398f565b60408051601f19818403018152908290526119c2916020016139b5565b604051602081830303815290604052915050919050565b606060008060006119fa85606001516000600281106112f0576112f0613048565b9250925092506000806000611a1f88606001516001600281106112f0576112f0613048565b925092509250611a2e86611db1565b611a3786611db1565b611a4086611db1565b604051602001611a52939291906132e8565b604051602081830303815290604052611a6a84611db1565b611a7384611db1565b611a7c84611db1565b604051602001611a8e939291906132e8565b60408051601f198184030181529082905261147c9291602001613ae3565b60606000611abb836002612f8f565b611ac6906002612f7c565b6001600160401b03811115611add57611add612922565b6040519080825280601f01601f191660200182016040528015611b07576020820181803683370190505b509050600360fc1b81600081518110611b2257611b22613048565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b5157611b51613048565b60200101906001600160f81b031916908160001a9053506000611b75846002612f8f565b611b80906001612f7c565b90505b6001811115611bf8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bb457611bb4613048565b1a60f81b828281518110611bca57611bca613048565b60200101906001600160f81b031916908160001a90535060049490941c93611bf181613c7d565b9050611b83565b508315611c475760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610556565b9392505050565b611c578161100f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611cf65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610556565b600080846001600160a01b031684604051611d119190613c94565b600060405180830381855af49150503d8060008114611d4c576040519150601f19603f3d011682016040523d82523d6000602084013e611d51565b606091505b50915091506109238282604051806060016040528060278152602001613ea7602791396123ff565b600080611d8583612188565b9050611c47600a82613cb0565b60008080611da4620151808504612438565b9196909550909350915050565b606081600003611dd85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e025780611dec8161386d565b9150611dfb9050600a83612fc4565b9150611ddc565b6000816001600160401b03811115611e1c57611e1c612922565b6040519080825280601f01601f191660200182016040528015611e46576020820181803683370190505b5090505b8415611eb157611e5b600183613cc4565b9150611e68600a86613cb0565b611e73906030612f7c565b60f81b818381518110611e8857611e88613048565b60200101906001600160f81b031916908160001a905350611eaa600a86612fc4565b9450611e4a565b949350505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b600080601f8360200151611efa9190613cc4565b8351909150600090611f0c9083612f7c565b9050600092505b80821015611fb857815160ff166080811015611f3b57611f34600184612f7c565b9250611fa5565b60e08160ff161015611f5257611f34600284612f7c565b60f08160ff161015611f6957611f34600384612f7c565b60f88160ff161015611f8057611f34600484612f7c565b60fc8160ff161015611f9757611f34600584612f7c565b611fa2600684612f7c565b92505b5082611fb08161386d565b935050611f13565b5050919050565b6040805180820190915260008082526020820152611fde8383836124d4565b5092915050565b606081516000036120055750604080516020810190915260008152610420565b6000600183516120159190613cc4565b84516120219190612f8f565b905060005b835181101561206c5783818151811061204157612041613048565b602002602001015160000151826120589190612f7c565b9150806120648161386d565b915050612026565b506000816001600160401b0381111561208757612087612922565b6040519080825280601f01601f1916602001820160405280156120b1576020820181803683370190505b5090506020810160005b855181101561217d57612109828783815181106120da576120da613048565b6020026020010151602001518884815181106120f8576120f8613048565b60200260200101516000015161257f565b85818151811061211b5761211b613048565b602002602001015160000151826121329190612f7c565b9150600186516121429190613cc4565b81101561216b5761215c828860200151896000015161257f565b86516121689083612f7c565b91505b806121758161386d565b9150506120bb565b509095945050505050565b80516000908290820361219e5750600092915050565b50506020015190565b606060005b601b8160ff161080156121e05750828160ff16602081106121cf576121cf613048565b1a60f81b6001600160f81b03191615155b156121f757806121ef81613cd7565b9150506121ac565b60008160ff166001600160401b0381111561221457612214612922565b6040519080825280601f01601f19166020018201604052801561223e576020820181803683370190505b509050600091505b601b8260ff1610801561227a5750838260ff166020811061226957612269613048565b1a60f81b6001600160f81b03191615155b156122d657838260ff166020811061229457612294613048565b1a60f81b818360ff16815181106122ad576122ad613048565b60200101906001600160f81b031916908160001a905350816122ce81613cd7565b925050612246565b8084601c1a60f81b6001600160f81b03191615611eb157806040516020016122fe9190613cf6565b6040516020818303038152906040529050949350505050565b6060600061232683600a613e01565b9050600061233761191b8387612fc4565b9050600061234861191b8488613cb0565b90506000815190506000836040516020016123639190613e10565b60405160208183030381529060405290508660ff168210156123d05760005b61238f8360ff8a16613cc4565b8160ff1610156123ce57816040516020016123aa9190613e35565b604051602081830303815290604052915080806123c690613cd7565b915050612382565b505b80836040516020016123e3929190613576565b6040516020818303038152906040529550505050505092915050565b6060831561240e575081611c47565b82511561241e5782518084602001fd5b8160405162461bcd60e51b815260040161055691906128b1565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161249557612495612fae565b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b6040805180820190915260008082526020820152600061250685600001518660200151866000015187602001516125f9565b6020808701805191860191909152519091506125229082613cc4565b8352845160208601516125359190612f7c565b81036125445760008552612576565b835183516125529190612f7c565b85518690612561908390613cc4565b90525083516125709082612f7c565b60208601525b50909392505050565b602081106125b75781518352612596602084612f7c565b92506125a3602083612f7c565b91506125b0602082613cc4565b905061257f565b60001981156125e65760016125cd836020613cc4565b6125d990610100613e5a565b6125e39190613cc4565b90505b9151835183169219169190911790915250565b6000838186851161270457602085116126b35760008515612645576001612621876020613cc4565b61262c906008612f8f565b612637906002613e5a565b6126419190613cc4565b1990505b845181166000876126568b8b612f7c565b6126609190613cc4565b855190915083165b8281146126a55781861061268d576126808b8b612f7c565b9650505050505050611eb1565b856126978161386d565b965050838651169050612668565b859650505050505050611eb1565b508383206000905b6126c58689613cc4565b8211612702578583208082036126e15783945050505050611eb1565b6126ec600185612f7c565b93505081806126fa9061386d565b9250506126bb565b505b610b0e8787612f7c565b6040518060c00160405280606081526020016060815260200161272f612799565b815260200161273c612799565b815260200160008152602001600081525090565b8260028101928215612789579160200282015b8281111561278957825182906127799082612ebd565b5091602001919060010190612763565b506127959291506127b7565b5090565b60405180604001604052806002906020820280368337509192915050565b808211156127955760006127cb82826127d4565b506001016127b7565b5080546127e090612d6c565b6000825580601f106127f0575050565b601f01602090049060005260206000209081019061064991905b80821115612795576000815560010161280a565b60006020828403121561283057600080fd5b81356001600160e01b031981168114611c4757600080fd5b60006020828403121561285a57600080fd5b5035919050565b60005b8381101561287c578181015183820152602001612864565b50506000910152565b6000815180845261289d816020860160208601612861565b601f01601f19169290920160200192915050565b602081526000611c476020830184612885565b80356001600160a01b03811681146112ca57600080fd5b600080604083850312156128ee57600080fd5b823591506128fe602084016128c4565b90509250929050565b60006020828403121561291957600080fd5b611c47826128c4565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561295a5761295a612922565b60405290565b604051601f8201601f191681016001600160401b038111828210171561298857612988612922565b604052919050565b60006001600160401b038311156129a9576129a9612922565b6129bc601f8401601f1916602001612960565b90508281528383830111156129d057600080fd5b828260208301376000602084830101529392505050565b600080604083850312156129fa57600080fd5b612a03836128c4565b915060208301356001600160401b03811115612a1e57600080fd5b8301601f81018513612a2f57600080fd5b612a3e85823560208401612990565b9150509250929050565b60008060408385031215612a5b57600080fd5b50508035926020909101359150565b600082601f830112612a7b57600080fd5b611c4783833560208501612990565b600060208284031215612a9c57600080fd5b81356001600160401b03811115612ab257600080fd5b611eb184828501612a6a565b600082601f830112612acf57600080fd5b813560206001600160401b0380831115612aeb57612aeb612922565b8260051b612afa838201612960565b9384528581018301938381019088861115612b1457600080fd5b84880192505b85831015610aa557823584811115612b325760008081fd5b612b408a87838c0101612a6a565b8352509184019190840190612b1a565b600082601f830112612b6157600080fd5b612b69612938565b806040840185811115612b7b57600080fd5b845b8181101561217d5780356001600160401b0381168114612b9d5760008081fd5b845260209384019301612b7d565b6000806000806000806101008789031215612bc557600080fd5b86356001600160401b0380821115612bdc57600080fd5b612be88a838b01612a6a565b97506020890135915080821115612bfe57600080fd5b50612c0b89828a01612abe565b955050612c1b8860408901612b50565b9350612c2a8860808901612b50565b925060c0870135915060e087013590509295509295509295565b600080600080600060e08688031215612c5c57600080fd5b85356001600160401b0380821115612c7357600080fd5b612c7f89838a01612a6a565b96506020880135915080821115612c9557600080fd5b50612ca288828901612abe565b945050612cb28760408801612b50565b9250612cc18760808801612b50565b9497939650919460c0013592915050565b60006020808385031215612ce557600080fd5b82356001600160401b0380821115612cfc57600080fd5b818501915085601f830112612d1057600080fd5b612d18612938565b806040840188811115612d2a57600080fd5b845b81811015612d5e57803585811115612d445760008081fd5b612d508b828901612a6a565b855250928601928601612d2c565b509098975050505050505050565b600181811c90821680612d8057607f821691505b602082108103612da057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115611fde57611fde612e3e565b601f8211156104e557600081815260208120601f850160051c81016020861015612e965750805b601f850160051c820191505b81811015612eb557828155600101612ea2565b505050505050565b81516001600160401b03811115612ed657612ed6612922565b612eea81612ee48454612d6c565b84612e6f565b602080601f831160018114612f1f5760008415612f075750858301515b600019600386901b1c1916600185901b178555612eb5565b600085815260208120601f198616915b82811015612f4e57888601518255948401946001909101908401612f2f565b5085821015612f6c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561042057610420612e3e565b6000816000190483118215151615612fa957612fa9612e3e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612fd357612fd3612fae565b500490565b82815260406020808301829052600091608084019190840185845b600281101561302257603f19878603018352613010858351612885565b94509183019190830190600101612ff3565b5092979650505050505050565b60006020828403121561304157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b7f3c7376672077696474683d2235353022206865696768743d223835302220766981527f6577426f783d2230203020353530203835302220786d6c6e733d22687474703a60208201527f2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c6960408201527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b606082015261111f60f11b608082015260820190565b60008151613116818560208601612861565b9290920192915050565b600061312b8261305e565b8951602061313c8284838f01612861565b8a5191909201916131508284838e01612861565b895191909201916131648284838d01612861565b885191909201916131788284838c01612861565b8751919092019161318c8284838b01612861565b865191909201916131a08284838a01612861565b855191909201916131b48284838901612861565b50651e17b9bb339f60d11b91019081526006019998505050505050505050565b60006131df8261305e565b885160206131f08284838e01612861565b895191909201916132048284838d01612861565b885191909201916132188284838c01612861565b8751919092019161322c8284838b01612861565b865191909201916132408284838a01612861565b855191909201916132548284838901612861565b50651e17b9bb339f60d11b910190815260060198975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516132ab816017850160208801612861565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132dc816028840160208801612861565b01602801949350505050565b600084516132fa818460208901612861565b8083019050602d60f81b808252855161331a816001850160208a01612861565b60019201918201528351613335816002840160208801612861565b0160020195945050505050565b7f3c672069643d22646976696465722d636f6c6f722220746578742d72656e646581527f72696e673d226f7074696d697a6553706565642220666f6e742d73697a653d22602082015270189811103334b6361e913bb434ba32911f60791b60408201527f3c706174682069643d22646976696465722d636f6c6f722d322220643d224d3160518201527f35362e33352c3531342e3539683233372e333122207374796c653d2266696c6c60718201527f3a206e6f6e653b207374726f6b653a20236666636534333b207374726f6b652d60918201527f6d697465726c696d69743a2031303b207374726f6b652d77696474683a20327060b1820152643c1d91179f60d91b60d18201527f3c746578742069643d22776f726b2d706572696f642d636f6c6f72222074726160d68201527f6e73666f726d3d227472616e736c617465283133342e3735203130322e30362960f68201527f22207374796c653d22666f6e742d66616d696c793a2048656c7665746963613b61011682015272103337b73a16b9b4bd329d10189ab83c1d911f60691b6101368201527f3c747370616e20783d22302220793d223022207374796c653d226c65747465726101498201527f2d73706163696e673a202d2e3035656d3b223e576f726b20506572696f643a206101698201526000611eb1613557613551613542610189860188613104565b620101f160ed1b815260030190565b85613104565b721e17ba39b830b71f1e17ba32bc3a1f1e17b39f60691b815260130190565b60008351613588818460208801612861565b83519083019061359c818360208801612861565b01949350505050565b721e3a39b830b7103c1e911811103c9e9118111f60691b815281516000906135d4816013850160208701612861565b671e17ba39b830b71f60c11b6013939091019283015250601b01919050565b731e3a39b830b7103c1e911811103c9e91199b111f60611b81528151600090613623816014850160208701612861565b671e17ba39b830b71f60c11b6014939091019283015250601c01919050565b731e3a39b830b7103c1e911811103c9e911b99111f60611b81528151600090613623816014850160208701612861565b60008451613684818460208901612861565b845190830190613698818360208901612861565b84519101906136ab818360208801612861565b0195945050505050565b7f3c746578742069643d226e616d652d636f6c6f722d3222207472616e73666f7281527f6d3d227472616e736c617465283135362e3335203330302922207374796c653d60208201527f2266696c6c3a20236666636534333b20666f6e742d66616d696c793a204d6f6e60408201526530b1b79d911f60d11b606082015260008251613748816066850160208701612861565b661e17ba32bc3a1f60c91b6066939091019283015250606d01919050565b7f3c672069643d226e616d652d636f6c6f722220746578742d72656e646572696e81527f673d226f7074696d697a6553706565642220666f6e742d73697a653d223330226020820152601f60f91b6040820152600082516137ce816041850160208701612861565b631e17b39f60e11b6041939091019283015250604501919050565b600084516137fb818460208901612861565b6f1e3a39b830b7103c1e911811103c9e9160811b9083019081528451613828816010840160208901612861565b61111f60f11b60109290910191820152835161384b816012840160208801612861565b671e17ba39b830b71f60c11b60129290910191820152601a0195945050505050565b60006001820161387f5761387f612e3e565b5060010190565b7f3c672069643d226465736372697074696f6e2d636f6c6f722220746578742d7281527f656e646572696e673d226f7074696d697a6553706565642220666f6e742d73696020820152743d329e91189a91103334b6361e913bb434ba32911f60591b60408201527f3c74657874207472616e73666f726d3d227472616e736c61746528313535203460558201527f36302922207374796c653d22666f6e742d66616d696c793a2048656c7665746960758201527531b09d903337b73a16b9b4bd329d10189ab83c1d911f60511b60958201526000825161396d8160ab850160208701612861565b6a1e17ba32bc3a1f1e17b39f60a91b60ab93909101928301525060b601919050565b600082516139a1818460208701612861565b61202560f01b920191825250600201919050565b7f3c672069643d226672616374696f6e2d636f6c6f722220746578742d72656e6481527f6572696e673d226f7074696d697a6553706565642220666f6e742d73697a653d602082015264111998111f60d91b60408201527f3c746578742069643d226672616374696f6e2d636f6c6f722d3222207472616e60458201527f73666f726d3d227472616e736c617465283135362e3335203536382e3033292260658201527f207374796c653d2266696c6c3a20236666636534333b20666f6e742d66616d6960858201527f6c793a204d6f6e61636f223e3c747370616e20783d22302220793d2230223e0060a582015260008251613ab98160c4850160208701612861565b721e17ba39b830b71f1e17ba32bc3a1f1e17b39f60691b60c493909101928301525060d701919050565b7f3c672069643d22696d706163742d706572696f642d636f6c6f7222207465787481527f2d72656e646572696e673d226f7074696d697a6553706565642220666f6e742d60208201527f73697a653d223130222066696c6c3d227768697465223e00000000000000000060408201527f3c746578742069643d22696d706163742d706572696f642d636f6c6f722d322260578201527f207472616e73666f726d3d227472616e736c617465283133342e37352037353860778201527f2922207374796c653d22666f6e742d66616d696c793a2048656c7665746963616097820152731d903337b73a16b9b4bd329d10189ab83c1d911f60611b60b78201527f3c747370616e20783d22302220793d223022207374796c653d226c657474657260cb8201527f2d73706163696e673a202d2e3035656d3b223e496d7061637420506572696f6460eb8201526101d160f51b61010b820152600061010d8451613c508183860160208901612861565b613c73613557613c6d8484880101620101f160ed1b815260030190565b87613104565b9695505050505050565b600081613c8c57613c8c612e3e565b506000190190565b60008251613ca6818460208701612861565b9190910192915050565b600082613cbf57613cbf612fae565b500690565b8181038181111561042057610420612e3e565b600060ff821660ff8103613ced57613ced612e3e565b60010192915050565b60008251613d08818460208701612861565b6217171760e91b920191825250600301919050565b600181815b80851115613d58578160001904821115613d3e57613d3e612e3e565b80851615613d4b57918102915b93841c9390800290613d22565b509250929050565b600082613d6f57506001610420565b81613d7c57506000610420565b8160018114613d925760028114613d9c57613db8565b6001915050610420565b60ff841115613dad57613dad612e3e565b50506001821b610420565b5060208310610133831016604e8410600b8410161715613ddb575081810a610420565b613de58383613d1d565b8060001904821115613df957613df9612e3e565b029392505050565b6000611c4760ff841683613d60565b60008251613e22818460208701612861565b601760f91b920191825250600101919050565b60008251613e47818460208701612861565b600360fc1b920191825250600101919050565b6000611c478383613d6056fe189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Id of the interface"
        },
        "returns": {
          "_0": "true, if the interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "backgrounds": {
        "details": "id => background"
      },
      "colorPairs": {
        "details": "id => colorPairs [prime, second]"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "UPGRADER_ROLE()": {
        "notice": "User role required in order to upgrade the contract"
      },
      "constructor": {
        "notice": "Contract constructor logic"
      },
      "initialize()": {
        "notice": "Contract initialization logic"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns a flag indicating if the contract supports the specified interface"
      },
      "updateVersion()": {
        "notice": "Update the contract version numberOnly allowed for member of UPGRADER_ROLE"
      },
      "version()": {
        "notice": "gets the current version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 814,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 817,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1617,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1947,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1093,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6965,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "_version",
        "offset": 0,
        "slot": "251",
        "type": "t_uint16"
      },
      {
        "astId": 6970,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "backgrounds",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6977,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "colorPairs",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 6979,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "backgroundCounter",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 6981,
        "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
        "label": "colorPairCounter",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/HyperCertSVG.sol:HyperCertSVG",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}