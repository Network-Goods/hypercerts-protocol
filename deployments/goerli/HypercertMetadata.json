{
  "address": "0x991b682C9405A926CAB55eC1223B5E8926Fa6F8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgGenerationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "generateSlotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc70d9a6c450294b9fd7eedf0970730f1554fae023db9c130379586c52d8e680",
  "receipt": {
    "to": null,
    "from": "0x23314160c752D6Bb544661DcE13d01C21c64331E",
    "contractAddress": "0x991b682C9405A926CAB55eC1223B5E8926Fa6F8b",
    "transactionIndex": 47,
    "gasUsed": "1867452",
    "logsBloom": "0x
    "blockHash": "0xc87f5e9419e98dda50ad4290c75a12b9aede243305f29a03934e33dfb6a17f83",
    "transactionHash": "0xdc70d9a6c450294b9fd7eedf0970730f1554fae023db9c130379586c52d8e680",
    "logs": [],
    "blockNumber": 7716260,
    "cumulativeGasUsed": "12052114",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x74Add24dFf5665c061f62271A7cb900041C0DD24"
  ],
  "numDeployments": 1,
  "solcInputHash": "8d615b2ce0d22d192c3d8bc34fbeab83",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgGenerationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"generateSlotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hypercertificate metadata creation logic\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HypercertMetadata.sol\":\"HypercertMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"contracts/HypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./interfaces/IHypercertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\\\";\\n\\ninterface IHypercertMinter {\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    function workScopes(bytes32 workScopeId) external view returns (string memory);\\n\\n    function impactScopes(bytes32 impactScopeId) external view returns (string memory);\\n\\n    function rights(bytes32 rightsId) external view returns (string memory);\\n\\n    function getImpactCert(uint256 claimID) external view returns (Claim memory);\\n\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface IHypercertSVG {\\n    function generateSvgHypercert(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n\\n    function generateSvgFraction(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n}\\n\\n/// @dev Hypercertificate metadata creation logic\\ncontract HypercertMetadata is IHypercertMetadata {\\n    using ArraysUpgradeable for uint64[2];\\n    using ArraysUpgradeable for uint256[];\\n    using ArraysUpgradeable for string[];\\n    using StringsExtensions for bool;\\n    using StringsUpgradeable for uint256;\\n\\n    address svgGenerator;\\n\\n    constructor(address svgGenerationAddress) {\\n        svgGenerator = svgGenerationAddress;\\n    }\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        uint256 units = IHypercertMinter(msg.sender).balanceOf(tokenId);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringFraction(claim, units),\\n                            '\\\",\\\"external_url\\\":\\\"',\\n                            claim.uri,\\n                            '\\\",\\\"properties\\\":{',\\n                            abi.encodePacked(\\n                                '\\\"fraction\\\":',\\n                                _propertyStringRange(\\n                                    \\\"Fraction\\\",\\n                                    \\\"Units held by fraction.\\\",\\n                                    units,\\n                                    claim.totalUnits,\\n                                    false\\n                                ),\\n                                \\\",\\\"\\n                            ),\\n                            _hypercertDimensions(claim),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hypercertDimensions(IHypercertMinter.Claim memory claim) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    abi.encodePacked('\\\"scopesOfWork\\\":', _mapWorkScopesIdsToValues(claim.workScopes), \\\",\\\"),\\n                    abi.encodePacked('\\\"scopesOfImpact\\\":', _mapImpactScopesIdsToValues(claim.impactScopes), \\\",\\\"),\\n                    abi.encodePacked(\\n                        '\\\"timeOfWork\\\":',\\n                        _propertyString(\\n                            \\\"Timeframe of work\\\",\\n                            \\\"Timeframe in which work to achieve impact has been performed\\\",\\n                            claim.workTimeframe,\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"timeOfImpact\\\":',\\n                        _propertyString(\\n                            \\\"Timeframe of impact\\\",\\n                            \\\"Timeframe in which impact is realized\\\",\\n                            claim.impactTimeframe,\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked('\\\"rights\\\":', _mapRightsIdsToValues(claim.rights))\\n                )\\n            );\\n    }\\n\\n    function generateSlotURI(uint256 slotId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringHypercert(claim),\\n                            '\\\",\\\"properties\\\":{',\\n                            string.concat('\\\"name\\\":', _propertyString(\\\"name\\\", \\\"Name of hypercert.\\\", claim.name, false)),\\n                            \\\"}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _slotProperties(IHypercertMinter.Claim memory claim) internal view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\n                        \\\"work_timeframe\\\",\\n                        \\\"The period during which the work relating to the claim was done.\\\",\\n                        claim.workTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapWorkScopesIdsToValues(claim.workScopes),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"impact_timeframe\\\",\\n                        \\\"The period during which the impact relating to the claim was made.\\\",\\n                        claim.impactTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapImpactScopesIdsToValues(claim.impactScopes),\\n                    \\\",\\\",\\n                    _mapRightsIdsToValues(claim.rights),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"total_units\\\",\\n                        \\\"Total units issued across all tokens with this slot.\\\",\\n                        claim.totalUnits,\\n                        false\\n                    ),\\n                    \\\",\\\",\\n                    _propertyString(\\\"external_link\\\", \\\"URI of additional data related to the claim.\\\", claim.uri, false)\\n                )\\n            );\\n    }\\n\\n    function _tokenProperties(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\\"units\\\", \\\"Units issued to this token.\\\", units, false),\\n                    \\\",\\\",\\n                    _propertyString(\\\"fraction\\\", \\\"Fraction issued to this token.\\\", units / claim.totalUnits, false)\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringFraction(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHypercertSVG(svgGenerator).generateSvgFraction(\\n                            claim.name,\\n                            claim.description,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            units,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringHypercert(IHypercertMinter.Claim memory claim) internal view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHypercertSVG(svgGenerator).generateSvgHypercert(\\n                            claim.name,\\n                            claim.description,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value_,\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyStringRange(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        uint256 maxValue,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"max_value\\\":',\\n                    maxValue.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        bytes32[] memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_,\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint64[2] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toString(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapWorkScopesIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).workScopes(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Scopes of Work\\\",\\\"description\\\":\\\"Scopes of work encapsulated in this hypercert fraction.\\\",\\\"value\\\":[',\\n                    values.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapImpactScopesIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory vals;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHypercertMinter(msg.sender).impactScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Scopes of Impact\\\",\\\"description\\\":\\\"Scopes of impact encapsulated in this hypercert fraction.\\\",\\\"value\\\":[',\\n                    vals.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapRightsIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).rights(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Rights\\\",\\\"description\\\":\\\"Rights associated with owning the hypercert (fractions)\\\",\\\"value\\\":[',\\n                    values.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x369c40db13e71fa6c30a2b2b2b89998a5360c85b79ce85ab96bf9f3661a31356\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHypercertMetadata {\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x18aa67f24d4c44048b9bcc21832c01adc1d2fbb7e3dd55a4f9cd8484c2901436\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint8[] memory array) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"[\\\", uint256(array[0]).toString(), \\\",\\\", uint256(array[1]).toString(), \\\"]\\\"));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0b2e5340a1625c6b398b07caa64d985e9db5f86a1d1490da30525a2211382b12\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161210938038061210983398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b612076806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610ea5565b610077565b60405161005b9190610f0e565b60405180910390f35b61004e610072366004610f28565b6101c9565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e191908101906111c6565b90506101a28161014001518261016001516100fb8461039d565b61015e604051806040016040528060048152602001636e616d6560e01b8152506040518060400160405280601281526020017f4e616d65206f66206879706572636572742e0000000000000000000000000000815250876101400151600061047d565b60405160200161016e9190611390565b60408051601f198184030181529082905261018e949392916020016113d5565b6040516020818303038152906040526104b9565b6040516020016101b291906114a3565b604051602081830303815290604052915050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa15801561020b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023391908101906111c6565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029991906114e8565b90506103738261014001518361016001516102b4858561060c565b8561018001516103366040518060400160405280600881526020017f4672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e000000000000000000815250888a60e00151600061068b565b6040516020016103469190611501565b60405160208183030381529060405261035e886106da565b60405160200161018e96959493929190611551565b60405160200161038391906114a3565b604051602081830303815290604052925050505b92915050565b600054610140820151610160830151602084015160408086015160e087015191517fffb38c12000000000000000000000000000000000000000000000000000000008152606096610457966001600160a01b039091169563ffb38c129561040d95929491939092906004016116a2565b600060405180830381865afa15801561042a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045291908101906116f4565b6104b9565b6040516020016104679190611729565b6040516020818303038152906040529050919050565b606084848461048d85151561086c565b6040516020016104a0949392919061176e565b6040516020818303038152906040529050949350505050565b606081516000036104d857505060408051602081019091526000815290565b6000604051806060016040528060408152602001611fee60409139905060006003845160026105079190611872565b610511919061189b565b61051c9060046118af565b67ffffffffffffffff81111561053457610534610f4a565b6040519080825280601f01601f19166020018201604052801561055e576020820181803683370190505b509050600182016020820185865187015b808210156105ca576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061056f565b50506003865106600181146105e657600281146105f957610601565b603d6001830353603d6002830353610601565b603d60018303535b509195945050505050565b600054610140830151610160840151602085015160408087015160e0880151915163614a5c8160e01b8152606096610664966001600160a01b039091169563614a5c819561040d959294919390928b916004016118ce565b6040516020016106749190611729565b604051602081830303815290604052905092915050565b60608585610698866108cd565b6106a1866108cd565b6106ac86151561086c565b6040516020016106c0959493929190611927565b604051602081830303815290604052905095945050505050565b60606106e982606001516109ee565b6040516020016106f99190611a5a565b6040516020818303038152906040526107158360800151610b3d565b6040516020016107259190611aaa565b6040516020818303038152906040526107926040518060400160405280601181526020017f54696d656672616d65206f6620776f726b0000000000000000000000000000008152506040518060600160405280603c815260200161202e603c913986602001516001610c7e565b6040516020016107a29190611afa565b60405160208183030381529060405261080f6040518060400160405280601381526020017f54696d656672616d65206f6620696d7061637400000000000000000000000000815250604051806060016040528060258152602001611fc96025913987604001516001610c7e565b60405160200161081f9190611b4a565b60405160208183030381529060405261083b8660a00151610c96565b60405160200161084b9190611b82565b60408051601f19818403018152908290526104679594939291602001611bc7565b606081156108945750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b6060816000036108f45750506040805180820190915260018152600360fc1b602082015290565b8160005b811561091e578061090881611c32565b91506109179050600a8361189b565b91506108f8565b60008167ffffffffffffffff81111561093957610939610f4a565b6040519080825280601f01601f191660200182016040528015610963576020820181803683370190505b5090505b84156109e657610978600183611c4b565b9150610985600a86611c5e565b610990906030611872565b60f81b8183815181106109a5576109a5611c72565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506109df600a8661189b565b9450610967565b949350505050565b805160609060008167ffffffffffffffff811115610a0e57610a0e610f4a565b604051908082528060200260200182016040528015610a4157816020015b6060815260200190600190039081610a2c5790505b50905060005b82811015610b0b57336001600160a01b0316638f88b767868381518110610a7057610a70611c72565b60200260200101516040518263ffffffff1660e01b8152600401610a9691815260200190565b600060405180830381865afa158015610ab3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610adb91908101906116f4565b828281518110610aed57610aed611c72565b60200260200101819052508080610b0390611c32565b915050610a47565b50610b1581610dcd565b604051602001610b259190611c88565b60405160208183030381529060405292505050919050565b8051606090818115610c655760008267ffffffffffffffff811115610b6457610b64610f4a565b604051908082528060200260200182016040528015610b9757816020015b6060815260200190600190039081610b825790505b50905060005b83811015610c6157336001600160a01b031663ef6f66d7878381518110610bc657610bc6611c72565b60200260200101516040518263ffffffff1660e01b8152600401610bec91815260200190565b600060405180830381865afa158015610c09573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3191908101906116f4565b828281518110610c4357610c43611c72565b60200260200101819052508080610c5990611c32565b915050610b9d565b5090505b610c6e81610dcd565b604051602001610b259190611d66565b60608484610c8b85610e6c565b61048d85151561086c565b805160609060008167ffffffffffffffff811115610cb657610cb6610f4a565b604051908082528060200260200182016040528015610ce957816020015b6060815260200190600190039081610cd45790505b50905060005b82811015610db357336001600160a01b031663d52fd095868381518110610d1857610d18611c72565b60200260200101516040518263ffffffff1660e01b8152600401610d3e91815260200190565b600060405180830381865afa158015610d5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8391908101906116f4565b828281518110610d9557610d95611c72565b60200260200101819052508080610dab90611c32565b915050610cef565b50610dbd81610dcd565b604051602001610b259190611e44565b80516060908160005b82811015610e64576000858281518110610df257610df2611c72565b6020026020010151604051602001610e0a9190611f07565b60405160208183030381529060405290508251600003610e2c57809250610e51565b8281604051602001610e3f929190611f35565b60405160208183030381529060405292505b5080610e5c81611c32565b915050610dd6565b509392505050565b6060610e898260005b602002015167ffffffffffffffff166108cd565b610e94836001610e75565b604051602001610467929190611f71565b600060208284031215610eb757600080fd5b5035919050565b60005b83811015610ed9578181015183820152602001610ec1565b50506000910152565b60008151808452610efa816020860160208601610ebe565b601f01601f19169290920160200192915050565b602081526000610f216020830184610ee2565b9392505050565b60008060408385031215610f3b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610f8457610f84610f4a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fb357610fb3610f4a565b604052919050565b600082601f830112610fcc57600080fd5b6040516040810167ffffffffffffffff8282108183111715610ff057610ff0610f4a565b6040918252829185018681111561100657600080fd5b855b8181101561102f57805183811681146110215760008081fd5b845260209384019301611008565b50929695505050505050565b600067ffffffffffffffff82111561105557611055610f4a565b5060051b60200190565b600082601f83011261107057600080fd5b815160206110856110808361103b565b610f8a565b82815260059290921b840181019181810190868411156110a457600080fd5b8286015b848110156110bf57805183529183019183016110a8565b509695505050505050565b600082601f8301126110db57600080fd5b815160206110eb6110808361103b565b82815260059290921b8401810191818101908684111561110a57600080fd5b8286015b848110156110bf5780516001600160a01b038116811461112e5760008081fd5b835291830191830161110e565b805161ffff8116811461114d57600080fd5b919050565b8051801515811461114d57600080fd5b600082601f83011261117357600080fd5b815167ffffffffffffffff81111561118d5761118d610f4a565b6111a0601f8201601f1916602001610f8a565b8181528460208386010111156111b557600080fd5b6109e6826020830160208701610ebe565b6000602082840312156111d857600080fd5b815167ffffffffffffffff808211156111f057600080fd5b908301906101e0828603121561120557600080fd5b61120d610f60565b8251815261121e8660208501610fbb565b60208201526112308660608501610fbb565b604082015260a08301518281111561124757600080fd5b6112538782860161105f565b60608301525060c08301518281111561126b57600080fd5b6112778782860161105f565b60808301525060e08301518281111561128f57600080fd5b61129b8782860161105f565b60a08301525061010080840151838111156112b557600080fd5b6112c1888287016110ca565b60c0840152506101208085015160e08401526101406112e181870161113b565b8385015261016092506112f5838701611152565b828501526101809150818601518581111561130f57600080fd5b61131b8a828901611162565b8286015250506101a08501518481111561133457600080fd5b61134089828801611162565b83850152506101c085015191508382111561135a57600080fd5b61136688838701611162565b908301525095945050505050565b60008151611386818560208601610ebe565b9290920192915050565b7f226e616d65223a000000000000000000000000000000000000000000000000008152600082516113c8816007850160208701610ebe565b9190910160070192915050565b683d913730b6b2911d1160b91b8152600085516113f9816009850160208a01610ebe565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161142a81601a840160208a01610ebe565b6a11161134b6b0b3b2911d1160a91b601a92909101918201528451611456816025840160208901610ebe565b6f222c2270726f70657274696573223a7b60801b602592909101918201528351611487816035840160208801610ebe565b607d60f81b603592909101918201526036019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516114db81601d850160208701610ebe565b91909101601d0192915050565b6000602082840312156114fa57600080fd5b5051919050565b7f226672616374696f6e223a00000000000000000000000000000000000000000081526000825161153981600b850160208701610ebe565b600b60fa1b600b939091019283015250600c01919050565b683d913730b6b2911d1160b91b815260008751611575816009850160208c01610ebe565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015287516115a681601a840160208c01610ebe565b6a11161134b6b0b3b2911d1160a91b601a929091019182015286516115d2816025840160208b01610ebe565b7f222c2265787465726e616c5f75726c223a220000000000000000000000000000602592909101918201528551611610816037840160208a01610ebe565b6f222c2270726f70657274696573223a7b60801b603792909101918201528451611641816047840160208901610ebe565b61166161165360478385010187611374565b617d7d60f01b815260020190565b9a9950505050505050505050565b8060005b600281101561169c57815167ffffffffffffffff16845260209384019390910190600101611673565b50505050565b60e0815260006116b560e0830188610ee2565b82810360208401526116c78188610ee2565b9150506116d7604083018661166f565b6116e4608083018561166f565b8260c08301529695505050505050565b60006020828403121561170657600080fd5b815167ffffffffffffffff81111561171d57600080fd5b6109e684828501611162565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161176181601a850160208701610ebe565b91909101601a0192915050565b683d913730b6b2911d1160b91b815260008551611792816009850160208a01610ebe565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516117c381601a840160208a01610ebe565b7f222c2276616c7565223a22000000000000000000000000000000000000000000601a92909101918201528451611801816025840160208901610ebe565b7f222c2269735f696e7472696e736963223a22000000000000000000000000000060259290910191820152835161183f816037840160208801610ebe565b61227d60f01b603792909101918201526039019695505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103975761039761185c565b634e487b7160e01b600052601260045260246000fd5b6000826118aa576118aa611885565b500490565b60008160001904831182151516156118c9576118c961185c565b500290565b60006101008083526118e28184018a610ee2565b905082810360208401526118f68189610ee2565b915050611906604083018761166f565b611913608083018661166f565b60c082019390935260e00152949350505050565b683d913730b6b2911d1160b91b81526000865161194b816009850160208b01610ebe565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152865161197c81601a840160208b01610ebe565b7f222c2276616c7565223a00000000000000000000000000000000000000000000601a929091019182015285516119ba816024840160208a01610ebe565b7f2c226d61785f76616c7565223a000000000000000000000000000000000000006024929091019182015284516119f8816031840160208901610ebe565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000603192909101918201528351611a36816042840160208801610ebe565b611a4d60428284010161227d60f01b815260020190565b9998505050505050505050565b7f2273636f7065734f66576f726b223a0000000000000000000000000000000000815260008251611a9281600f850160208701610ebe565b600b60fa1b600f939091019283015250601001919050565b7f2273636f7065734f66496d70616374223a000000000000000000000000000000815260008251611ae2816011850160208701610ebe565b600b60fa1b6011939091019283015250601201919050565b7f2274696d654f66576f726b223a00000000000000000000000000000000000000815260008251611b3281600d850160208701610ebe565b600b60fa1b600d939091019283015250600e01919050565b7f2274696d654f66496d70616374223a0000000000000000000000000000000000815260008251611a9281600f850160208701610ebe565b7f22726967687473223a0000000000000000000000000000000000000000000000815260008251611bba816009850160208701610ebe565b9190910160090192915050565b60008651611bd9818460208b01610ebe565b865190830190611bed818360208b01610ebe565b8651910190611c00818360208a01610ebe565b8551910190611c13818360208901610ebe565b8451910190611c26818360208801610ebe565b01979650505050505050565b600060018201611c4457611c4461185c565b5060010190565b818103818111156103975761039761185c565b600082611c6d57611c6d611885565b500690565b634e487b7160e01b600052603260045260246000fd5b7f7b226e616d65223a2253636f706573206f6620576f726b222c2264657363726981527f7074696f6e223a2253636f706573206f6620776f726b20656e63617073756c6160208201527f74656420696e207468697320687970657263657274206672616374696f6e2e2260408201527f2c2276616c7565223a5b00000000000000000000000000000000000000000000606082015260008251611d3281606a850160208701610ebe565b7f5d2c2269735f696e7472696e736963223a2274727565227d0000000000000000606a939091019283015250608201919050565b7f7b226e616d65223a2253636f706573206f6620496d70616374222c226465736381527f72697074696f6e223a2253636f706573206f6620696d7061637420656e63617060208201527f73756c6174656420696e2074686973206879706572636572742066726163746960408201527f6f6e2e222c2276616c7565223a5b000000000000000000000000000000000000606082015260008251611e1081606e850160208701610ebe565b7f5d2c2269735f696e7472696e736963223a2274727565227d0000000000000000606e939091019283015250608601919050565b7f7b226e616d65223a22526967687473222c226465736372697074696f6e223a2281527f526967687473206173736f6369617465642077697468206f776e696e6720746860208201527f652068797065726365727420286672616374696f6e7329222c2276616c7565226040820152613a5b60f01b606082015260008251611ed3816062850160208701610ebe565b7f5d2c2269735f696e7472696e736963223a2274727565227d00000000000000006062939091019283015250607a01919050565b6000601160f91b8083528351611f24816001860160208801610ebe565b600193019283015250600201919050565b60008351611f47818460208801610ebe565b600b60fa1b9083019081528351611f65816001840160208801610ebe565b01600101949350505050565b605b60f81b815260008351611f8d816001850160208801610ebe565b600b60fa1b6001918401918201528351611fae816002840160208801610ebe565b605d60f81b6002929091019182015260030194935050505056fe54696d656672616d6520696e20776869636820696d70616374206973207265616c697a65644142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f54696d656672616d6520696e20776869636820776f726b20746f206163686965766520696d7061637420686173206265656e20706572666f726d6564a164736f6c6343000810000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Hypercertificate metadata creation logic",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4612,
        "contract": "contracts/HypercertMetadata.sol:HypercertMetadata",
        "label": "svgGenerator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}