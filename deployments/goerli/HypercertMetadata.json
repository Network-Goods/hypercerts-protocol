{
  "address": "0x3bC93F25302E1709c9c8Bd4E75ebcF30a888Dcbc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "generateSlotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgGenerationAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "d97d8224a1f6868a44a5813a670ec6f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"generateSlotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgGenerationAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hypercertificate metadata creation logic\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface\"},\"returns\":{\"_0\":\"true, if the interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"UPGRADER_ROLE()\":{\"notice\":\"User role required in order to upgrade the contract\"},\"constructor\":{\"notice\":\"Contract constructor logic\"},\"initialize(address)\":{\"notice\":\"Contract initialization logic\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns a flag indicating if the contract supports the specified interface\"},\"updateVersion()\":{\"notice\":\"Update the contract version numberOnly allowed for member of UPGRADER_ROLE\"},\"version()\":{\"notice\":\"gets the current version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperCertMetadata.sol\":\"HyperCertMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/HyperCertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./interfaces/IHyperCertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ninterface IHyperCertMinter {\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    function workScopes(bytes32 workScopeId) external view returns (string memory);\\n\\n    function impactScopes(bytes32 impactScopeId) external view returns (string memory);\\n\\n    function rights(bytes32 rightsId) external view returns (string memory);\\n\\n    function getImpactCert(uint256 claimID) external view returns (Claim memory);\\n\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface IHyperCertSVG {\\n    function generateSvgHyperCert(\\n        string memory name,\\n        string[] memory scopesOfImpact,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n\\n    function generateSvgFraction(\\n        string memory name,\\n        string[] memory scopesOfImpact,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n}\\n\\n/// @dev Hypercertificate metadata creation logic\\n// TODO optimise where to call string data\\ncontract HyperCertMetadata is IHyperCertMetadata, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    using ArraysUpgradeable for uint64[2];\\n    using ArraysUpgradeable for uint256[];\\n    using ArraysUpgradeable for string[];\\n    using StringsExtensions for bool;\\n    using StringsUpgradeable for uint256;\\n\\n    /// @notice User role required in order to upgrade the contract\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    /// @notice Current version of the contract\\n    uint16 internal _version;\\n\\n    address svgGenerator;\\n\\n    /*******************\\n     * DEPLOY\\n     ******************/\\n\\n    /// @notice Contract constructor logic\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract initialization logic\\n    function initialize(address svgGenerationAddress) public initializer {\\n        svgGenerator = svgGenerationAddress;\\n\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view virtual returns (string memory) {\\n        IHyperCertMinter.Claim memory claim = IHyperCertMinter(msg.sender).getImpactCert(slotId);\\n        uint256 units = IHyperCertMinter(msg.sender).balanceOf(tokenId);\\n        string[] memory impactScopes = _mapImpactScopesIdsToValues(claim.impactScopes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringFraction(claim, units, impactScopes),\\n                            '\\\",\\\"external_url\\\":\\\"',\\n                            claim.uri,\\n                            '\\\",\\\"properties\\\":{',\\n                            abi.encodePacked(\\n                                '\\\"fraction\\\":',\\n                                _propertyStringRange(\\n                                    \\\"Fraction\\\",\\n                                    \\\"Units held by fraction.\\\",\\n                                    units,\\n                                    claim.totalUnits,\\n                                    false\\n                                ),\\n                                \\\",\\\"\\n                            ),\\n                            _hyperCertDimensions(claim),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateSlotURI(uint256 slotId) external view virtual returns (string memory) {\\n        IHyperCertMinter.Claim memory claim = IHyperCertMinter(msg.sender).getImpactCert(slotId);\\n\\n        string[] memory impactScopes = _mapImpactScopesIdsToValues(claim.impactScopes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringHypercert(claim, impactScopes),\\n                            '\\\",\\\"external_url\\\":\\\"',\\n                            claim.uri,\\n                            '\\\",\\\"properties\\\":{',\\n                            abi.encodePacked(\\n                                '\\\"totalUnits\\\":',\\n                                _propertyString(\\\"Total units\\\", \\\"Units held by fraction.\\\", claim.totalUnits, false),\\n                                \\\",\\\"\\n                            ),\\n                            _hyperCertDimensions(claim),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hyperCertDimensions(IHyperCertMinter.Claim memory claim) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    abi.encodePacked(\\n                        '\\\"scopesOfWork\\\":',\\n                        _propertyStringCSV(\\n                            \\\"Scopes of Work\\\",\\n                            \\\"Scopes of work encapsulated in this hypercert fraction.\\\",\\n                            _mapWorkScopesIdsToValues(claim.workScopes).toCsv(),\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"scopesOfImpact\\\":',\\n                        _propertyStringCSV(\\n                            \\\"Scopes of Impact\\\",\\n                            \\\"Scopes of impact encapsulated in this hypercert fraction.\\\",\\n                            _mapImpactScopesIdsToValues(claim.impactScopes).toCsv(),\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"timeOfWork\\\":',\\n                        _propertyString(\\n                            \\\"Timeframe of work\\\",\\n                            \\\"Timeframe in which work to achieve impact has been performed\\\",\\n                            claim.workTimeframe,\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"timeOfImpact\\\":',\\n                        _propertyString(\\n                            \\\"Timeframe of impact\\\",\\n                            \\\"Timeframe in which impact is realized\\\",\\n                            claim.impactTimeframe,\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"rights\\\":',\\n                        _propertyStringCSV(\\n                            \\\"Rights\\\",\\n                            \\\"Rights associated with owning the hypercert (fractions)\\\",\\n                            _mapRightsIdsToValues(claim.rights).toCsv(),\\n                            true\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringFraction(\\n        IHyperCertMinter.Claim memory claim,\\n        uint256 units,\\n        string[] memory impactScopes\\n    ) internal view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHyperCertSVG(svgGenerator).generateSvgFraction(\\n                            claim.name,\\n                            impactScopes,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            units,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringHypercert(IHyperCertMinter.Claim memory claim, string[] memory scopesOfImpact)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHyperCertSVG(svgGenerator).generateSvgHyperCert(\\n                            claim.name,\\n                            scopesOfImpact,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value_,\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyStringCSV(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":[',\\n                    value_,\\n                    '],\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyStringRange(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        uint256 maxValue,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"max_value\\\":',\\n                    maxValue.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        bytes32[] memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_,\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint64[2] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    array_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapWorkScopesIdsToValues(bytes32[] memory keys) internal view returns (string[] memory vals) {\\n        uint256 len = keys.length;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHyperCertMinter(msg.sender).workScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapImpactScopesIdsToValues(bytes32[] memory keys) internal view returns (string[] memory vals) {\\n        uint256 len = keys.length;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHyperCertMinter(msg.sender).impactScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapRightsIdsToValues(bytes32[] memory keys) internal view returns (string[] memory vals) {\\n        uint256 len = keys.length;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHyperCertMinter(msg.sender).rights(keys[i]);\\n            }\\n            vals = values;\\n        }\\n    }\\n\\n    /*******************\\n     * ADMIN\\n     ******************/\\n\\n    /// @notice gets the current version of the contract\\n    function version() public view virtual returns (uint256) {\\n        return _version;\\n    }\\n\\n    /// @notice Update the contract version number\\n    /// @notice Only allowed for member of UPGRADER_ROLE\\n    function updateVersion() external onlyRole(UPGRADER_ROLE) {\\n        _version += 1;\\n    }\\n\\n    /// @notice Returns a flag indicating if the contract supports the specified interface\\n    /// @param interfaceId Id of the interface\\n    /// @return true, if the interface is supported\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice upgrade authorization logic\\n    /// @dev adds onlyRole(UPGRADER_ROLE) requirement\\n    function _authorizeUpgrade(\\n        address /*newImplementation*/\\n    )\\n        internal\\n        view\\n        override\\n        onlyRole(UPGRADER_ROLE) // solhint-disable-next-line no-empty-blocks\\n    {\\n        //empty block\\n    }\\n}\\n\",\"keccak256\":\"0x765e329d726b245b00e525da190a426729e91166c048d7d989f3999814903061\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHyperCertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHyperCertMetadata {\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x984f26b47e2bce005aa44d746ac17da20974a0c3563f7fc72a7ad74e27d2d4b0\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint64[] memory array) internal pure returns (uint64) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint64 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked('[\\\"', uint256(array[0]).toString(), '\\\",\\\"', uint256(array[1]).toString(), '\\\"]'));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xb716e2b5d07932b16bd0188b72be81f2bedfcb8bade90f23c97afffdba0eb9e1\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516133aa62000120600039600081816104150152818161049a015281816105f101528181610676015261075c01526133aa6000f3fe6080604052600436106100f35760003560e01c806354fd4d501161008a578063c4d66de811610059578063c4d66de8146102ab578063d547741f146102cb578063ed03f41a146102eb578063f72c0d8b1461030b57600080fd5b806354fd4d501461020a57806391383c891461022357806391d1485414610250578063a217fddf1461029657600080fd5b80633659cfe6116100c65780633659cfe6146101ad57806348c02dc1146101cd5780634f1ef286146101e257806352d1902d146101f557600080fd5b806301ffc9a7146100f8578063248a9ca31461012d5780632f2ff15d1461016b57806336568abe1461018d575b600080fd5b34801561010457600080fd5b50610118610113366004612145565b61033f565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061015d61014836600461216f565b60009081526065602052604090206001015490565b604051908152602001610124565b34801561017757600080fd5b5061018b61018636600461219d565b610350565b005b34801561019957600080fd5b5061018b6101a836600461219d565b61037a565b3480156101b957600080fd5b5061018b6101c83660046121cd565b61040b565b3480156101d957600080fd5b5061018b610586565b61018b6101f0366004612283565b6105e7565b34801561020157600080fd5b5061015d61074f565b34801561021657600080fd5b5060fb5461ffff1661015d565b34801561022f57600080fd5b5061024361023e36600461216f565b610814565b6040516101249190612366565b34801561025c57600080fd5b5061011861026b36600461219d565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156102a257600080fd5b5061015d600081565b3480156102b757600080fd5b5061018b6102c63660046121cd565b6109a4565b3480156102d757600080fd5b5061018b6102e636600461219d565b610b39565b3480156102f757600080fd5b50610243610306366004612379565b610b5e565b34801561031757600080fd5b5061015d7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b600061034a82610d2f565b92915050565b60008281526065602052604090206001015461036b81610d64565b6103758383610d6e565b505050565b6001600160a01b03811633146103fd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104078282610e10565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104985760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016103f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104f37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461055e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016103f4565b61056781610e93565b6040805160008082526020820190925261058391839190610ebd565b50565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36105b081610d64565b60fb8054600191906000906105ca90849061ffff166123b1565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106745760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016103f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106cf7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461073a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016103f4565b61074382610e93565b61040782826001610ebd565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107ef5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103f4565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa158015610856573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087e91908101906125ad565b9050600061088f826080015161105d565b905061097c8261014001518361016001516108aa858561118a565b85610180015161092b6040518060400160405280600b81526020017f546f74616c20756e6974730000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e0000000000000000008152508960e001516000611250565b60405160200161093b9190612777565b60405160208183030381529060405261095388611294565b604051602001610968969594939291906127c7565b604051602081830303815290604052611547565b60405160200161098c9190612904565b60405160208183030381529060405292505050919050565b600054610100900460ff16158080156109c45750600054600160ff909116105b806109de5750303b1580156109de575060005460ff166001145b610a505760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103f4565b6000805460ff191660011790558015610a73576000805461ff0019166101001790555b60fb80547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b03851602179055610ab361169a565b610abb61169a565b610ac6600033610d6e565b610af07f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333610d6e565b8015610407576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600082815260656020526040902060010154610b5481610d64565b6103758383610e10565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bc891908101906125ad565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190612949565b90506000610c3f836080015161105d565b9050610d05836101400151846101600151610c5b868686611719565b866101800151610cdd6040518060400160405280600881526020017f4672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e000000000000000000815250898b60e001516000611798565b604051602001610ced9190612962565b60405160208183030381529060405261095389611294565b604051602001610d159190612904565b604051602081830303815290604052935050505092915050565b60006001600160e01b03198216637965db0b60e01b148061034a57506301ffc9a760e01b6001600160e01b031983161461034a565b61058381336117e7565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166104075760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dcc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156104075760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361040781610d64565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610ef05761037583611867565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610f4a575060408051601f3d908101601f19168201909252610f4791810190612949565b60015b610fbc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103f4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146110515760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103f4565b5061037583838361193d565b805160609080156111845760008167ffffffffffffffff811115611083576110836121ea565b6040519080825280602002602001820160405280156110b657816020015b60608152602001906001900390816110a15790505b50905060005b8281101561118057336001600160a01b031663ef6f66d78683815181106110e5576110e56129b2565b60200260200101516040518263ffffffff1660e01b815260040161110b91815260200190565b600060405180830381865afa158015611128573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115091908101906129c8565b828281518110611162576111626129b2565b60200260200101819052508080611178906129fd565b9150506110bc565b5091505b50919050565b60fb54610140830151602084015160408086015160e087015191516312945dd760e31b815260609561122995620100009091046001600160a01b0316946394a2eeb8946111df9492938a939190600401612a98565b600060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261122491908101906129c8565b611547565b6040516020016112399190612aea565b604051602081830303815290604052905092915050565b6060848461125d85611968565b611268851515611a71565b60405160200161127b9493929190612b2f565b6040516020818303038152906040529050949350505050565b60606113046040518060400160405280600e81526020017f53636f706573206f6620576f726b000000000000000000000000000000000000815250604051806060016040528060378152602001613254603791396112fd6112f88660600151611ad2565b611bf5565b6001611c8c565b6040516020016113149190612c0a565b6040516020818303038152906040526113856040518060400160405280601081526020017f53636f706573206f6620496d70616374000000000000000000000000000000008152506040518060600160405280603981526020016132cb603991396112fd6112f8876080015161105d565b6040516020016113959190612c5a565b6040516020818303038152906040526114026040518060400160405280601181526020017f54696d656672616d65206f6620776f726b0000000000000000000000000000008152506040518060600160405280603c8152602001613362603c913986602001516001611caf565b6040516020016114129190612caa565b60405160208183030381529060405261147f6040518060400160405280601381526020017f54696d656672616d65206f6620696d706163740000000000000000000000000081525060405180606001604052806025815260200161322f6025913987604001516001611caf565b60405160200161148f9190612ce2565b6040516020818303038152906040526115006040518060400160405280600681526020017f526967687473000000000000000000000000000000000000000000000000000081525060405180606001604052806037815260200161332b603791396112fd6112f88a60a00151611cbc565b6040516020016115109190612d1a565b60408051601f19818403018152908290526115319594939291602001612d5f565b6040516020818303038152906040529050919050565b6060815160000361156657505060408051602081019091526000815290565b600060405180606001604052806040815260200161328b60409139905060006003845160026115959190612dca565b61159f9190612df3565b6115aa906004612e07565b67ffffffffffffffff8111156115c2576115c26121ea565b6040519080825280601f01601f1916602001820160405280156115ec576020820181803683370190505b509050600182016020820185865187015b80821015611658576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506115fd565b505060038651066001811461167457600281146116875761168f565b603d6001830353603d600283035361168f565b603d60018303535b509195945050505050565b600054610100900460ff166117175760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103f4565b565b60fb54610140840151602085015160408087015160e08801519151634560ed3960e11b815260609561176f95620100009091046001600160a01b031694638ac1da72946111df9492938a93918c91600401612e26565b60405160200161177f9190612aea565b60405160208183030381529060405290505b9392505050565b606085856117a586611968565b6117ae86611968565b6117b9861515611a71565b6040516020016117cd959493929190612e7f565b604051602081830303815290604052905095945050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1661040757611825816001600160a01b03166014611ddf565b611830836020611ddf565b604051602001611841929190612f9f565b60408051601f198184030181529082905262461bcd60e51b82526103f491600401612366565b6001600160a01b0381163b6118e45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103f4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61194683611f88565b6000825111806119535750805b15610375576119628383611fc8565b50505050565b60608160000361198f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119b957806119a3816129fd565b91506119b29050600a83612df3565b9150611993565b60008167ffffffffffffffff8111156119d4576119d46121ea565b6040519080825280601f01601f1916602001820160405280156119fe576020820181803683370190505b5090505b8415611a6957611a13600183613020565b9150611a20600a86613033565b611a2b906030612dca565b60f81b818381518110611a4057611a406129b2565b60200101906001600160f81b031916908160001a905350611a62600a86612df3565b9450611a02565b949350505050565b60608115611a995750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b805160609080156111845760008167ffffffffffffffff811115611af857611af86121ea565b604051908082528060200260200182016040528015611b2b57816020015b6060815260200190600190039081611b165790505b50905060005b8281101561118057336001600160a01b0316638f88b767868381518110611b5a57611b5a6129b2565b60200260200101516040518263ffffffff1660e01b8152600401611b8091815260200190565b600060405180830381865afa158015611b9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bc591908101906129c8565b828281518110611bd757611bd76129b2565b60200260200101819052508080611bed906129fd565b915050611b31565b80516060908160005b82811015611180576000858281518110611c1a57611c1a6129b2565b6020026020010151604051602001611c329190613047565b60405160208183030381529060405290508251600003611c5457809250611c79565b8281604051602001611c67929190613075565b60405160208183030381529060405292505b5080611c84816129fd565b915050611bfe565b6060848484611c9c851515611a71565b60405160200161127b94939291906130b1565b6060848461125d856120d3565b805160609080156111845760008167ffffffffffffffff811115611ce257611ce26121ea565b604051908082528060200260200182016040528015611d1557816020015b6060815260200190600190039081611d005790505b50905060005b8281101561118057336001600160a01b031663d52fd095868381518110611d4457611d446129b2565b60200260200101516040518263ffffffff1660e01b8152600401611d6a91815260200190565b600060405180830381865afa158015611d87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611daf91908101906129c8565b828281518110611dc157611dc16129b2565b60200260200101819052508080611dd7906129fd565b915050611d1b565b60606000611dee836002612e07565b611df9906002612dca565b67ffffffffffffffff811115611e1157611e116121ea565b6040519080825280601f01601f191660200182016040528015611e3b576020820181803683370190505b509050600360fc1b81600081518110611e5657611e566129b2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e8557611e856129b2565b60200101906001600160f81b031916908160001a9053506000611ea9846002612e07565b611eb4906001612dca565b90505b6001811115611f39577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ef557611ef56129b2565b1a60f81b828281518110611f0b57611f0b6129b2565b60200101906001600160f81b031916908160001a90535060049490941c93611f328161319f565b9050611eb7565b5083156117915760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103f4565b611f9181611867565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103f4565b600080846001600160a01b03168460405161206291906131b6565b600060405180830381855af49150503d806000811461209d576040519150601f19603f3d011682016040523d82523d6000602084013e6120a2565b606091505b50915091506120ca82826040518060600160405280602781526020016133046027913961210c565b95945050505050565b60606120f08260005b602002015167ffffffffffffffff16611968565b6120fb8360016120dc565b6040516020016115319291906131d2565b6060831561211b575081611791565b82511561212b5782518084602001fd5b8160405162461bcd60e51b81526004016103f49190612366565b60006020828403121561215757600080fd5b81356001600160e01b03198116811461179157600080fd5b60006020828403121561218157600080fd5b5035919050565b6001600160a01b038116811461058357600080fd5b600080604083850312156121b057600080fd5b8235915060208301356121c281612188565b809150509250929050565b6000602082840312156121df57600080fd5b813561179181612188565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715612224576122246121ea565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612253576122536121ea565b604052919050565b600067ffffffffffffffff821115612275576122756121ea565b50601f01601f191660200190565b6000806040838503121561229657600080fd5b82356122a181612188565b9150602083013567ffffffffffffffff8111156122bd57600080fd5b8301601f810185136122ce57600080fd5b80356122e16122dc8261225b565b61222a565b8181528660208385010111156122f657600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b83811015612331578181015183820152602001612319565b50506000910152565b60008151808452612352816020860160208601612316565b601f01601f19169290920160200192915050565b602081526000611791602083018461233a565b6000806040838503121561238c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b61ffff8181168382160190808211156123cc576123cc61239b565b5092915050565b600082601f8301126123e457600080fd5b6040516040810167ffffffffffffffff8282108183111715612408576124086121ea565b6040918252829185018681111561241e57600080fd5b855b8181101561244757805183811681146124395760008081fd5b845260209384019301612420565b50929695505050505050565b600067ffffffffffffffff82111561246d5761246d6121ea565b5060051b60200190565b600082601f83011261248857600080fd5b815160206124986122dc83612453565b82815260059290921b840181019181810190868411156124b757600080fd5b8286015b848110156124d257805183529183019183016124bb565b509695505050505050565b600082601f8301126124ee57600080fd5b815160206124fe6122dc83612453565b82815260059290921b8401810191818101908684111561251d57600080fd5b8286015b848110156124d257805161253481612188565b8352918301918301612521565b805161ffff8116811461255357600080fd5b919050565b8051801515811461255357600080fd5b600082601f83011261257957600080fd5b81516125876122dc8261225b565b81815284602083860101111561259c57600080fd5b611a69826020830160208701612316565b6000602082840312156125bf57600080fd5b815167ffffffffffffffff808211156125d757600080fd5b908301906101e082860312156125ec57600080fd5b6125f4612200565b8251815261260586602085016123d3565b602082015261261786606085016123d3565b604082015260a08301518281111561262e57600080fd5b61263a87828601612477565b60608301525060c08301518281111561265257600080fd5b61265e87828601612477565b60808301525060e08301518281111561267657600080fd5b61268287828601612477565b60a083015250610100808401518381111561269c57600080fd5b6126a8888287016124dd565b60c0840152506101208085015160e08401526101406126c8818701612541565b8385015261016092506126dc838701612558565b82850152610180915081860151858111156126f657600080fd5b6127028a828901612568565b8286015250506101a08501518481111561271b57600080fd5b61272789828801612568565b83850152506101c085015191508382111561274157600080fd5b61274d88838701612568565b908301525095945050505050565b6000815161276d818560208601612316565b9290920192915050565b7f22746f74616c556e697473223a000000000000000000000000000000000000008152600082516127af81600d850160208701612316565b600b60fa1b600d939091019283015250600e01919050565b683d913730b6b2911d1160b91b8152600087516127eb816009850160208c01612316565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152875161281c81601a840160208c01612316565b7f222c22696d616765223a22000000000000000000000000000000000000000000601a9290910191820152865161285a816025840160208b01612316565b7f222c2265787465726e616c5f75726c223a220000000000000000000000000000602592909101918201528551612898816037840160208a01612316565b7f222c2270726f70657274696573223a7b000000000000000000000000000000006037929091019182015284516128d6816047840160208901612316565b6128f66128e86047838501018761275b565b617d7d60f01b815260020190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161293c81601d850160208701612316565b91909101601d0192915050565b60006020828403121561295b57600080fd5b5051919050565b7f226672616374696f6e223a00000000000000000000000000000000000000000081526000825161299a81600b850160208701612316565b600b60fa1b600b939091019283015250600c01919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156129da57600080fd5b815167ffffffffffffffff8111156129f157600080fd5b611a6984828501612568565b600060018201612a0f57612a0f61239b565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015612a5e578284038952612a4c84835161233a565b98850198935090840190600101612a34565b5091979650505050505050565b8060005b600281101561196257815167ffffffffffffffff16845260209384019390910190600101612a6f565b60e081526000612aab60e083018861233a565b8281036020840152612abd8188612a16565b915050612acd6040830186612a6b565b612ada6080830185612a6b565b8260c08301529695505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251612b2281601a850160208701612316565b91909101601a0192915050565b683d913730b6b2911d1160b91b815260008551612b53816009850160208a01612316565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528551612b8481601a840160208a01612316565b691116113b30b63ab2911d60b11b601a92909101918201528451612baf816024840160208901612316565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000602492909101918201528351612bed816035840160208801612316565b61227d60f01b603592909101918201526037019695505050505050565b7f2273636f7065734f66576f726b223a0000000000000000000000000000000000815260008251612c4281600f850160208701612316565b600b60fa1b600f939091019283015250601001919050565b7f2273636f7065734f66496d70616374223a000000000000000000000000000000815260008251612c92816011850160208701612316565b600b60fa1b6011939091019283015250601201919050565b7f2274696d654f66576f726b223a000000000000000000000000000000000000008152600082516127af81600d850160208701612316565b7f2274696d654f66496d70616374223a0000000000000000000000000000000000815260008251612c4281600f850160208701612316565b7f22726967687473223a0000000000000000000000000000000000000000000000815260008251612d52816009850160208701612316565b9190910160090192915050565b60008651612d71818460208b01612316565b865190830190612d85818360208b01612316565b8651910190612d98818360208a01612316565b8551910190612dab818360208901612316565b8451910190612dbe818360208801612316565b01979650505050505050565b8082018082111561034a5761034a61239b565b634e487b7160e01b600052601260045260246000fd5b600082612e0257612e02612ddd565b500490565b6000816000190483118215151615612e2157612e2161239b565b500290565b6000610100808352612e3a8184018a61233a565b90508281036020840152612e4e8189612a16565b915050612e5e6040830187612a6b565b612e6b6080830186612a6b565b60c082019390935260e00152949350505050565b683d913730b6b2911d1160b91b815260008651612ea3816009850160208b01612316565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528651612ed481601a840160208b01612316565b691116113b30b63ab2911d60b11b601a92909101918201528551612eff816024840160208a01612316565b7f2c226d61785f76616c7565223a00000000000000000000000000000000000000602492909101918201528451612f3d816031840160208901612316565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000603192909101918201528351612f7b816042840160208801612316565b612f9260428284010161227d60f01b815260020190565b9998505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fd7816017850160208801612316565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613014816028840160208801612316565b01602801949350505050565b8181038181111561034a5761034a61239b565b60008261304257613042612ddd565b500690565b6000601160f91b8083528351613064816001860160208801612316565b600193019283015250600201919050565b60008351613087818460208801612316565b600b60fa1b90830190815283516130a5816001840160208801612316565b01600101949350505050565b683d913730b6b2911d1160b91b8152600085516130d5816009850160208a01612316565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161310681601a840160208a01612316565b7f222c2276616c7565223a5b000000000000000000000000000000000000000000601a92909101918201528451613144816025840160208901612316565b7f5d2c2269735f696e7472696e736963223a220000000000000000000000000000602592909101918201528351613182816037840160208801612316565b61227d60f01b603792909101918201526039019695505050505050565b6000816131ae576131ae61239b565b506000190190565b600082516131c8818460208701612316565b9190910192915050565b612d9160f11b815282516000906131f0816002850160208801612316565b6211161160e91b6002918401918201528351613213816005840160208801612316565b61225d60f01b6005929091019182015260070194935050505056fe54696d656672616d6520696e20776869636820696d70616374206973207265616c697a656453636f706573206f6620776f726b20656e63617073756c6174656420696e207468697320687970657263657274206672616374696f6e2e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f53636f706573206f6620696d7061637420656e63617073756c6174656420696e207468697320687970657263657274206672616374696f6e2e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564526967687473206173736f6369617465642077697468206f776e696e67207468652068797065726365727420286672616374696f6e732954696d656672616d6520696e20776869636820776f726b20746f206163686965766520696d7061637420686173206265656e20706572666f726d6564a164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806354fd4d501161008a578063c4d66de811610059578063c4d66de8146102ab578063d547741f146102cb578063ed03f41a146102eb578063f72c0d8b1461030b57600080fd5b806354fd4d501461020a57806391383c891461022357806391d1485414610250578063a217fddf1461029657600080fd5b80633659cfe6116100c65780633659cfe6146101ad57806348c02dc1146101cd5780634f1ef286146101e257806352d1902d146101f557600080fd5b806301ffc9a7146100f8578063248a9ca31461012d5780632f2ff15d1461016b57806336568abe1461018d575b600080fd5b34801561010457600080fd5b50610118610113366004612145565b61033f565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061015d61014836600461216f565b60009081526065602052604090206001015490565b604051908152602001610124565b34801561017757600080fd5b5061018b61018636600461219d565b610350565b005b34801561019957600080fd5b5061018b6101a836600461219d565b61037a565b3480156101b957600080fd5b5061018b6101c83660046121cd565b61040b565b3480156101d957600080fd5b5061018b610586565b61018b6101f0366004612283565b6105e7565b34801561020157600080fd5b5061015d61074f565b34801561021657600080fd5b5060fb5461ffff1661015d565b34801561022f57600080fd5b5061024361023e36600461216f565b610814565b6040516101249190612366565b34801561025c57600080fd5b5061011861026b36600461219d565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156102a257600080fd5b5061015d600081565b3480156102b757600080fd5b5061018b6102c63660046121cd565b6109a4565b3480156102d757600080fd5b5061018b6102e636600461219d565b610b39565b3480156102f757600080fd5b50610243610306366004612379565b610b5e565b34801561031757600080fd5b5061015d7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b600061034a82610d2f565b92915050565b60008281526065602052604090206001015461036b81610d64565b6103758383610d6e565b505050565b6001600160a01b03811633146103fd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104078282610e10565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104985760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016103f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104f37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461055e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016103f4565b61056781610e93565b6040805160008082526020820190925261058391839190610ebd565b50565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36105b081610d64565b60fb8054600191906000906105ca90849061ffff166123b1565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106745760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016103f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106cf7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461073a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016103f4565b61074382610e93565b61040782826001610ebd565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107ef5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103f4565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa158015610856573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087e91908101906125ad565b9050600061088f826080015161105d565b905061097c8261014001518361016001516108aa858561118a565b85610180015161092b6040518060400160405280600b81526020017f546f74616c20756e6974730000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e0000000000000000008152508960e001516000611250565b60405160200161093b9190612777565b60405160208183030381529060405261095388611294565b604051602001610968969594939291906127c7565b604051602081830303815290604052611547565b60405160200161098c9190612904565b60405160208183030381529060405292505050919050565b600054610100900460ff16158080156109c45750600054600160ff909116105b806109de5750303b1580156109de575060005460ff166001145b610a505760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103f4565b6000805460ff191660011790558015610a73576000805461ff0019166101001790555b60fb80547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b03851602179055610ab361169a565b610abb61169a565b610ac6600033610d6e565b610af07f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333610d6e565b8015610407576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600082815260656020526040902060010154610b5481610d64565b6103758383610e10565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bc891908101906125ad565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190612949565b90506000610c3f836080015161105d565b9050610d05836101400151846101600151610c5b868686611719565b866101800151610cdd6040518060400160405280600881526020017f4672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e000000000000000000815250898b60e001516000611798565b604051602001610ced9190612962565b60405160208183030381529060405261095389611294565b604051602001610d159190612904565b604051602081830303815290604052935050505092915050565b60006001600160e01b03198216637965db0b60e01b148061034a57506301ffc9a760e01b6001600160e01b031983161461034a565b61058381336117e7565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166104075760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dcc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156104075760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361040781610d64565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610ef05761037583611867565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610f4a575060408051601f3d908101601f19168201909252610f4791810190612949565b60015b610fbc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016103f4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146110515760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016103f4565b5061037583838361193d565b805160609080156111845760008167ffffffffffffffff811115611083576110836121ea565b6040519080825280602002602001820160405280156110b657816020015b60608152602001906001900390816110a15790505b50905060005b8281101561118057336001600160a01b031663ef6f66d78683815181106110e5576110e56129b2565b60200260200101516040518263ffffffff1660e01b815260040161110b91815260200190565b600060405180830381865afa158015611128573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115091908101906129c8565b828281518110611162576111626129b2565b60200260200101819052508080611178906129fd565b9150506110bc565b5091505b50919050565b60fb54610140830151602084015160408086015160e087015191516312945dd760e31b815260609561122995620100009091046001600160a01b0316946394a2eeb8946111df9492938a939190600401612a98565b600060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261122491908101906129c8565b611547565b6040516020016112399190612aea565b604051602081830303815290604052905092915050565b6060848461125d85611968565b611268851515611a71565b60405160200161127b9493929190612b2f565b6040516020818303038152906040529050949350505050565b60606113046040518060400160405280600e81526020017f53636f706573206f6620576f726b000000000000000000000000000000000000815250604051806060016040528060378152602001613254603791396112fd6112f88660600151611ad2565b611bf5565b6001611c8c565b6040516020016113149190612c0a565b6040516020818303038152906040526113856040518060400160405280601081526020017f53636f706573206f6620496d70616374000000000000000000000000000000008152506040518060600160405280603981526020016132cb603991396112fd6112f8876080015161105d565b6040516020016113959190612c5a565b6040516020818303038152906040526114026040518060400160405280601181526020017f54696d656672616d65206f6620776f726b0000000000000000000000000000008152506040518060600160405280603c8152602001613362603c913986602001516001611caf565b6040516020016114129190612caa565b60405160208183030381529060405261147f6040518060400160405280601381526020017f54696d656672616d65206f6620696d706163740000000000000000000000000081525060405180606001604052806025815260200161322f6025913987604001516001611caf565b60405160200161148f9190612ce2565b6040516020818303038152906040526115006040518060400160405280600681526020017f526967687473000000000000000000000000000000000000000000000000000081525060405180606001604052806037815260200161332b603791396112fd6112f88a60a00151611cbc565b6040516020016115109190612d1a565b60408051601f19818403018152908290526115319594939291602001612d5f565b6040516020818303038152906040529050919050565b6060815160000361156657505060408051602081019091526000815290565b600060405180606001604052806040815260200161328b60409139905060006003845160026115959190612dca565b61159f9190612df3565b6115aa906004612e07565b67ffffffffffffffff8111156115c2576115c26121ea565b6040519080825280601f01601f1916602001820160405280156115ec576020820181803683370190505b509050600182016020820185865187015b80821015611658576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506115fd565b505060038651066001811461167457600281146116875761168f565b603d6001830353603d600283035361168f565b603d60018303535b509195945050505050565b600054610100900460ff166117175760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103f4565b565b60fb54610140840151602085015160408087015160e08801519151634560ed3960e11b815260609561176f95620100009091046001600160a01b031694638ac1da72946111df9492938a93918c91600401612e26565b60405160200161177f9190612aea565b60405160208183030381529060405290505b9392505050565b606085856117a586611968565b6117ae86611968565b6117b9861515611a71565b6040516020016117cd959493929190612e7f565b604051602081830303815290604052905095945050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1661040757611825816001600160a01b03166014611ddf565b611830836020611ddf565b604051602001611841929190612f9f565b60408051601f198184030181529082905262461bcd60e51b82526103f491600401612366565b6001600160a01b0381163b6118e45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016103f4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61194683611f88565b6000825111806119535750805b15610375576119628383611fc8565b50505050565b60608160000361198f5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119b957806119a3816129fd565b91506119b29050600a83612df3565b9150611993565b60008167ffffffffffffffff8111156119d4576119d46121ea565b6040519080825280601f01601f1916602001820160405280156119fe576020820181803683370190505b5090505b8415611a6957611a13600183613020565b9150611a20600a86613033565b611a2b906030612dca565b60f81b818381518110611a4057611a406129b2565b60200101906001600160f81b031916908160001a905350611a62600a86612df3565b9450611a02565b949350505050565b60608115611a995750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b805160609080156111845760008167ffffffffffffffff811115611af857611af86121ea565b604051908082528060200260200182016040528015611b2b57816020015b6060815260200190600190039081611b165790505b50905060005b8281101561118057336001600160a01b0316638f88b767868381518110611b5a57611b5a6129b2565b60200260200101516040518263ffffffff1660e01b8152600401611b8091815260200190565b600060405180830381865afa158015611b9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bc591908101906129c8565b828281518110611bd757611bd76129b2565b60200260200101819052508080611bed906129fd565b915050611b31565b80516060908160005b82811015611180576000858281518110611c1a57611c1a6129b2565b6020026020010151604051602001611c329190613047565b60405160208183030381529060405290508251600003611c5457809250611c79565b8281604051602001611c67929190613075565b60405160208183030381529060405292505b5080611c84816129fd565b915050611bfe565b6060848484611c9c851515611a71565b60405160200161127b94939291906130b1565b6060848461125d856120d3565b805160609080156111845760008167ffffffffffffffff811115611ce257611ce26121ea565b604051908082528060200260200182016040528015611d1557816020015b6060815260200190600190039081611d005790505b50905060005b8281101561118057336001600160a01b031663d52fd095868381518110611d4457611d446129b2565b60200260200101516040518263ffffffff1660e01b8152600401611d6a91815260200190565b600060405180830381865afa158015611d87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611daf91908101906129c8565b828281518110611dc157611dc16129b2565b60200260200101819052508080611dd7906129fd565b915050611d1b565b60606000611dee836002612e07565b611df9906002612dca565b67ffffffffffffffff811115611e1157611e116121ea565b6040519080825280601f01601f191660200182016040528015611e3b576020820181803683370190505b509050600360fc1b81600081518110611e5657611e566129b2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e8557611e856129b2565b60200101906001600160f81b031916908160001a9053506000611ea9846002612e07565b611eb4906001612dca565b90505b6001811115611f39577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611ef557611ef56129b2565b1a60f81b828281518110611f0b57611f0b6129b2565b60200101906001600160f81b031916908160001a90535060049490941c93611f328161319f565b9050611eb7565b5083156117915760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103f4565b611f9181611867565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6120475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103f4565b600080846001600160a01b03168460405161206291906131b6565b600060405180830381855af49150503d806000811461209d576040519150601f19603f3d011682016040523d82523d6000602084013e6120a2565b606091505b50915091506120ca82826040518060600160405280602781526020016133046027913961210c565b95945050505050565b60606120f08260005b602002015167ffffffffffffffff16611968565b6120fb8360016120dc565b6040516020016115319291906131d2565b6060831561211b575081611791565b82511561212b5782518084602001fd5b8160405162461bcd60e51b81526004016103f49190612366565b60006020828403121561215757600080fd5b81356001600160e01b03198116811461179157600080fd5b60006020828403121561218157600080fd5b5035919050565b6001600160a01b038116811461058357600080fd5b600080604083850312156121b057600080fd5b8235915060208301356121c281612188565b809150509250929050565b6000602082840312156121df57600080fd5b813561179181612188565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715612224576122246121ea565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612253576122536121ea565b604052919050565b600067ffffffffffffffff821115612275576122756121ea565b50601f01601f191660200190565b6000806040838503121561229657600080fd5b82356122a181612188565b9150602083013567ffffffffffffffff8111156122bd57600080fd5b8301601f810185136122ce57600080fd5b80356122e16122dc8261225b565b61222a565b8181528660208385010111156122f657600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b83811015612331578181015183820152602001612319565b50506000910152565b60008151808452612352816020860160208601612316565b601f01601f19169290920160200192915050565b602081526000611791602083018461233a565b6000806040838503121561238c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b61ffff8181168382160190808211156123cc576123cc61239b565b5092915050565b600082601f8301126123e457600080fd5b6040516040810167ffffffffffffffff8282108183111715612408576124086121ea565b6040918252829185018681111561241e57600080fd5b855b8181101561244757805183811681146124395760008081fd5b845260209384019301612420565b50929695505050505050565b600067ffffffffffffffff82111561246d5761246d6121ea565b5060051b60200190565b600082601f83011261248857600080fd5b815160206124986122dc83612453565b82815260059290921b840181019181810190868411156124b757600080fd5b8286015b848110156124d257805183529183019183016124bb565b509695505050505050565b600082601f8301126124ee57600080fd5b815160206124fe6122dc83612453565b82815260059290921b8401810191818101908684111561251d57600080fd5b8286015b848110156124d257805161253481612188565b8352918301918301612521565b805161ffff8116811461255357600080fd5b919050565b8051801515811461255357600080fd5b600082601f83011261257957600080fd5b81516125876122dc8261225b565b81815284602083860101111561259c57600080fd5b611a69826020830160208701612316565b6000602082840312156125bf57600080fd5b815167ffffffffffffffff808211156125d757600080fd5b908301906101e082860312156125ec57600080fd5b6125f4612200565b8251815261260586602085016123d3565b602082015261261786606085016123d3565b604082015260a08301518281111561262e57600080fd5b61263a87828601612477565b60608301525060c08301518281111561265257600080fd5b61265e87828601612477565b60808301525060e08301518281111561267657600080fd5b61268287828601612477565b60a083015250610100808401518381111561269c57600080fd5b6126a8888287016124dd565b60c0840152506101208085015160e08401526101406126c8818701612541565b8385015261016092506126dc838701612558565b82850152610180915081860151858111156126f657600080fd5b6127028a828901612568565b8286015250506101a08501518481111561271b57600080fd5b61272789828801612568565b83850152506101c085015191508382111561274157600080fd5b61274d88838701612568565b908301525095945050505050565b6000815161276d818560208601612316565b9290920192915050565b7f22746f74616c556e697473223a000000000000000000000000000000000000008152600082516127af81600d850160208701612316565b600b60fa1b600d939091019283015250600e01919050565b683d913730b6b2911d1160b91b8152600087516127eb816009850160208c01612316565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152875161281c81601a840160208c01612316565b7f222c22696d616765223a22000000000000000000000000000000000000000000601a9290910191820152865161285a816025840160208b01612316565b7f222c2265787465726e616c5f75726c223a220000000000000000000000000000602592909101918201528551612898816037840160208a01612316565b7f222c2270726f70657274696573223a7b000000000000000000000000000000006037929091019182015284516128d6816047840160208901612316565b6128f66128e86047838501018761275b565b617d7d60f01b815260020190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161293c81601d850160208701612316565b91909101601d0192915050565b60006020828403121561295b57600080fd5b5051919050565b7f226672616374696f6e223a00000000000000000000000000000000000000000081526000825161299a81600b850160208701612316565b600b60fa1b600b939091019283015250600c01919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156129da57600080fd5b815167ffffffffffffffff8111156129f157600080fd5b611a6984828501612568565b600060018201612a0f57612a0f61239b565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015612a5e578284038952612a4c84835161233a565b98850198935090840190600101612a34565b5091979650505050505050565b8060005b600281101561196257815167ffffffffffffffff16845260209384019390910190600101612a6f565b60e081526000612aab60e083018861233a565b8281036020840152612abd8188612a16565b915050612acd6040830186612a6b565b612ada6080830185612a6b565b8260c08301529695505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251612b2281601a850160208701612316565b91909101601a0192915050565b683d913730b6b2911d1160b91b815260008551612b53816009850160208a01612316565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528551612b8481601a840160208a01612316565b691116113b30b63ab2911d60b11b601a92909101918201528451612baf816024840160208901612316565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000602492909101918201528351612bed816035840160208801612316565b61227d60f01b603592909101918201526037019695505050505050565b7f2273636f7065734f66576f726b223a0000000000000000000000000000000000815260008251612c4281600f850160208701612316565b600b60fa1b600f939091019283015250601001919050565b7f2273636f7065734f66496d70616374223a000000000000000000000000000000815260008251612c92816011850160208701612316565b600b60fa1b6011939091019283015250601201919050565b7f2274696d654f66576f726b223a000000000000000000000000000000000000008152600082516127af81600d850160208701612316565b7f2274696d654f66496d70616374223a0000000000000000000000000000000000815260008251612c4281600f850160208701612316565b7f22726967687473223a0000000000000000000000000000000000000000000000815260008251612d52816009850160208701612316565b9190910160090192915050565b60008651612d71818460208b01612316565b865190830190612d85818360208b01612316565b8651910190612d98818360208a01612316565b8551910190612dab818360208901612316565b8451910190612dbe818360208801612316565b01979650505050505050565b8082018082111561034a5761034a61239b565b634e487b7160e01b600052601260045260246000fd5b600082612e0257612e02612ddd565b500490565b6000816000190483118215151615612e2157612e2161239b565b500290565b6000610100808352612e3a8184018a61233a565b90508281036020840152612e4e8189612a16565b915050612e5e6040830187612a6b565b612e6b6080830186612a6b565b60c082019390935260e00152949350505050565b683d913730b6b2911d1160b91b815260008651612ea3816009850160208b01612316565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528651612ed481601a840160208b01612316565b691116113b30b63ab2911d60b11b601a92909101918201528551612eff816024840160208a01612316565b7f2c226d61785f76616c7565223a00000000000000000000000000000000000000602492909101918201528451612f3d816031840160208901612316565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000603192909101918201528351612f7b816042840160208801612316565b612f9260428284010161227d60f01b815260020190565b9998505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fd7816017850160208801612316565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613014816028840160208801612316565b01602801949350505050565b8181038181111561034a5761034a61239b565b60008261304257613042612ddd565b500690565b6000601160f91b8083528351613064816001860160208801612316565b600193019283015250600201919050565b60008351613087818460208801612316565b600b60fa1b90830190815283516130a5816001840160208801612316565b01600101949350505050565b683d913730b6b2911d1160b91b8152600085516130d5816009850160208a01612316565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161310681601a840160208a01612316565b7f222c2276616c7565223a5b000000000000000000000000000000000000000000601a92909101918201528451613144816025840160208901612316565b7f5d2c2269735f696e7472696e736963223a220000000000000000000000000000602592909101918201528351613182816037840160208801612316565b61227d60f01b603792909101918201526039019695505050505050565b6000816131ae576131ae61239b565b506000190190565b600082516131c8818460208701612316565b9190910192915050565b612d9160f11b815282516000906131f0816002850160208801612316565b6211161160e91b6002918401918201528351613213816005840160208801612316565b61225d60f01b6005929091019182015260070194935050505056fe54696d656672616d6520696e20776869636820696d70616374206973207265616c697a656453636f706573206f6620776f726b20656e63617073756c6174656420696e207468697320687970657263657274206672616374696f6e2e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f53636f706573206f6620696d7061637420656e63617073756c6174656420696e207468697320687970657263657274206672616374696f6e2e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564526967687473206173736f6369617465642077697468206f776e696e67207468652068797065726365727420286672616374696f6e732954696d656672616d6520696e20776869636820776f726b20746f206163686965766520696d7061637420686173206265656e20706572666f726d6564a164736f6c6343000810000a",
  "devdoc": {
    "details": "Hypercertificate metadata creation logic",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Id of the interface"
        },
        "returns": {
          "_0": "true, if the interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "UPGRADER_ROLE()": {
        "notice": "User role required in order to upgrade the contract"
      },
      "constructor": {
        "notice": "Contract constructor logic"
      },
      "initialize(address)": {
        "notice": "Contract initialization logic"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns a flag indicating if the contract supports the specified interface"
      },
      "updateVersion()": {
        "notice": "Update the contract version numberOnly allowed for member of UPGRADER_ROLE"
      },
      "version()": {
        "notice": "gets the current version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1419,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1749,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1924,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "_version",
        "offset": 0,
        "slot": "251",
        "type": "t_uint16"
      },
      {
        "astId": 1926,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "svgGenerator",
        "offset": 2,
        "slot": "251",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}