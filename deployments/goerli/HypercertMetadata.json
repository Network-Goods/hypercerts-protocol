{
  "address": "0xa5a306b95B36d17C6711679b0E9758632083B8B0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgGenerationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "generateSlotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xff3864ae4b2d37ad49e3d52acfc7566663e3a2c767fc92b5fa1183ebd62c4650",
  "receipt": {
    "to": null,
    "from": "0x23314160c752D6Bb544661DcE13d01C21c64331E",
    "contractAddress": "0xa5a306b95B36d17C6711679b0E9758632083B8B0",
    "transactionIndex": 80,
    "gasUsed": "1768726",
    "logsBloom": "0x
    "blockHash": "0xccec8d4a728e3e27e72285ce6702b2820a07930b6a58007959b4e8970dea4a7b",
    "transactionHash": "0xff3864ae4b2d37ad49e3d52acfc7566663e3a2c767fc92b5fa1183ebd62c4650",
    "logs": [],
    "blockNumber": 7711703,
    "cumulativeGasUsed": "23467120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9CD838ba5ce219d1Eaf58Fa413b9D6e74799A7c8"
  ],
  "numDeployments": 1,
  "solcInputHash": "c474e3563a205236df188a1daf52a2fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgGenerationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"generateSlotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hypercertificate metadata creation logic\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HypercertMetadata.sol\":\"HypercertMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"contracts/HypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./interfaces/IHypercertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\\\";\\n\\ninterface IHypercertMinter {\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    function workScopes(bytes32 workScopeId) external view returns (string memory);\\n\\n    function impactScopes(bytes32 impactScopeId) external view returns (string memory);\\n\\n    function rights(bytes32 rightsId) external view returns (string memory);\\n\\n    function getImpactCert(uint256 claimID) external view returns (Claim memory);\\n\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface IHypercertSVG {\\n    function generateSvgHypercert(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n\\n    function generateSvgFraction(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n}\\n\\n/// @dev Hypercertificate metadata creation logic\\ncontract HypercertMetadata is IHypercertMetadata {\\n    using ArraysUpgradeable for uint64[2];\\n    using ArraysUpgradeable for uint256[];\\n    using ArraysUpgradeable for string[];\\n    using StringsExtensions for bool;\\n    using StringsUpgradeable for uint256;\\n\\n    address svgGenerator;\\n\\n    constructor(address svgGenerationAddress) {\\n        svgGenerator = svgGenerationAddress;\\n    }\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        uint256 units = IHypercertMinter(msg.sender).balanceOf(tokenId);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringFraction(claim, units),\\n                            '\\\",\\\"properties\\\":{',\\n                            _slotProperties(claim),\\n                            \\\",\\\",\\n                            _tokenProperties(claim, units),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateSlotURI(uint256 slotId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringHypercert(claim),\\n                            '\\\",\\\"properties\\\":{',\\n                            _slotProperties(claim),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _slotProperties(IHypercertMinter.Claim memory claim) internal view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\n                        \\\"work_timeframe\\\",\\n                        \\\"The period during which the work relating to the claim was done.\\\",\\n                        claim.workTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapWorkscopeIdsToValues(claim.workScopes),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"impact_timeframe\\\",\\n                        \\\"The period during which the impact relating to the claim was made.\\\",\\n                        claim.impactTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapImpactScopesIdsToValues(claim.impactScopes),\\n                    \\\",\\\",\\n                    _mapRightsIdsToValues(claim.rights),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"total_units\\\",\\n                        \\\"Total units issued across all tokens with this slot.\\\",\\n                        claim.totalUnits,\\n                        false\\n                    ),\\n                    \\\",\\\",\\n                    _propertyString(\\\"external_link\\\", \\\"URI of additional data related to the claim.\\\", claim.uri, false)\\n                )\\n            );\\n    }\\n\\n    function _tokenProperties(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\\"units\\\", \\\"Units issued to this token.\\\", units, false),\\n                    \\\",\\\",\\n                    _propertyString(\\\"fraction\\\", \\\"Fraction issued to this token.\\\", units / claim.totalUnits, false)\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringFraction(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHypercertSVG(svgGenerator).generateSvgFraction(\\n                            claim.name,\\n                            claim.description,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            units,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringHypercert(IHypercertMinter.Claim memory claim) internal view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHypercertSVG(svgGenerator).generateSvgHypercert(\\n                            claim.name,\\n                            claim.description,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value_,\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        bytes32[] memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_,\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint64[2] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toString(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapWorkscopeIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).workScopes(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"work_scopes\\\",\\\"description\\\":\\\"The scopes of work of the claim.\\\",\\\"value\\\":[',\\n                    values.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapImpactScopesIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory vals;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHypercertMinter(msg.sender).impactScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"impact_scopes\\\",\\\"description\\\":\\\"The scopes of impact of the claim.\\\",\\\"value\\\":[',\\n                    vals.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapRightsIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).rights(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"rights\\\",\\\"description\\\":\\\"Rights associated with owning the hypercert (fractions)\\\",\\\"value\\\":[',\\n                    values.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb3ec977abd7cddd0f71d7f9d70846badce8adb18decac4c6203ea731240d2f73\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHypercertMetadata {\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x18aa67f24d4c44048b9bcc21832c01adc1d2fbb7e3dd55a4f9cd8484c2901436\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint8[] memory array) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"[\\\", uint256(array[0]).toString(), \\\",\\\", uint256(array[1]).toString(), \\\"]\\\"));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 1; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 1; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa0701fb1a572f6db2eb48e84ddc79b1d077cbc9de23c96344f3f4376c42c989b\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610ea8565b610077565b60405161005b9190610f11565b60405180910390f35b61004e610072366004610f2b565b610152565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e191908101906111c9565b905061012b8161014001518261016001516100fb8461028e565b6101048561036e565b6040516020016101179493929190611393565b604051602081830303815290604052610526565b60405160200161013b9190611462565b604051602081830303815290604052915050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa158015610194573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101bc91908101906111c9565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022291906114a7565b905061026482610140015183610160015161023d8585610679565b6102468661036e565b61025087876106f8565b6040516020016101179594939291906114c0565b6040516020016102749190611462565b604051602081830303815290604052925050505b92915050565b600054610140820151610160830151602084015160408086015160e087015191517fffb38c12000000000000000000000000000000000000000000000000000000008152606096610348966001600160a01b039091169563ffb38c12956102fe95929491939092906004016115eb565b600060405180830381865afa15801561031b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610343919081019061163d565b610526565b6040516020016103589190611672565b6040516020818303038152906040529050919050565b60606103ce6040518060400160405280600e81526020017f776f726b5f74696d656672616d65000000000000000000000000000000000000815250604051806060016040528060408152602001611e5a6040913984602001516001610808565b6103db836060015161084c565b6104396040518060400160405280601081526020017f696d706163745f74696d656672616d6500000000000000000000000000000000815250604051806080016040528060428152602001611e186042913986604001516001610808565b610446856080015161099b565b6104538660a00151610adc565b6104b16040518060400160405280600b81526020017f746f74616c5f756e697473000000000000000000000000000000000000000000815250604051806060016040528060348152602001611d78603491398960e001516000610c13565b6105106040518060400160405280600d81526020017f65787465726e616c5f6c696e6b000000000000000000000000000000000000008152506040518060600160405280602c8152602001611dac602c91398a61018001516000610c3e565b60405160200161035897969594939291906116b7565b6060815160000361054557505060408051602081019091526000815290565b6000604051806060016040528060408152602001611dd86040913990506000600384516002610574919061179c565b61057e91906117c5565b6105899060046117d9565b67ffffffffffffffff8111156105a1576105a1610f4d565b6040519080825280601f01601f1916602001820160405280156105cb576020820181803683370190505b509050600182016020820185865187015b80821015610637576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506105dc565b505060038651066001811461065357600281146106665761066e565b603d6001830353603d600283035361066e565b603d60018303535b509195945050505050565b600054610140830151610160840151602085015160408087015160e0880151915163614a5c8160e01b81526060966106d1966001600160a01b039091169563614a5c81956102fe959294919390928b916004016117f8565b6040516020016106e19190611672565b604051602081830303815290604052905092915050565b60606107716040518060400160405280600581526020017f756e6974730000000000000000000000000000000000000000000000000000008152506040518060400160405280601b81526020017f556e6974732069737375656420746f207468697320746f6b656e2e0000000000815250846000610c13565b6107f76040518060400160405280600881526020017f6672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601e81526020017f4672616374696f6e2069737375656420746f207468697320746f6b656e2e00008152508660e00151866107f091906117c5565b6000610c13565b6040516020016106e1929190611851565b6060848461081585610c4e565b610820851515610c87565b604051602001610833949392919061188d565b6040516020818303038152906040529050949350505050565b805160609060008167ffffffffffffffff81111561086c5761086c610f4d565b60405190808252806020026020018201604052801561089f57816020015b606081526020019060019003908161088a5790505b50905060005b8281101561096957336001600160a01b0316638f88b7678683815181106108ce576108ce61197b565b60200260200101516040518263ffffffff1660e01b81526004016108f491815260200190565b600060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610939919081019061163d565b82828151811061094b5761094b61197b565b6020026020010181905250808061096190611991565b9150506108a5565b5061097381610ce8565b60405160200161098391906119aa565b60405160208183030381529060405292505050919050565b8051606090818115610ac35760008267ffffffffffffffff8111156109c2576109c2610f4d565b6040519080825280602002602001820160405280156109f557816020015b60608152602001906001900390816109e05790505b50905060005b83811015610abf57336001600160a01b031663ef6f66d7878381518110610a2457610a2461197b565b60200260200101516040518263ffffffff1660e01b8152600401610a4a91815260200190565b600060405180830381865afa158015610a67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a8f919081019061163d565b828281518110610aa157610aa161197b565b60200260200101819052508080610ab790611991565b9150506109fb565b5090505b610acc81610ce8565b6040516020016109839190611a62565b805160609060008167ffffffffffffffff811115610afc57610afc610f4d565b604051908082528060200260200182016040528015610b2f57816020015b6060815260200190600190039081610b1a5790505b50905060005b82811015610bf957336001600160a01b031663d52fd095868381518110610b5e57610b5e61197b565b60200260200101516040518263ffffffff1660e01b8152600401610b8491815260200190565b600060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bc9919081019061163d565b828281518110610bdb57610bdb61197b565b60200260200101819052508080610bf190611991565b915050610b35565b50610c0381610ce8565b6040516020016109839190611b1a565b60608484610c2085610d87565b610c2b851515610c87565b6040516020016108339493929190611bdd565b6060848484610820851515610c87565b6060610c6b8260005b602002015167ffffffffffffffff16610d87565b610c76836001610c57565b604051602001610358929190611ccb565b60608115610caf5750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b80516060908160015b82811015610d7f576000858281518110610d0d57610d0d61197b565b6020026020010151604051602001610d259190611d22565b60405160208183030381529060405290508251600003610d4757809250610d6c565b8281604051602001610d5a929190611851565b60405160208183030381529060405292505b5080610d7781611991565b915050610cf1565b509392505050565b606081600003610dae5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610dd85780610dc281611991565b9150610dd19050600a836117c5565b9150610db2565b60008167ffffffffffffffff811115610df357610df3610f4d565b6040519080825280601f01601f191660200182016040528015610e1d576020820181803683370190505b5090505b8415610ea057610e32600183611d50565b9150610e3f600a86611d63565b610e4a90603061179c565b60f81b818381518110610e5f57610e5f61197b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610e99600a866117c5565b9450610e21565b949350505050565b600060208284031215610eba57600080fd5b5035919050565b60005b83811015610edc578181015183820152602001610ec4565b50506000910152565b60008151808452610efd816020860160208601610ec1565b601f01601f19169290920160200192915050565b602081526000610f246020830184610ee5565b9392505050565b60008060408385031215610f3e57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610f8757610f87610f4d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fb657610fb6610f4d565b604052919050565b600082601f830112610fcf57600080fd5b6040516040810167ffffffffffffffff8282108183111715610ff357610ff3610f4d565b6040918252829185018681111561100957600080fd5b855b8181101561103257805183811681146110245760008081fd5b84526020938401930161100b565b50929695505050505050565b600067ffffffffffffffff82111561105857611058610f4d565b5060051b60200190565b600082601f83011261107357600080fd5b815160206110886110838361103e565b610f8d565b82815260059290921b840181019181810190868411156110a757600080fd5b8286015b848110156110c257805183529183019183016110ab565b509695505050505050565b600082601f8301126110de57600080fd5b815160206110ee6110838361103e565b82815260059290921b8401810191818101908684111561110d57600080fd5b8286015b848110156110c25780516001600160a01b03811681146111315760008081fd5b8352918301918301611111565b805161ffff8116811461115057600080fd5b919050565b8051801515811461115057600080fd5b600082601f83011261117657600080fd5b815167ffffffffffffffff81111561119057611190610f4d565b6111a3601f8201601f1916602001610f8d565b8181528460208386010111156111b857600080fd5b610ea0826020830160208701610ec1565b6000602082840312156111db57600080fd5b815167ffffffffffffffff808211156111f357600080fd5b908301906101e0828603121561120857600080fd5b611210610f63565b825181526112218660208501610fbe565b60208201526112338660608501610fbe565b604082015260a08301518281111561124a57600080fd5b61125687828601611062565b60608301525060c08301518281111561126e57600080fd5b61127a87828601611062565b60808301525060e08301518281111561129257600080fd5b61129e87828601611062565b60a08301525061010080840151838111156112b857600080fd5b6112c4888287016110cd565b60c0840152506101208085015160e08401526101406112e481870161113e565b8385015261016092506112f8838701611155565b828501526101809150818601518581111561131257600080fd5b61131e8a828901611165565b8286015250506101a08501518481111561133757600080fd5b61134389828801611165565b83850152506101c085015191508382111561135d57600080fd5b61136988838701611165565b908301525095945050505050565b60008151611389818560208601610ec1565b9290920192915050565b683d913730b6b2911d1160b91b8152600085516113b7816009850160208a01610ec1565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516113e881601a840160208a01610ec1565b6a11161134b6b0b3b2911d1160a91b601a92909101918201528451611414816025840160208901610ec1565b6f222c2270726f70657274696573223a7b60801b602592909101918201528351611445816035840160208801610ec1565b617d7d60f01b603592909101918201526037019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161149a81601d850160208701610ec1565b91909101601d0192915050565b6000602082840312156114b957600080fd5b5051919050565b683d913730b6b2911d1160b91b8152600086516114e4816009850160208b01610ec1565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152865161151581601a840160208b01610ec1565b6a11161134b6b0b3b2911d1160a91b601a92909101918201528551611541816025840160208a01610ec1565b6f222c2270726f70657274696573223a7b60801b602592909101918201528451611572816035840160208901610ec1565b600b60fa1b603592909101918201528351611594816036840160208801610ec1565b6115ab603682840101617d7d60f01b815260020190565b9998505050505050505050565b8060005b60028110156115e557815167ffffffffffffffff168452602093840193909101906001016115bc565b50505050565b60e0815260006115fe60e0830188610ee5565b82810360208401526116108188610ee5565b91505061162060408301866115b8565b61162d60808301856115b8565b8260c08301529695505050505050565b60006020828403121561164f57600080fd5b815167ffffffffffffffff81111561166657600080fd5b610ea084828501611165565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516116aa81601a850160208701610ec1565b91909101601a0192915050565b6000885160206116ca8285838e01610ec1565b8184019150600b60fa1b8083528a516116e98160018601858f01610ec1565b6001930192830181905289516117058160028601858e01610ec1565b6002930192830181905288516117218160038601858d01610ec1565b60039301928301819052875161173d8160048601858c01610ec1565b600493019283015285516117578160058501848a01610ec1565b611776611770600583860101600b60fa1b815260010190565b87611377565b9c9b505050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561028857610288611786565b634e487b7160e01b600052601260045260246000fd5b6000826117d4576117d46117af565b500490565b60008160001904831182151516156117f3576117f3611786565b500290565b600061010080835261180c8184018a610ee5565b905082810360208401526118208189610ee5565b91505061183060408301876115b8565b61183d60808301866115b8565b60c082019390935260e00152949350505050565b60008351611863818460208801610ec1565b600b60fa1b9083019081528351611881816001840160208801610ec1565b01600101949350505050565b683d913730b6b2911d1160b91b8152600085516118b1816009850160208a01610ec1565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516118e281601a840160208a01610ec1565b7f222c2276616c7565223a22000000000000000000000000000000000000000000601a92909101918201528451611920816025840160208901610ec1565b7f222c2269735f696e7472696e736963223a22000000000000000000000000000060259290910191820152835161195e816037840160208801610ec1565b61227d60f01b603792909101918201526039019695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016119a3576119a3611786565b5060010190565b7f7b226e616d65223a22776f726b5f73636f706573222c2264657363726970746981527f6f6e223a225468652073636f706573206f6620776f726b206f6620746865206360208201527f6c61696d2e222c2276616c7565223a5b00000000000000000000000000000000604082015260008251611a2e816050850160208701610ec1565b7f5d2c2269735f696e7472696e736963223a2274727565227d00000000000000006050939091019283015250606801919050565b7f7b226e616d65223a22696d706163745f73636f706573222c226465736372697081527f74696f6e223a225468652073636f706573206f6620696d70616374206f66207460208201527f686520636c61696d2e222c2276616c7565223a5b000000000000000000000000604082015260008251611ae6816054850160208701610ec1565b7f5d2c2269735f696e7472696e736963223a2274727565227d00000000000000006054939091019283015250606c01919050565b7f7b226e616d65223a22726967687473222c226465736372697074696f6e223a2281527f526967687473206173736f6369617465642077697468206f776e696e6720746860208201527f652068797065726365727420286672616374696f6e7329222c2276616c7565226040820152613a5b60f01b606082015260008251611ba9816062850160208701610ec1565b7f5d2c2269735f696e7472696e736963223a2274727565227d00000000000000006062939091019283015250607a01919050565b683d913730b6b2911d1160b91b815260008551611c01816009850160208a01610ec1565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528551611c3281601a840160208a01610ec1565b7f222c2276616c7565223a00000000000000000000000000000000000000000000601a92909101918201528451611c70816024840160208901610ec1565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000602492909101918201528351611cae816035840160208801610ec1565b61227d60f01b603592909101918201526037019695505050505050565b605b60f81b815260008351611ce7816001850160208801610ec1565b600b60fa1b6001918401918201528351611d08816002840160208801610ec1565b605d60f81b60029290910191820152600301949350505050565b6000601160f91b8083528351611d3f816001860160208801610ec1565b600193019283015250600201919050565b8181038181111561028857610288611786565b600082611d7257611d726117af565b50069056fe546f74616c20756e69747320697373756564206163726f737320616c6c20746f6b656e732077697468207468697320736c6f742e555249206f66206164646974696f6e616c20646174612072656c6174656420746f2074686520636c61696d2e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f54686520706572696f6420647572696e672077686963682074686520696d706163742072656c6174696e6720746f2074686520636c61696d20776173206d6164652e54686520706572696f6420647572696e672077686963682074686520776f726b2072656c6174696e6720746f2074686520636c61696d2077617320646f6e652ea164736f6c6343000810000a",
  "devdoc": {
    "details": "Hypercertificate metadata creation logic",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/HypercertMetadata.sol:HypercertMetadata",
        "label": "svgGenerator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}