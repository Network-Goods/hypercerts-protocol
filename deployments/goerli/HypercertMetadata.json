{
  "address": "0x9Ea3Ee1A0D06f59fA2174BC1840219a3892bf870",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgGenerationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "generateSlotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb520b50c2c80fcc4a590497f67a78b37b0195412c9ce7b34fb9a9670baa5a96a",
  "receipt": {
    "to": null,
    "from": "0x23314160c752D6Bb544661DcE13d01C21c64331E",
    "contractAddress": "0x9Ea3Ee1A0D06f59fA2174BC1840219a3892bf870",
    "transactionIndex": 40,
    "gasUsed": "1585911",
    "logsBloom": "0x
    "blockHash": "0x07864bab41a4971ab48f99bc4a9f2183868f80c15d8ebe8c14c1f7286d6dd785",
    "transactionHash": "0xb520b50c2c80fcc4a590497f67a78b37b0195412c9ce7b34fb9a9670baa5a96a",
    "logs": [],
    "blockNumber": 7705781,
    "cumulativeGasUsed": "12724999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0a21c5d7aA2e9b36C213842762ABDDd13aa21761"
  ],
  "numDeployments": 1,
  "solcInputHash": "273cd470a2e1c945a06a5dccc0d1eb7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgGenerationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"generateSlotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hypercertificate metadata creation logic\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HypercertMetadata.sol\":\"HypercertMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"contracts/HypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/IHypercertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\ninterface IHypercertMinter {\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    function workScopes(bytes32 workScopeId) external view returns (string memory);\\n\\n    function impactScopes(bytes32 impactScopeId) external view returns (string memory);\\n\\n    function rights(bytes32 rightsId) external view returns (string memory);\\n\\n    function getImpactCert(uint256 claimID) external view returns (Claim memory);\\n\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface IHypercertSVG {\\n    function generateSVG(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n}\\n\\n/// @dev Hypercertificate metadata creation logic\\ncontract HypercertMetadata is IHypercertMetadata {\\n    using ArraysUpgradeable for uint64[2];\\n    using ArraysUpgradeable for uint256[];\\n    using ArraysUpgradeable for string[];\\n    using StringsExtensions for bool;\\n    using StringsUpgradeable for uint256;\\n\\n    address svgGenerator;\\n\\n    constructor(address svgGenerationAddress) {\\n        svgGenerator = svgGenerationAddress;\\n    }\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;{\\\"name\\\":\\\"',\\n                    claim.name,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    claim.description,\\n                    '\\\",\\\"properties\\\":[',\\n                    _slotProperties(claim),\\n                    \\\",\\\",\\n                    _tokenProperties(claim, tokenId),\\n                    \\\"]}\\\"\\n                )\\n            );\\n    }\\n\\n    function generateSlotURI(uint256 slotId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;{\\\"name\\\":\\\"',\\n                    claim.name,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    claim.description,\\n                    '\\\",\\\"properties\\\":[',\\n                    _slotProperties(claim),\\n                    \\\"]}\\\"\\n                )\\n            );\\n    }\\n\\n    function _slotProperties(IHypercertMinter.Claim memory claim) internal view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\n                        \\\"work_timeframe\\\",\\n                        \\\"The period during which the work relating to the claim was done.\\\",\\n                        claim.workTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapWorkscopeIdsToValues(claim.workScopes),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"impact_timeframe\\\",\\n                        \\\"The period during which the impact relating to the claim was made.\\\",\\n                        claim.impactTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapImpactScopesIdsToValues(claim.impactScopes),\\n                    \\\",\\\",\\n                    _mapRightsIdsToValues(claim.rights),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"total_units\\\",\\n                        \\\"Total units issued across all tokens with this slot.\\\",\\n                        claim.totalUnits,\\n                        false\\n                    ),\\n                    \\\",\\\",\\n                    _propertyString(\\\"external_link\\\", \\\"URI of additional data related to the claim.\\\", claim.uri, false)\\n                )\\n            );\\n    }\\n\\n    function _tokenProperties(IHypercertMinter.Claim memory claim, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        uint256 units = IHypercertMinter(msg.sender).balanceOf(tokenId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\\"units\\\", \\\"Units issued to this token.\\\", units, false),\\n                    \\\",\\\",\\n                    _propertyString(\\\"fraction\\\", \\\"Fraction issued to this token.\\\", units / claim.totalUnits, false),\\n                    \\\",\\\",\\n                    _generateImageString(claim, units)\\n                )\\n            );\\n    }\\n\\n    function _generateImageString(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            IHypercertSVG(svgGenerator).generateSVG(\\n                claim.name,\\n                claim.description,\\n                claim.workTimeframe,\\n                claim.impactTimeframe,\\n                units,\\n                claim.totalUnits\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value_,\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        bytes32[] memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_,\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint64[2] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toString(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapWorkscopeIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).workScopes(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"work_scopes\\\",\\\"description\\\":\\\"\\\"The scopes of work of the claim.\\\"\\\",\\\"value\\\":',\\n                    values.toCsv(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    true,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapImpactScopesIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).impactScopes(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"impact_scopes\\\",\\\"description\\\":\\\"The scopes of impact of the claim.\\\",\\\"value\\\":',\\n                    values.toCsv(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    true,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapRightsIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).rights(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"rights\\\",\\\"description\\\":\\\"Rights associated with owning the hypercert (fractions)\\\",\\\"value\\\":',\\n                    values.toCsv(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    true,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf66a53bcefc3e2ff6f462cf71415b251dbc361bc69d4dc9f9ea0d68d1b1760ab\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHypercertMetadata {\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x18aa67f24d4c44048b9bcc21832c01adc1d2fbb7e3dd55a4f9cd8484c2901436\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint8[] memory array) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"[\\\", uint256(array[0]).toString(), \\\",\\\", uint256(array[1]).toString(), \\\"]\\\"));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 1; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 1; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa0701fb1a572f6db2eb48e84ddc79b1d077cbc9de23c96344f3f4376c42c989b\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611be7380380611be783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611b54806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610c65565b610077565b60405161005b9190610cce565b60405180910390f35b61004e610072366004610ce1565b610121565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e19190810190610f7f565b90508061014001518161016001516100f8836101d8565b60405160200161010a93929190611149565b604051602081830303815290604052915050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261018b9190810190610f7f565b90508061014001518161016001516101a2836101d8565b6101ac84876103a6565b6040516020016101bf94939291906111ff565b6040516020818303038152906040529150505b92915050565b60606102386040518060400160405280600e81526020017f776f726b5f74696d656672616d65000000000000000000000000000000000000815250604051806060016040528060408152602001611b086040913984602001516001610527565b610245836060015161056b565b6102a36040518060400160405280601081526020017f696d706163745f74696d656672616d6500000000000000000000000000000000815250604051806080016040528060428152602001611ac66042913986604001516001610527565b6102b085608001516106bd565b6102bd8660a001516107f7565b61031b6040518060400160405280600b81526020017f746f74616c5f756e697473000000000000000000000000000000000000000000815250604051806060016040528060348152602001611a66603491398960e001516000610931565b61037a6040518060400160405280600d81526020017f65787465726e616c5f6c696e6b000000000000000000000000000000000000008152506040518060600160405280602c8152602001611a9a602c91398a6101800151600061095c565b60405160200161039097969594939291906112d8565b6040516020818303038152906040529050919050565b604051631398fee160e31b8152600481018290526060906000903390639cc7f70890602401602060405180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c91906113a7565b90506104856040518060400160405280600581526020017f756e6974730000000000000000000000000000000000000000000000000000008152506040518060400160405280601b81526020017f556e6974732069737375656420746f207468697320746f6b656e2e0000000000815250836000610931565b61050b6040518060400160405280600881526020017f6672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601e81526020017f4672616374696f6e2069737375656420746f207468697320746f6b656e2e00008152508760e001518561050491906113ec565b6000610931565b610515868461096c565b6040516020016101bf93929190611400565b6060848461053485610a0b565b61053f851515610a44565b604051602001610552949392919061145a565b6040516020818303038152906040529050949350505050565b805160609060008167ffffffffffffffff81111561058b5761058b610d03565b6040519080825280602002602001820160405280156105be57816020015b60608152602001906001900390816105a95790505b50905060005b8281101561068857336001600160a01b0316638f88b7678683815181106105ed576105ed611548565b60200260200101516040518263ffffffff1660e01b815260040161061391815260200190565b600060405180830381865afa158015610630573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610658919081019061155e565b82828151811061066a5761066a611548565b6020026020010181905250808061068090611593565b9150506105c4565b5061069281610aa5565b60016040516020016106a59291906115ac565b60405160208183030381529060405292505050919050565b805160609060008167ffffffffffffffff8111156106dd576106dd610d03565b60405190808252806020026020018201604052801561071057816020015b60608152602001906001900390816106fb5790505b50905060005b828110156107da57336001600160a01b031663ef6f66d786838151811061073f5761073f611548565b60200260200101516040518263ffffffff1660e01b815260040161076591815260200190565b600060405180830381865afa158015610782573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107aa919081019061155e565b8282815181106107bc576107bc611548565b602002602001018190525080806107d290611593565b915050610716565b506107e481610aa5565b60016040516020016106a592919061166e565b805160609060008167ffffffffffffffff81111561081757610817610d03565b60405190808252806020026020018201604052801561084a57816020015b60608152602001906001900390816108355790505b50905060005b8281101561091457336001600160a01b031663d52fd09586838151811061087957610879611548565b60200260200101516040518263ffffffff1660e01b815260040161089f91815260200190565b600060405180830381865afa1580156108bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e4919081019061155e565b8282815181106108f6576108f6611548565b6020026020010181905250808061090c90611593565b915050610850565b5061091e81610aa5565b60016040516020016106a5929190611730565b6060848461093e85610b44565b610949851515610a44565b60405160200161055294939291906117fc565b606084848461053f851515610a44565b600054610140830151610160840151602085015160408087015160e0880151915163195811d560e21b81526060966001600160a01b0316956365604754956109bf959194909391928a9190600401611911565b600060405180830381865afa1580156109dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a04919081019061155e565b9392505050565b6060610a288260005b602002015167ffffffffffffffff16610b44565b610a33836001610a14565b60405160200161039092919061196a565b60608115610a6c5750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b80516060908160015b82811015610b3c576000858281518110610aca57610aca611548565b6020026020010151604051602001610ae291906119c1565b60405160208183030381529060405290508251600003610b0457809250610b29565b8281604051602001610b179291906119ef565b60405160208183030381529060405292505b5080610b3481611593565b915050610aae565b509392505050565b606081600003610b6b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b955780610b7f81611593565b9150610b8e9050600a836113ec565b9150610b6f565b60008167ffffffffffffffff811115610bb057610bb0610d03565b6040519080825280601f01601f191660200182016040528015610bda576020820181803683370190505b5090505b8415610c5d57610bef600183611a2b565b9150610bfc600a86611a3e565b610c07906030611a52565b60f81b818381518110610c1c57610c1c611548565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610c56600a866113ec565b9450610bde565b949350505050565b600060208284031215610c7757600080fd5b5035919050565b60005b83811015610c99578181015183820152602001610c81565b50506000910152565b60008151808452610cba816020860160208601610c7e565b601f01601f19169290920160200192915050565b602081526000610a046020830184610ca2565b60008060408385031215610cf457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610d3d57610d3d610d03565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6c57610d6c610d03565b604052919050565b600082601f830112610d8557600080fd5b6040516040810167ffffffffffffffff8282108183111715610da957610da9610d03565b60409182528291850186811115610dbf57600080fd5b855b81811015610de85780518381168114610dda5760008081fd5b845260209384019301610dc1565b50929695505050505050565b600067ffffffffffffffff821115610e0e57610e0e610d03565b5060051b60200190565b600082601f830112610e2957600080fd5b81516020610e3e610e3983610df4565b610d43565b82815260059290921b84018101918181019086841115610e5d57600080fd5b8286015b84811015610e785780518352918301918301610e61565b509695505050505050565b600082601f830112610e9457600080fd5b81516020610ea4610e3983610df4565b82815260059290921b84018101918181019086841115610ec357600080fd5b8286015b84811015610e785780516001600160a01b0381168114610ee75760008081fd5b8352918301918301610ec7565b805161ffff81168114610f0657600080fd5b919050565b80518015158114610f0657600080fd5b600082601f830112610f2c57600080fd5b815167ffffffffffffffff811115610f4657610f46610d03565b610f59601f8201601f1916602001610d43565b818152846020838601011115610f6e57600080fd5b610c5d826020830160208701610c7e565b600060208284031215610f9157600080fd5b815167ffffffffffffffff80821115610fa957600080fd5b908301906101e08286031215610fbe57600080fd5b610fc6610d19565b82518152610fd78660208501610d74565b6020820152610fe98660608501610d74565b604082015260a08301518281111561100057600080fd5b61100c87828601610e18565b60608301525060c08301518281111561102457600080fd5b61103087828601610e18565b60808301525060e08301518281111561104857600080fd5b61105487828601610e18565b60a083015250610100808401518381111561106e57600080fd5b61107a88828701610e83565b60c0840152506101208085015160e084015261014061109a818701610ef4565b8385015261016092506110ae838701610f0b565b82850152610180915081860151858111156110c857600080fd5b6110d48a828901610f1b565b8286015250506101a0850151848111156110ed57600080fd5b6110f989828801610f1b565b83850152506101c085015191508382111561111357600080fd5b61111f88838701610f1b565b908301525095945050505050565b6000815161113f818560208601610c7e565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b7b226e616d65223a220081526000845161118181601f850160208901610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b601f9184019182015284516111b2816030840160208901610c7e565b6f222c2270726f70657274696573223a5b60801b6030929091019182015283516111e3816040840160208801610c7e565b615d7d60f01b6040929091019182015260420195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b7b226e616d65223a220081526000855161123781601f850160208a01610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b601f918401918201528551611268816030840160208a01610c7e565b6f222c2270726f70657274696573223a5b60801b603092909101918201528451611299816040840160208901610c7e565b600b60fa1b6040929091019182015283516112bb816041840160208801610c7e565b615d7d60f01b604192909101918201526043019695505050505050565b6000885160206112eb8285838e01610c7e565b8184019150600b60fa1b8083528a5161130a8160018601858f01610c7e565b6001930192830181905289516113268160028601858e01610c7e565b6002930192830181905288516113428160038601858d01610c7e565b60039301928301819052875161135e8160048601858c01610c7e565b600493019283015285516113788160058501848a01610c7e565b611397611391600583860101600b60fa1b815260010190565b8761112d565b9c9b505050505050505050505050565b6000602082840312156113b957600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826113fb576113fb6113c0565b500490565b60008451611412818460208901610c7e565b8083019050600b60fa1b8082528551611432816001850160208a01610c7e565b6001920191820152835161144d816002840160208801610c7e565b0160020195945050505050565b683d913730b6b2911d1160b91b81526000855161147e816009850160208a01610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516114af81601a840160208a01610c7e565b7f222c2276616c7565223a22000000000000000000000000000000000000000000601a929091019182015284516114ed816025840160208901610c7e565b7f222c2269735f696e7472696e736963223a22000000000000000000000000000060259290910191820152835161152b816037840160208801610c7e565b61227d60f01b603792909101918201526039019695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561157057600080fd5b815167ffffffffffffffff81111561158757600080fd5b610c5d84828501610f1b565b6000600182016115a5576115a56113d6565b5060010190565b7f7b226e616d65223a22776f726b5f73636f706573222c2264657363726970746981527f6f6e223a22225468652073636f706573206f6620776f726b206f66207468652060208201527f636c61696d2e22222c2276616c7565223a000000000000000000000000000000604082015260008351611630816051850160208801610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b605193909101928301525090151560f81b606282015261227d60f01b6063820152606501919050565b7f7b226e616d65223a22696d706163745f73636f706573222c226465736372697081527f74696f6e223a225468652073636f706573206f6620696d70616374206f66207460208201527f686520636c61696d2e222c2276616c7565223a000000000000000000000000006040820152600083516116f2816053850160208801610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b605393909101928301525090151560f81b606482015261227d60f01b6065820152606701919050565b7f7b226e616d65223a22726967687473222c226465736372697074696f6e223a2281527f526967687473206173736f6369617465642077697468206f776e696e6720746860208201527f652068797065726365727420286672616374696f6e7329222c2276616c7565226040820152601d60f91b6060820152600083516117be816061850160208801610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b606193909101928301525090151560f81b607282015261227d60f01b6073820152607501919050565b683d913730b6b2911d1160b91b815260008551611820816009850160208a01610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161185181601a840160208a01610c7e565b7f222c2276616c7565223a00000000000000000000000000000000000000000000601a9290910191820152845161188f816024840160208901610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b6024929091019182015283516118c1816035840160208801610c7e565b61227d60f01b603592909101918201526037019695505050505050565b8060005b600281101561190b57815167ffffffffffffffff168452602093840193909101906001016118e2565b50505050565b60006101008083526119258184018a610ca2565b905082810360208401526119398189610ca2565b91505061194960408301876118de565b61195660808301866118de565b60c082019390935260e00152949350505050565b605b60f81b815260008351611986816001850160208801610c7e565b600b60fa1b60019184019182015283516119a7816002840160208801610c7e565b605d60f81b60029290910191820152600301949350505050565b6000601160f91b80835283516119de816001860160208801610c7e565b600193019283015250600201919050565b60008351611a01818460208801610c7e565b600b60fa1b9083019081528351611a1f816001840160208801610c7e565b01600101949350505050565b818103818111156101d2576101d26113d6565b600082611a4d57611a4d6113c0565b500690565b808201808211156101d2576101d26113d656fe546f74616c20756e69747320697373756564206163726f737320616c6c20746f6b656e732077697468207468697320736c6f742e555249206f66206164646974696f6e616c20646174612072656c6174656420746f2074686520636c61696d2e54686520706572696f6420647572696e672077686963682074686520696d706163742072656c6174696e6720746f2074686520636c61696d20776173206d6164652e54686520706572696f6420647572696e672077686963682074686520776f726b2072656c6174696e6720746f2074686520636c61696d2077617320646f6e652ea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610c65565b610077565b60405161005b9190610cce565b60405180910390f35b61004e610072366004610ce1565b610121565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e19190810190610f7f565b90508061014001518161016001516100f8836101d8565b60405160200161010a93929190611149565b604051602081830303815290604052915050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261018b9190810190610f7f565b90508061014001518161016001516101a2836101d8565b6101ac84876103a6565b6040516020016101bf94939291906111ff565b6040516020818303038152906040529150505b92915050565b60606102386040518060400160405280600e81526020017f776f726b5f74696d656672616d65000000000000000000000000000000000000815250604051806060016040528060408152602001611b086040913984602001516001610527565b610245836060015161056b565b6102a36040518060400160405280601081526020017f696d706163745f74696d656672616d6500000000000000000000000000000000815250604051806080016040528060428152602001611ac66042913986604001516001610527565b6102b085608001516106bd565b6102bd8660a001516107f7565b61031b6040518060400160405280600b81526020017f746f74616c5f756e697473000000000000000000000000000000000000000000815250604051806060016040528060348152602001611a66603491398960e001516000610931565b61037a6040518060400160405280600d81526020017f65787465726e616c5f6c696e6b000000000000000000000000000000000000008152506040518060600160405280602c8152602001611a9a602c91398a6101800151600061095c565b60405160200161039097969594939291906112d8565b6040516020818303038152906040529050919050565b604051631398fee160e31b8152600481018290526060906000903390639cc7f70890602401602060405180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c91906113a7565b90506104856040518060400160405280600581526020017f756e6974730000000000000000000000000000000000000000000000000000008152506040518060400160405280601b81526020017f556e6974732069737375656420746f207468697320746f6b656e2e0000000000815250836000610931565b61050b6040518060400160405280600881526020017f6672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601e81526020017f4672616374696f6e2069737375656420746f207468697320746f6b656e2e00008152508760e001518561050491906113ec565b6000610931565b610515868461096c565b6040516020016101bf93929190611400565b6060848461053485610a0b565b61053f851515610a44565b604051602001610552949392919061145a565b6040516020818303038152906040529050949350505050565b805160609060008167ffffffffffffffff81111561058b5761058b610d03565b6040519080825280602002602001820160405280156105be57816020015b60608152602001906001900390816105a95790505b50905060005b8281101561068857336001600160a01b0316638f88b7678683815181106105ed576105ed611548565b60200260200101516040518263ffffffff1660e01b815260040161061391815260200190565b600060405180830381865afa158015610630573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610658919081019061155e565b82828151811061066a5761066a611548565b6020026020010181905250808061068090611593565b9150506105c4565b5061069281610aa5565b60016040516020016106a59291906115ac565b60405160208183030381529060405292505050919050565b805160609060008167ffffffffffffffff8111156106dd576106dd610d03565b60405190808252806020026020018201604052801561071057816020015b60608152602001906001900390816106fb5790505b50905060005b828110156107da57336001600160a01b031663ef6f66d786838151811061073f5761073f611548565b60200260200101516040518263ffffffff1660e01b815260040161076591815260200190565b600060405180830381865afa158015610782573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107aa919081019061155e565b8282815181106107bc576107bc611548565b602002602001018190525080806107d290611593565b915050610716565b506107e481610aa5565b60016040516020016106a592919061166e565b805160609060008167ffffffffffffffff81111561081757610817610d03565b60405190808252806020026020018201604052801561084a57816020015b60608152602001906001900390816108355790505b50905060005b8281101561091457336001600160a01b031663d52fd09586838151811061087957610879611548565b60200260200101516040518263ffffffff1660e01b815260040161089f91815260200190565b600060405180830381865afa1580156108bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e4919081019061155e565b8282815181106108f6576108f6611548565b6020026020010181905250808061090c90611593565b915050610850565b5061091e81610aa5565b60016040516020016106a5929190611730565b6060848461093e85610b44565b610949851515610a44565b60405160200161055294939291906117fc565b606084848461053f851515610a44565b600054610140830151610160840151602085015160408087015160e0880151915163195811d560e21b81526060966001600160a01b0316956365604754956109bf959194909391928a9190600401611911565b600060405180830381865afa1580156109dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a04919081019061155e565b9392505050565b6060610a288260005b602002015167ffffffffffffffff16610b44565b610a33836001610a14565b60405160200161039092919061196a565b60608115610a6c5750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b80516060908160015b82811015610b3c576000858281518110610aca57610aca611548565b6020026020010151604051602001610ae291906119c1565b60405160208183030381529060405290508251600003610b0457809250610b29565b8281604051602001610b179291906119ef565b60405160208183030381529060405292505b5080610b3481611593565b915050610aae565b509392505050565b606081600003610b6b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b955780610b7f81611593565b9150610b8e9050600a836113ec565b9150610b6f565b60008167ffffffffffffffff811115610bb057610bb0610d03565b6040519080825280601f01601f191660200182016040528015610bda576020820181803683370190505b5090505b8415610c5d57610bef600183611a2b565b9150610bfc600a86611a3e565b610c07906030611a52565b60f81b818381518110610c1c57610c1c611548565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610c56600a866113ec565b9450610bde565b949350505050565b600060208284031215610c7757600080fd5b5035919050565b60005b83811015610c99578181015183820152602001610c81565b50506000910152565b60008151808452610cba816020860160208601610c7e565b601f01601f19169290920160200192915050565b602081526000610a046020830184610ca2565b60008060408385031215610cf457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610d3d57610d3d610d03565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6c57610d6c610d03565b604052919050565b600082601f830112610d8557600080fd5b6040516040810167ffffffffffffffff8282108183111715610da957610da9610d03565b60409182528291850186811115610dbf57600080fd5b855b81811015610de85780518381168114610dda5760008081fd5b845260209384019301610dc1565b50929695505050505050565b600067ffffffffffffffff821115610e0e57610e0e610d03565b5060051b60200190565b600082601f830112610e2957600080fd5b81516020610e3e610e3983610df4565b610d43565b82815260059290921b84018101918181019086841115610e5d57600080fd5b8286015b84811015610e785780518352918301918301610e61565b509695505050505050565b600082601f830112610e9457600080fd5b81516020610ea4610e3983610df4565b82815260059290921b84018101918181019086841115610ec357600080fd5b8286015b84811015610e785780516001600160a01b0381168114610ee75760008081fd5b8352918301918301610ec7565b805161ffff81168114610f0657600080fd5b919050565b80518015158114610f0657600080fd5b600082601f830112610f2c57600080fd5b815167ffffffffffffffff811115610f4657610f46610d03565b610f59601f8201601f1916602001610d43565b818152846020838601011115610f6e57600080fd5b610c5d826020830160208701610c7e565b600060208284031215610f9157600080fd5b815167ffffffffffffffff80821115610fa957600080fd5b908301906101e08286031215610fbe57600080fd5b610fc6610d19565b82518152610fd78660208501610d74565b6020820152610fe98660608501610d74565b604082015260a08301518281111561100057600080fd5b61100c87828601610e18565b60608301525060c08301518281111561102457600080fd5b61103087828601610e18565b60808301525060e08301518281111561104857600080fd5b61105487828601610e18565b60a083015250610100808401518381111561106e57600080fd5b61107a88828701610e83565b60c0840152506101208085015160e084015261014061109a818701610ef4565b8385015261016092506110ae838701610f0b565b82850152610180915081860151858111156110c857600080fd5b6110d48a828901610f1b565b8286015250506101a0850151848111156110ed57600080fd5b6110f989828801610f1b565b83850152506101c085015191508382111561111357600080fd5b61111f88838701610f1b565b908301525095945050505050565b6000815161113f818560208601610c7e565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b7b226e616d65223a220081526000845161118181601f850160208901610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b601f9184019182015284516111b2816030840160208901610c7e565b6f222c2270726f70657274696573223a5b60801b6030929091019182015283516111e3816040840160208801610c7e565b615d7d60f01b6040929091019182015260420195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b7b226e616d65223a220081526000855161123781601f850160208a01610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b601f918401918201528551611268816030840160208a01610c7e565b6f222c2270726f70657274696573223a5b60801b603092909101918201528451611299816040840160208901610c7e565b600b60fa1b6040929091019182015283516112bb816041840160208801610c7e565b615d7d60f01b604192909101918201526043019695505050505050565b6000885160206112eb8285838e01610c7e565b8184019150600b60fa1b8083528a5161130a8160018601858f01610c7e565b6001930192830181905289516113268160028601858e01610c7e565b6002930192830181905288516113428160038601858d01610c7e565b60039301928301819052875161135e8160048601858c01610c7e565b600493019283015285516113788160058501848a01610c7e565b611397611391600583860101600b60fa1b815260010190565b8761112d565b9c9b505050505050505050505050565b6000602082840312156113b957600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826113fb576113fb6113c0565b500490565b60008451611412818460208901610c7e565b8083019050600b60fa1b8082528551611432816001850160208a01610c7e565b6001920191820152835161144d816002840160208801610c7e565b0160020195945050505050565b683d913730b6b2911d1160b91b81526000855161147e816009850160208a01610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516114af81601a840160208a01610c7e565b7f222c2276616c7565223a22000000000000000000000000000000000000000000601a929091019182015284516114ed816025840160208901610c7e565b7f222c2269735f696e7472696e736963223a22000000000000000000000000000060259290910191820152835161152b816037840160208801610c7e565b61227d60f01b603792909101918201526039019695505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561157057600080fd5b815167ffffffffffffffff81111561158757600080fd5b610c5d84828501610f1b565b6000600182016115a5576115a56113d6565b5060010190565b7f7b226e616d65223a22776f726b5f73636f706573222c2264657363726970746981527f6f6e223a22225468652073636f706573206f6620776f726b206f66207468652060208201527f636c61696d2e22222c2276616c7565223a000000000000000000000000000000604082015260008351611630816051850160208801610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b605193909101928301525090151560f81b606282015261227d60f01b6063820152606501919050565b7f7b226e616d65223a22696d706163745f73636f706573222c226465736372697081527f74696f6e223a225468652073636f706573206f6620696d70616374206f66207460208201527f686520636c61696d2e222c2276616c7565223a000000000000000000000000006040820152600083516116f2816053850160208801610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b605393909101928301525090151560f81b606482015261227d60f01b6065820152606701919050565b7f7b226e616d65223a22726967687473222c226465736372697074696f6e223a2281527f526967687473206173736f6369617465642077697468206f776e696e6720746860208201527f652068797065726365727420286672616374696f6e7329222c2276616c7565226040820152601d60f91b6060820152600083516117be816061850160208801610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b606193909101928301525090151560f81b607282015261227d60f01b6073820152607501919050565b683d913730b6b2911d1160b91b815260008551611820816009850160208a01610c7e565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161185181601a840160208a01610c7e565b7f222c2276616c7565223a00000000000000000000000000000000000000000000601a9290910191820152845161188f816024840160208901610c7e565b70161134b9afb4b73a3934b739b4b1911d1160791b6024929091019182015283516118c1816035840160208801610c7e565b61227d60f01b603592909101918201526037019695505050505050565b8060005b600281101561190b57815167ffffffffffffffff168452602093840193909101906001016118e2565b50505050565b60006101008083526119258184018a610ca2565b905082810360208401526119398189610ca2565b91505061194960408301876118de565b61195660808301866118de565b60c082019390935260e00152949350505050565b605b60f81b815260008351611986816001850160208801610c7e565b600b60fa1b60019184019182015283516119a7816002840160208801610c7e565b605d60f81b60029290910191820152600301949350505050565b6000601160f91b80835283516119de816001860160208801610c7e565b600193019283015250600201919050565b60008351611a01818460208801610c7e565b600b60fa1b9083019081528351611a1f816001840160208801610c7e565b01600101949350505050565b818103818111156101d2576101d26113d6565b600082611a4d57611a4d6113c0565b500690565b808201808211156101d2576101d26113d656fe546f74616c20756e69747320697373756564206163726f737320616c6c20746f6b656e732077697468207468697320736c6f742e555249206f66206164646974696f6e616c20646174612072656c6174656420746f2074686520636c61696d2e54686520706572696f6420647572696e672077686963682074686520696d706163742072656c6174696e6720746f2074686520636c61696d20776173206d6164652e54686520706572696f6420647572696e672077686963682074686520776f726b2072656c6174696e6720746f2074686520636c61696d2077617320646f6e652ea164736f6c6343000810000a",
  "devdoc": {
    "details": "Hypercertificate metadata creation logic",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4545,
        "contract": "contracts/HypercertMetadata.sol:HypercertMetadata",
        "label": "svgGenerator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}