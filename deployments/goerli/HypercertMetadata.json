{
  "address": "0xBf1d7d9637850D174D262d296F9021fcc7816C0b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgGenerationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "generateSlotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fae4cc146ed038dafbd816927b5fcf02de26b2af6f7bef16e47c66ed81499ef",
  "receipt": {
    "to": null,
    "from": "0x23314160c752D6Bb544661DcE13d01C21c64331E",
    "contractAddress": "0xBf1d7d9637850D174D262d296F9021fcc7816C0b",
    "transactionIndex": 67,
    "gasUsed": "1676085",
    "logsBloom": "0x
    "blockHash": "0xf9b64a3a66ec78ea07bee886060a8af70c1c8f6c1521fcc1aea8ffcf20fe426d",
    "transactionHash": "0x4fae4cc146ed038dafbd816927b5fcf02de26b2af6f7bef16e47c66ed81499ef",
    "logs": [],
    "blockNumber": 7715951,
    "cumulativeGasUsed": "23850252",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93238D3891b16c7251014a13c7945074D40A3003"
  ],
  "numDeployments": 1,
  "solcInputHash": "5faac119deb729b14be84fd1cabdec38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgGenerationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"generateSlotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hypercertificate metadata creation logic\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HypercertMetadata.sol\":\"HypercertMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"contracts/HypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./interfaces/IHypercertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\\\";\\n\\ninterface IHypercertMinter {\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    function workScopes(bytes32 workScopeId) external view returns (string memory);\\n\\n    function impactScopes(bytes32 impactScopeId) external view returns (string memory);\\n\\n    function rights(bytes32 rightsId) external view returns (string memory);\\n\\n    function getImpactCert(uint256 claimID) external view returns (Claim memory);\\n\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface IHypercertSVG {\\n    function generateSvgHypercert(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n\\n    function generateSvgFraction(\\n        string memory name,\\n        string memory description,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n}\\n\\n/// @dev Hypercertificate metadata creation logic\\ncontract HypercertMetadata is IHypercertMetadata {\\n    using ArraysUpgradeable for uint64[2];\\n    using ArraysUpgradeable for uint256[];\\n    using ArraysUpgradeable for string[];\\n    using StringsExtensions for bool;\\n    using StringsUpgradeable for uint256;\\n\\n    address svgGenerator;\\n\\n    constructor(address svgGenerationAddress) {\\n        svgGenerator = svgGenerationAddress;\\n    }\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        uint256 units = IHypercertMinter(msg.sender).balanceOf(tokenId);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringFraction(claim, units),\\n                            '\\\",\\\"external_url\\\":\\\"',\\n                            claim.uri,\\n                            '\\\",\\\"properties\\\":{',\\n                            abi.encodePacked(\\n                                '\\\"balance\\\":',\\n                                _propertyString(\\\"balance\\\", \\\"Units held by fraction.\\\", units, false),\\n                                \\\",\\\"\\n                            ),\\n                            abi.encodePacked('\\\"scopesOfWork\\\":', _mapWorkScopesIdsToValues(claim.workScopes), \\\",\\\"),\\n                            abi.encodePacked('\\\"scopesOfImpact\\\":', _mapImpactScopesIdsToValues(claim.impactScopes), \\\",\\\"),\\n                            abi.encodePacked('\\\"rights\\\":', _mapRightsIdsToValues(claim.rights)),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateSlotURI(uint256 slotId) external view virtual returns (string memory) {\\n        IHypercertMinter.Claim memory claim = IHypercertMinter(msg.sender).getImpactCert(slotId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringHypercert(claim),\\n                            '\\\",\\\"properties\\\":{',\\n                            string.concat('\\\"name\\\":', _propertyString(\\\"name\\\", \\\"Name of hypercert.\\\", claim.name, false)),\\n                            \\\"}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _slotProperties(IHypercertMinter.Claim memory claim) internal view virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\n                        \\\"work_timeframe\\\",\\n                        \\\"The period during which the work relating to the claim was done.\\\",\\n                        claim.workTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapWorkScopesIdsToValues(claim.workScopes),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"impact_timeframe\\\",\\n                        \\\"The period during which the impact relating to the claim was made.\\\",\\n                        claim.impactTimeframe,\\n                        true\\n                    ),\\n                    \\\",\\\",\\n                    _mapImpactScopesIdsToValues(claim.impactScopes),\\n                    \\\",\\\",\\n                    _mapRightsIdsToValues(claim.rights),\\n                    \\\",\\\",\\n                    _propertyString(\\n                        \\\"total_units\\\",\\n                        \\\"Total units issued across all tokens with this slot.\\\",\\n                        claim.totalUnits,\\n                        false\\n                    ),\\n                    \\\",\\\",\\n                    _propertyString(\\\"external_link\\\", \\\"URI of additional data related to the claim.\\\", claim.uri, false)\\n                )\\n            );\\n    }\\n\\n    function _tokenProperties(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _propertyString(\\\"units\\\", \\\"Units issued to this token.\\\", units, false),\\n                    \\\",\\\",\\n                    _propertyString(\\\"fraction\\\", \\\"Fraction issued to this token.\\\", units / claim.totalUnits, false)\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringFraction(IHypercertMinter.Claim memory claim, uint256 units)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHypercertSVG(svgGenerator).generateSvgFraction(\\n                            claim.name,\\n                            claim.description,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            units,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringHypercert(IHypercertMinter.Claim memory claim) internal view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHypercertSVG(svgGenerator).generateSvgHypercert(\\n                            claim.name,\\n                            claim.description,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value_,\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        bytes32[] memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_,\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint64[2] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toString(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapWorkScopesIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).workScopes(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Scopes of Work\\\",\\\"description\\\":\\\"Scopes of work encapsulated in this hypercert fraction.\\\",\\\"value\\\":[',\\n                    values.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapImpactScopesIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory vals;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHypercertMinter(msg.sender).impactScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Scopes of Impact\\\",\\\"description\\\":\\\"Scopes of impact encapsulated in this hypercert fraction.\\\",\\\"value\\\":[',\\n                    vals.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapRightsIdsToValues(bytes32[] memory keys) internal view returns (string memory) {\\n        uint256 len = keys.length;\\n        string[] memory values = new string[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            values[i] = IHypercertMinter(msg.sender).rights(keys[i]);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Rights\\\",\\\"description\\\":\\\"Rights associated with owning the hypercert (fractions)\\\",\\\"value\\\":[',\\n                    values.toCsv(),\\n                    '],\\\"is_intrinsic\\\":\\\"true\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1b6c58ca7a46cfad9393786819a230726ade126ec9d279bce1a626d8a9fba78f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHypercertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHypercertMetadata {\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x18aa67f24d4c44048b9bcc21832c01adc1d2fbb7e3dd55a4f9cd8484c2901436\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint8[] memory array) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"[\\\", uint256(array[0]).toString(), \\\",\\\", uint256(array[1]).toString(), \\\"]\\\"));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 1; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 1; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa0701fb1a572f6db2eb48e84ddc79b1d077cbc9de23c96344f3f4376c42c989b\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611d8f380380611d8f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611cfc806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610d14565b610077565b60405161005b9190610d7d565b60405180910390f35b61004e610072366004610d97565b6101c9565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e19190810190611035565b90506101a28161014001518261016001516100fb84610413565b61015e604051806040016040528060048152602001636e616d6560e01b8152506040518060400160405280601281526020017f4e616d65206f66206879706572636572742e000000000000000000000000000081525087610140015160006104f3565b60405160200161016e91906111ff565b60408051601f198184030181529082905261018e94939291602001611244565b60405160208183030381529060405261052f565b6040516020016101b29190611312565b604051602081830303815290604052915050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa15801561020b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102339190810190611035565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611357565b90506103e98261014001518361016001516102b48585610682565b8561018001516103316040518060400160405280600781526020017f62616c616e6365000000000000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e000000000000000000815250886000610701565b6040516020016103419190611370565b60405160208183030381529060405261035d886060015161072c565b60405160200161036d91906113c0565b604051602081830303815290604052610389896080015161087b565b6040516020016103999190611410565b6040516020818303038152906040526103b58a60a001516109bc565b6040516020016103c59190611460565b60408051601f198184030181529082905261018e98979695949392916020016114a5565b6040516020016103f99190611312565b604051602081830303815290604052925050505b92915050565b600054610140820151610160830151602084015160408086015160e087015191517fffb38c120000000000000000000000000000000000000000000000000000000081526060966104cd966001600160a01b039091169563ffb38c129561048395929491939092906004016115fd565b600060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c8919081019061164f565b61052f565b6040516020016104dd9190611684565b6040516020818303038152906040529050919050565b6060848484610503851515610af3565b60405160200161051694939291906116c9565b6040516020818303038152906040529050949350505050565b6060815160000361054e57505060408051602081019091526000815290565b6000604051806060016040528060408152602001611cb0604091399050600060038451600261057d91906117cd565b61058791906117f6565b61059290600461180a565b67ffffffffffffffff8111156105aa576105aa610db9565b6040519080825280601f01601f1916602001820160405280156105d4576020820181803683370190505b509050600182016020820185865187015b80821015610640576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506105e5565b505060038651066001811461065c576002811461066f57610677565b603d6001830353603d6002830353610677565b603d60018303535b509195945050505050565b600054610140830151610160840151602085015160408087015160e0880151915163614a5c8160e01b81526060966106da966001600160a01b039091169563614a5c8195610483959294919390928b91600401611829565b6040516020016106ea9190611684565b604051602081830303815290604052905092915050565b6060848461070e85610b54565b610719851515610af3565b6040516020016105169493929190611882565b805160609060008167ffffffffffffffff81111561074c5761074c610db9565b60405190808252806020026020018201604052801561077f57816020015b606081526020019060019003908161076a5790505b50905060005b8281101561084957336001600160a01b0316638f88b7678683815181106107ae576107ae611970565b60200260200101516040518263ffffffff1660e01b81526004016107d491815260200190565b600060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610819919081019061164f565b82828151811061082b5761082b611970565b6020026020010181905250808061084190611986565b915050610785565b5061085381610c75565b604051602001610863919061199f565b60405160208183030381529060405292505050919050565b80516060908181156109a35760008267ffffffffffffffff8111156108a2576108a2610db9565b6040519080825280602002602001820160405280156108d557816020015b60608152602001906001900390816108c05790505b50905060005b8381101561099f57336001600160a01b031663ef6f66d787838151811061090457610904611970565b60200260200101516040518263ffffffff1660e01b815260040161092a91815260200190565b600060405180830381865afa158015610947573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096f919081019061164f565b82828151811061098157610981611970565b6020026020010181905250808061099790611986565b9150506108db565b5090505b6109ac81610c75565b6040516020016108639190611a7d565b805160609060008167ffffffffffffffff8111156109dc576109dc610db9565b604051908082528060200260200182016040528015610a0f57816020015b60608152602001906001900390816109fa5790505b50905060005b82811015610ad957336001600160a01b031663d52fd095868381518110610a3e57610a3e611970565b60200260200101516040518263ffffffff1660e01b8152600401610a6491815260200190565b600060405180830381865afa158015610a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aa9919081019061164f565b828281518110610abb57610abb611970565b60200260200101819052508080610ad190611986565b915050610a15565b50610ae381610c75565b6040516020016108639190611b5b565b60608115610b1b5750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b606081600003610b7b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ba55780610b8f81611986565b9150610b9e9050600a836117f6565b9150610b7f565b60008167ffffffffffffffff811115610bc057610bc0610db9565b6040519080825280601f01601f191660200182016040528015610bea576020820181803683370190505b5090505b8415610c6d57610bff600183611c1e565b9150610c0c600a86611c31565b610c179060306117cd565b60f81b818381518110610c2c57610c2c611970565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610c66600a866117f6565b9450610bee565b949350505050565b80516060908160015b82811015610d0c576000858281518110610c9a57610c9a611970565b6020026020010151604051602001610cb29190611c45565b60405160208183030381529060405290508251600003610cd457809250610cf9565b8281604051602001610ce7929190611c73565b60405160208183030381529060405292505b5080610d0481611986565b915050610c7e565b509392505050565b600060208284031215610d2657600080fd5b5035919050565b60005b83811015610d48578181015183820152602001610d30565b50506000910152565b60008151808452610d69816020860160208601610d2d565b601f01601f19169290920160200192915050565b602081526000610d906020830184610d51565b9392505050565b60008060408385031215610daa57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610df357610df3610db9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e2257610e22610db9565b604052919050565b600082601f830112610e3b57600080fd5b6040516040810167ffffffffffffffff8282108183111715610e5f57610e5f610db9565b60409182528291850186811115610e7557600080fd5b855b81811015610e9e5780518381168114610e905760008081fd5b845260209384019301610e77565b50929695505050505050565b600067ffffffffffffffff821115610ec457610ec4610db9565b5060051b60200190565b600082601f830112610edf57600080fd5b81516020610ef4610eef83610eaa565b610df9565b82815260059290921b84018101918181019086841115610f1357600080fd5b8286015b84811015610f2e5780518352918301918301610f17565b509695505050505050565b600082601f830112610f4a57600080fd5b81516020610f5a610eef83610eaa565b82815260059290921b84018101918181019086841115610f7957600080fd5b8286015b84811015610f2e5780516001600160a01b0381168114610f9d5760008081fd5b8352918301918301610f7d565b805161ffff81168114610fbc57600080fd5b919050565b80518015158114610fbc57600080fd5b600082601f830112610fe257600080fd5b815167ffffffffffffffff811115610ffc57610ffc610db9565b61100f601f8201601f1916602001610df9565b81815284602083860101111561102457600080fd5b610c6d826020830160208701610d2d565b60006020828403121561104757600080fd5b815167ffffffffffffffff8082111561105f57600080fd5b908301906101e0828603121561107457600080fd5b61107c610dcf565b8251815261108d8660208501610e2a565b602082015261109f8660608501610e2a565b604082015260a0830151828111156110b657600080fd5b6110c287828601610ece565b60608301525060c0830151828111156110da57600080fd5b6110e687828601610ece565b60808301525060e0830151828111156110fe57600080fd5b61110a87828601610ece565b60a083015250610100808401518381111561112457600080fd5b61113088828701610f39565b60c0840152506101208085015160e0840152610140611150818701610faa565b838501526101609250611164838701610fc1565b828501526101809150818601518581111561117e57600080fd5b61118a8a828901610fd1565b8286015250506101a0850151848111156111a357600080fd5b6111af89828801610fd1565b83850152506101c08501519150838211156111c957600080fd5b6111d588838701610fd1565b908301525095945050505050565b600081516111f5818560208601610d2d565b9290920192915050565b7f226e616d65223a00000000000000000000000000000000000000000000000000815260008251611237816007850160208701610d2d565b9190910160070192915050565b683d913730b6b2911d1160b91b815260008551611268816009850160208a01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161129981601a840160208a01610d2d565b6a11161134b6b0b3b2911d1160a91b601a929091019182015284516112c5816025840160208901610d2d565b6f222c2270726f70657274696573223a7b60801b6025929091019182015283516112f6816035840160208801610d2d565b607d60f81b603592909101918201526036019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161134a81601d850160208701610d2d565b91909101601d0192915050565b60006020828403121561136957600080fd5b5051919050565b7f2262616c616e6365223a000000000000000000000000000000000000000000008152600082516113a881600a850160208701610d2d565b600b60fa1b600a939091019283015250600b01919050565b7f2273636f7065734f66576f726b223a00000000000000000000000000000000008152600082516113f881600f850160208701610d2d565b600b60fa1b600f939091019283015250601001919050565b7f2273636f7065734f66496d70616374223a000000000000000000000000000000815260008251611448816011850160208701610d2d565b600b60fa1b6011939091019283015250601201919050565b7f22726967687473223a0000000000000000000000000000000000000000000000815260008251611498816009850160208701610d2d565b9190910160090192915050565b683d913730b6b2911d1160b91b8152600089516114c9816009850160208e01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015289516114fa81601a840160208e01610d2d565b6a11161134b6b0b3b2911d1160a91b601a92909101918201528851611526816025840160208d01610d2d565b7f222c2265787465726e616c5f75726c223a220000000000000000000000000000602592909101918201528751611564816037840160208c01610d2d565b6f222c2270726f70657274696573223a7b60801b603792909101918201526115bb6115ad6115a76115a161159b604786018c6111e3565b8a6111e3565b886111e3565b866111e3565b617d7d60f01b815260020190565b9b9a5050505050505050505050565b8060005b60028110156115f757815167ffffffffffffffff168452602093840193909101906001016115ce565b50505050565b60e08152600061161060e0830188610d51565b82810360208401526116228188610d51565b91505061163260408301866115ca565b61163f60808301856115ca565b8260c08301529695505050505050565b60006020828403121561166157600080fd5b815167ffffffffffffffff81111561167857600080fd5b610c6d84828501610fd1565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516116bc81601a850160208701610d2d565b91909101601a0192915050565b683d913730b6b2911d1160b91b8152600085516116ed816009850160208a01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161171e81601a840160208a01610d2d565b7f222c2276616c7565223a22000000000000000000000000000000000000000000601a9290910191820152845161175c816025840160208901610d2d565b7f222c2269735f696e7472696e736963223a22000000000000000000000000000060259290910191820152835161179a816037840160208801610d2d565b61227d60f01b603792909101918201526039019695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561040d5761040d6117b7565b634e487b7160e01b600052601260045260246000fd5b600082611805576118056117e0565b500490565b6000816000190483118215151615611824576118246117b7565b500290565b600061010080835261183d8184018a610d51565b905082810360208401526118518189610d51565b91505061186160408301876115ca565b61186e60808301866115ca565b60c082019390935260e00152949350505050565b683d913730b6b2911d1160b91b8152600085516118a6816009850160208a01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516118d781601a840160208a01610d2d565b7f222c2276616c7565223a00000000000000000000000000000000000000000000601a92909101918201528451611915816024840160208901610d2d565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000602492909101918201528351611953816035840160208801610d2d565b61227d60f01b603592909101918201526037019695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201611998576119986117b7565b5060010190565b7f7b226e616d65223a2253636f706573206f6620576f726b222c2264657363726981527f7074696f6e223a2253636f706573206f6620776f726b20656e63617073756c6160208201527f74656420696e207468697320687970657263657274206672616374696f6e2e2260408201527f2c2276616c7565223a5b00000000000000000000000000000000000000000000606082015260008251611a4981606a850160208701610d2d565b7f5d2c2269735f696e7472696e736963223a2274727565227d0000000000000000606a939091019283015250608201919050565b7f7b226e616d65223a2253636f706573206f6620496d70616374222c226465736381527f72697074696f6e223a2253636f706573206f6620696d7061637420656e63617060208201527f73756c6174656420696e2074686973206879706572636572742066726163746960408201527f6f6e2e222c2276616c7565223a5b000000000000000000000000000000000000606082015260008251611b2781606e850160208701610d2d565b7f5d2c2269735f696e7472696e736963223a2274727565227d0000000000000000606e939091019283015250608601919050565b7f7b226e616d65223a22526967687473222c226465736372697074696f6e223a2281527f526967687473206173736f6369617465642077697468206f776e696e6720746860208201527f652068797065726365727420286672616374696f6e7329222c2276616c7565226040820152613a5b60f01b606082015260008251611bea816062850160208701610d2d565b7f5d2c2269735f696e7472696e736963223a2274727565227d00000000000000006062939091019283015250607a01919050565b8181038181111561040d5761040d6117b7565b600082611c4057611c406117e0565b500690565b6000601160f91b8083528351611c62816001860160208801610d2d565b600193019283015250600201919050565b60008351611c85818460208801610d2d565b600b60fa1b9083019081528351611ca3816001840160208801610d2d565b0160010194935050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610d14565b610077565b60405161005b9190610d7d565b60405180910390f35b61004e610072366004610d97565b6101c9565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e19190810190611035565b90506101a28161014001518261016001516100fb84610413565b61015e604051806040016040528060048152602001636e616d6560e01b8152506040518060400160405280601281526020017f4e616d65206f66206879706572636572742e000000000000000000000000000081525087610140015160006104f3565b60405160200161016e91906111ff565b60408051601f198184030181529082905261018e94939291602001611244565b60405160208183030381529060405261052f565b6040516020016101b29190611312565b604051602081830303815290604052915050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa15801561020b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102339190810190611035565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611357565b90506103e98261014001518361016001516102b48585610682565b8561018001516103316040518060400160405280600781526020017f62616c616e6365000000000000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e000000000000000000815250886000610701565b6040516020016103419190611370565b60405160208183030381529060405261035d886060015161072c565b60405160200161036d91906113c0565b604051602081830303815290604052610389896080015161087b565b6040516020016103999190611410565b6040516020818303038152906040526103b58a60a001516109bc565b6040516020016103c59190611460565b60408051601f198184030181529082905261018e98979695949392916020016114a5565b6040516020016103f99190611312565b604051602081830303815290604052925050505b92915050565b600054610140820151610160830151602084015160408086015160e087015191517fffb38c120000000000000000000000000000000000000000000000000000000081526060966104cd966001600160a01b039091169563ffb38c129561048395929491939092906004016115fd565b600060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c8919081019061164f565b61052f565b6040516020016104dd9190611684565b6040516020818303038152906040529050919050565b6060848484610503851515610af3565b60405160200161051694939291906116c9565b6040516020818303038152906040529050949350505050565b6060815160000361054e57505060408051602081019091526000815290565b6000604051806060016040528060408152602001611cb0604091399050600060038451600261057d91906117cd565b61058791906117f6565b61059290600461180a565b67ffffffffffffffff8111156105aa576105aa610db9565b6040519080825280601f01601f1916602001820160405280156105d4576020820181803683370190505b509050600182016020820185865187015b80821015610640576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506105e5565b505060038651066001811461065c576002811461066f57610677565b603d6001830353603d6002830353610677565b603d60018303535b509195945050505050565b600054610140830151610160840151602085015160408087015160e0880151915163614a5c8160e01b81526060966106da966001600160a01b039091169563614a5c8195610483959294919390928b91600401611829565b6040516020016106ea9190611684565b604051602081830303815290604052905092915050565b6060848461070e85610b54565b610719851515610af3565b6040516020016105169493929190611882565b805160609060008167ffffffffffffffff81111561074c5761074c610db9565b60405190808252806020026020018201604052801561077f57816020015b606081526020019060019003908161076a5790505b50905060005b8281101561084957336001600160a01b0316638f88b7678683815181106107ae576107ae611970565b60200260200101516040518263ffffffff1660e01b81526004016107d491815260200190565b600060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610819919081019061164f565b82828151811061082b5761082b611970565b6020026020010181905250808061084190611986565b915050610785565b5061085381610c75565b604051602001610863919061199f565b60405160208183030381529060405292505050919050565b80516060908181156109a35760008267ffffffffffffffff8111156108a2576108a2610db9565b6040519080825280602002602001820160405280156108d557816020015b60608152602001906001900390816108c05790505b50905060005b8381101561099f57336001600160a01b031663ef6f66d787838151811061090457610904611970565b60200260200101516040518263ffffffff1660e01b815260040161092a91815260200190565b600060405180830381865afa158015610947573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096f919081019061164f565b82828151811061098157610981611970565b6020026020010181905250808061099790611986565b9150506108db565b5090505b6109ac81610c75565b6040516020016108639190611a7d565b805160609060008167ffffffffffffffff8111156109dc576109dc610db9565b604051908082528060200260200182016040528015610a0f57816020015b60608152602001906001900390816109fa5790505b50905060005b82811015610ad957336001600160a01b031663d52fd095868381518110610a3e57610a3e611970565b60200260200101516040518263ffffffff1660e01b8152600401610a6491815260200190565b600060405180830381865afa158015610a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aa9919081019061164f565b828281518110610abb57610abb611970565b60200260200101819052508080610ad190611986565b915050610a15565b50610ae381610c75565b6040516020016108639190611b5b565b60608115610b1b5750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b606081600003610b7b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ba55780610b8f81611986565b9150610b9e9050600a836117f6565b9150610b7f565b60008167ffffffffffffffff811115610bc057610bc0610db9565b6040519080825280601f01601f191660200182016040528015610bea576020820181803683370190505b5090505b8415610c6d57610bff600183611c1e565b9150610c0c600a86611c31565b610c179060306117cd565b60f81b818381518110610c2c57610c2c611970565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610c66600a866117f6565b9450610bee565b949350505050565b80516060908160015b82811015610d0c576000858281518110610c9a57610c9a611970565b6020026020010151604051602001610cb29190611c45565b60405160208183030381529060405290508251600003610cd457809250610cf9565b8281604051602001610ce7929190611c73565b60405160208183030381529060405292505b5080610d0481611986565b915050610c7e565b509392505050565b600060208284031215610d2657600080fd5b5035919050565b60005b83811015610d48578181015183820152602001610d30565b50506000910152565b60008151808452610d69816020860160208601610d2d565b601f01601f19169290920160200192915050565b602081526000610d906020830184610d51565b9392505050565b60008060408385031215610daa57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610df357610df3610db9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e2257610e22610db9565b604052919050565b600082601f830112610e3b57600080fd5b6040516040810167ffffffffffffffff8282108183111715610e5f57610e5f610db9565b60409182528291850186811115610e7557600080fd5b855b81811015610e9e5780518381168114610e905760008081fd5b845260209384019301610e77565b50929695505050505050565b600067ffffffffffffffff821115610ec457610ec4610db9565b5060051b60200190565b600082601f830112610edf57600080fd5b81516020610ef4610eef83610eaa565b610df9565b82815260059290921b84018101918181019086841115610f1357600080fd5b8286015b84811015610f2e5780518352918301918301610f17565b509695505050505050565b600082601f830112610f4a57600080fd5b81516020610f5a610eef83610eaa565b82815260059290921b84018101918181019086841115610f7957600080fd5b8286015b84811015610f2e5780516001600160a01b0381168114610f9d5760008081fd5b8352918301918301610f7d565b805161ffff81168114610fbc57600080fd5b919050565b80518015158114610fbc57600080fd5b600082601f830112610fe257600080fd5b815167ffffffffffffffff811115610ffc57610ffc610db9565b61100f601f8201601f1916602001610df9565b81815284602083860101111561102457600080fd5b610c6d826020830160208701610d2d565b60006020828403121561104757600080fd5b815167ffffffffffffffff8082111561105f57600080fd5b908301906101e0828603121561107457600080fd5b61107c610dcf565b8251815261108d8660208501610e2a565b602082015261109f8660608501610e2a565b604082015260a0830151828111156110b657600080fd5b6110c287828601610ece565b60608301525060c0830151828111156110da57600080fd5b6110e687828601610ece565b60808301525060e0830151828111156110fe57600080fd5b61110a87828601610ece565b60a083015250610100808401518381111561112457600080fd5b61113088828701610f39565b60c0840152506101208085015160e0840152610140611150818701610faa565b838501526101609250611164838701610fc1565b828501526101809150818601518581111561117e57600080fd5b61118a8a828901610fd1565b8286015250506101a0850151848111156111a357600080fd5b6111af89828801610fd1565b83850152506101c08501519150838211156111c957600080fd5b6111d588838701610fd1565b908301525095945050505050565b600081516111f5818560208601610d2d565b9290920192915050565b7f226e616d65223a00000000000000000000000000000000000000000000000000815260008251611237816007850160208701610d2d565b9190910160070192915050565b683d913730b6b2911d1160b91b815260008551611268816009850160208a01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161129981601a840160208a01610d2d565b6a11161134b6b0b3b2911d1160a91b601a929091019182015284516112c5816025840160208901610d2d565b6f222c2270726f70657274696573223a7b60801b6025929091019182015283516112f6816035840160208801610d2d565b607d60f81b603592909101918201526036019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161134a81601d850160208701610d2d565b91909101601d0192915050565b60006020828403121561136957600080fd5b5051919050565b7f2262616c616e6365223a000000000000000000000000000000000000000000008152600082516113a881600a850160208701610d2d565b600b60fa1b600a939091019283015250600b01919050565b7f2273636f7065734f66576f726b223a00000000000000000000000000000000008152600082516113f881600f850160208701610d2d565b600b60fa1b600f939091019283015250601001919050565b7f2273636f7065734f66496d70616374223a000000000000000000000000000000815260008251611448816011850160208701610d2d565b600b60fa1b6011939091019283015250601201919050565b7f22726967687473223a0000000000000000000000000000000000000000000000815260008251611498816009850160208701610d2d565b9190910160090192915050565b683d913730b6b2911d1160b91b8152600089516114c9816009850160208e01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015289516114fa81601a840160208e01610d2d565b6a11161134b6b0b3b2911d1160a91b601a92909101918201528851611526816025840160208d01610d2d565b7f222c2265787465726e616c5f75726c223a220000000000000000000000000000602592909101918201528751611564816037840160208c01610d2d565b6f222c2270726f70657274696573223a7b60801b603792909101918201526115bb6115ad6115a76115a161159b604786018c6111e3565b8a6111e3565b886111e3565b866111e3565b617d7d60f01b815260020190565b9b9a5050505050505050505050565b8060005b60028110156115f757815167ffffffffffffffff168452602093840193909101906001016115ce565b50505050565b60e08152600061161060e0830188610d51565b82810360208401526116228188610d51565b91505061163260408301866115ca565b61163f60808301856115ca565b8260c08301529695505050505050565b60006020828403121561166157600080fd5b815167ffffffffffffffff81111561167857600080fd5b610c6d84828501610fd1565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516116bc81601a850160208701610d2d565b91909101601a0192915050565b683d913730b6b2911d1160b91b8152600085516116ed816009850160208a01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152855161171e81601a840160208a01610d2d565b7f222c2276616c7565223a22000000000000000000000000000000000000000000601a9290910191820152845161175c816025840160208901610d2d565b7f222c2269735f696e7472696e736963223a22000000000000000000000000000060259290910191820152835161179a816037840160208801610d2d565b61227d60f01b603792909101918201526039019695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561040d5761040d6117b7565b634e487b7160e01b600052601260045260246000fd5b600082611805576118056117e0565b500490565b6000816000190483118215151615611824576118246117b7565b500290565b600061010080835261183d8184018a610d51565b905082810360208401526118518189610d51565b91505061186160408301876115ca565b61186e60808301866115ca565b60c082019390935260e00152949350505050565b683d913730b6b2911d1160b91b8152600085516118a6816009850160208a01610d2d565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516118d781601a840160208a01610d2d565b7f222c2276616c7565223a00000000000000000000000000000000000000000000601a92909101918201528451611915816024840160208901610d2d565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000602492909101918201528351611953816035840160208801610d2d565b61227d60f01b603592909101918201526037019695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201611998576119986117b7565b5060010190565b7f7b226e616d65223a2253636f706573206f6620576f726b222c2264657363726981527f7074696f6e223a2253636f706573206f6620776f726b20656e63617073756c6160208201527f74656420696e207468697320687970657263657274206672616374696f6e2e2260408201527f2c2276616c7565223a5b00000000000000000000000000000000000000000000606082015260008251611a4981606a850160208701610d2d565b7f5d2c2269735f696e7472696e736963223a2274727565227d0000000000000000606a939091019283015250608201919050565b7f7b226e616d65223a2253636f706573206f6620496d70616374222c226465736381527f72697074696f6e223a2253636f706573206f6620696d7061637420656e63617060208201527f73756c6174656420696e2074686973206879706572636572742066726163746960408201527f6f6e2e222c2276616c7565223a5b000000000000000000000000000000000000606082015260008251611b2781606e850160208701610d2d565b7f5d2c2269735f696e7472696e736963223a2274727565227d0000000000000000606e939091019283015250608601919050565b7f7b226e616d65223a22526967687473222c226465736372697074696f6e223a2281527f526967687473206173736f6369617465642077697468206f776e696e6720746860208201527f652068797065726365727420286672616374696f6e7329222c2276616c7565226040820152613a5b60f01b606082015260008251611bea816062850160208701610d2d565b7f5d2c2269735f696e7472696e736963223a2274727565227d00000000000000006062939091019283015250607a01919050565b8181038181111561040d5761040d6117b7565b600082611c4057611c406117e0565b500690565b6000601160f91b8083528351611c62816001860160208801610d2d565b600193019283015250600201919050565b60008351611c85818460208801610d2d565b600b60fa1b9083019081528351611ca3816001840160208801610d2d565b0160010194935050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa164736f6c6343000810000a",
  "devdoc": {
    "details": "Hypercertificate metadata creation logic",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 416,
        "contract": "contracts/HypercertMetadata.sol:HypercertMetadata",
        "label": "svgGenerator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}