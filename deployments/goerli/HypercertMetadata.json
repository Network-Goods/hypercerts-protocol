{
  "address": "0x0927ECB94948C91E1f552f386D678f1a682Bd384",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgGenerationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "generateSlotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65b2dc08a6306714443adbf95c4fbd544f77b757b8cd185283137a09b1f89c59",
  "receipt": {
    "to": null,
    "from": "0x23314160c752D6Bb544661DcE13d01C21c64331E",
    "contractAddress": "0x0927ECB94948C91E1f552f386D678f1a682Bd384",
    "transactionIndex": 66,
    "gasUsed": "1841780",
    "logsBloom": "0x
    "blockHash": "0xe1f7fee70712fa7e0b428e30eef20dfb404891d9c97c25b570dc92f3f5238d38",
    "transactionHash": "0x65b2dc08a6306714443adbf95c4fbd544f77b757b8cd185283137a09b1f89c59",
    "logs": [],
    "blockNumber": 7722084,
    "cumulativeGasUsed": "20021655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F89B1e751343575c311c1b0D17d474BFeA4A868"
  ],
  "numDeployments": 1,
  "solcInputHash": "3bd6be4b69d2df248088917031093718",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgGenerationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"generateSlotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hypercertificate metadata creation logic\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperCertMetadata.sol\":\"HyperCertMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"contracts/HyperCertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./interfaces/IHyperCertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\\\";\\n\\ninterface IHyperCertMinter {\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    function workScopes(bytes32 workScopeId) external view returns (string memory);\\n\\n    function impactScopes(bytes32 impactScopeId) external view returns (string memory);\\n\\n    function rights(bytes32 rightsId) external view returns (string memory);\\n\\n    function getImpactCert(uint256 claimID) external view returns (Claim memory);\\n\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n}\\n\\ninterface IHyperCertSVG {\\n    function generateSvgHyperCert(\\n        string memory name,\\n        string[] memory scopesOfImpact,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n\\n    function generateSvgFraction(\\n        string memory name,\\n        string[] memory scopesOfImpact,\\n        uint64[2] memory workTimeframe,\\n        uint64[2] memory impactTimeframe,\\n        uint256 units,\\n        uint256 totalUnits\\n    ) external view returns (string memory);\\n}\\n\\n/// @dev Hypercertificate metadata creation logic\\n// TODO optimise where to call string data\\ncontract HyperCertMetadata is IHyperCertMetadata {\\n    using ArraysUpgradeable for uint64[2];\\n    using ArraysUpgradeable for uint256[];\\n    using ArraysUpgradeable for string[];\\n    using StringsExtensions for bool;\\n    using StringsUpgradeable for uint256;\\n\\n    address svgGenerator;\\n\\n    constructor(address svgGenerationAddress) {\\n        svgGenerator = svgGenerationAddress;\\n    }\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view virtual returns (string memory) {\\n        IHyperCertMinter.Claim memory claim = IHyperCertMinter(msg.sender).getImpactCert(slotId);\\n        uint256 units = IHyperCertMinter(msg.sender).balanceOf(tokenId);\\n        string[] memory impactScopes = _mapImpactScopesIdsToValues(claim.impactScopes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringFraction(claim, units, impactScopes),\\n                            '\\\",\\\"external_url\\\":\\\"',\\n                            claim.uri,\\n                            '\\\",\\\"properties\\\":{',\\n                            abi.encodePacked(\\n                                '\\\"fraction\\\":',\\n                                _propertyStringRange(\\n                                    \\\"Fraction\\\",\\n                                    \\\"Units held by fraction.\\\",\\n                                    units,\\n                                    claim.totalUnits,\\n                                    false\\n                                ),\\n                                \\\",\\\"\\n                            ),\\n                            _hyperCertDimensions(claim),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateSlotURI(uint256 slotId) external view virtual returns (string memory) {\\n        IHyperCertMinter.Claim memory claim = IHyperCertMinter(msg.sender).getImpactCert(slotId);\\n\\n        string[] memory impactScopes = _mapImpactScopesIdsToValues(claim.impactScopes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            claim.name,\\n                            '\\\",\\\"description\\\":\\\"',\\n                            claim.description,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            _generateImageStringHypercert(claim, impactScopes),\\n                            '\\\",\\\"external_url\\\":\\\"',\\n                            claim.uri,\\n                            '\\\",\\\"properties\\\":{',\\n                            abi.encodePacked(\\n                                '\\\"totalUnits\\\":',\\n                                _propertyString(\\\"Total units\\\", \\\"Units held by fraction.\\\", claim.totalUnits, false),\\n                                \\\",\\\"\\n                            ),\\n                            _hyperCertDimensions(claim),\\n                            \\\"}}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hyperCertDimensions(IHyperCertMinter.Claim memory claim) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    abi.encodePacked(\\n                        '\\\"scopesOfWork\\\":',\\n                        _propertyStringCSV(\\n                            \\\"Scopes of Work\\\",\\n                            \\\"Scopes of work encapsulated in this hypercert fraction.\\\",\\n                            _mapWorkScopesIdsToValues(claim.workScopes).toCsv(),\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"scopesOfImpact\\\":',\\n                        _propertyStringCSV(\\n                            \\\"Scopes of Impact\\\",\\n                            \\\"Scopes of impact encapsulated in this hypercert fraction.\\\",\\n                            _mapImpactScopesIdsToValues(claim.impactScopes).toCsv(),\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"timeOfWork\\\":',\\n                        _propertyString(\\n                            \\\"Timeframe of work\\\",\\n                            \\\"Timeframe in which work to achieve impact has been performed\\\",\\n                            claim.workTimeframe,\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"timeOfImpact\\\":',\\n                        _propertyString(\\n                            \\\"Timeframe of impact\\\",\\n                            \\\"Timeframe in which impact is realized\\\",\\n                            claim.impactTimeframe,\\n                            true\\n                        ),\\n                        \\\",\\\"\\n                    ),\\n                    abi.encodePacked(\\n                        '\\\"rights\\\":',\\n                        _propertyStringCSV(\\n                            \\\"Rights\\\",\\n                            \\\"Rights associated with owning the hypercert (fractions)\\\",\\n                            _mapRightsIdsToValues(claim.rights).toCsv(),\\n                            true\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringFraction(\\n        IHyperCertMinter.Claim memory claim,\\n        uint256 units,\\n        string[] memory impactScopes\\n    ) internal view returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHyperCertSVG(svgGenerator).generateSvgFraction(\\n                            claim.name,\\n                            impactScopes,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            units,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateImageStringHypercert(IHyperCertMinter.Claim memory claim, string[] memory scopesOfImpact)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64Upgradeable.encode(\\n                    bytes(\\n                        IHyperCertSVG(svgGenerator).generateSvgHyperCert(\\n                            claim.name,\\n                            scopesOfImpact,\\n                            claim.workTimeframe,\\n                            claim.impactTimeframe,\\n                            claim.totalUnits\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value_,\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyStringCSV(\\n        string memory name_,\\n        string memory description_,\\n        string memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":[',\\n                    value_,\\n                    '],\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyStringRange(\\n        string memory name_,\\n        string memory description_,\\n        uint256 value_,\\n        uint256 maxValue,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_.toString(),\\n                    ',\\\"max_value\\\":',\\n                    maxValue.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        bytes32[] memory value_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    value_,\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint256[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        uint64[2] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":',\\n                    array_.toString(),\\n                    ',\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function _propertyString(\\n        string memory name_,\\n        string memory description_,\\n        string[] memory array_,\\n        bool isIntrinsic_\\n    ) internal pure virtual returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name_,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description_,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    array_.toCsv(),\\n                    '\\\",\\\"is_intrinsic\\\":\\\"',\\n                    isIntrinsic_.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapWorkScopesIdsToValues(bytes32[] memory keys) internal view returns (string[] memory vals) {\\n        uint256 len = keys.length;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHyperCertMinter(msg.sender).workScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapImpactScopesIdsToValues(bytes32[] memory keys) internal view returns (string[] memory vals) {\\n        uint256 len = keys.length;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHyperCertMinter(msg.sender).impactScopes(keys[i]);\\n            }\\n            vals = values;\\n        }\\n    }\\n\\n    /// @dev use keys to look up values in the supplied mapping\\n    function _mapRightsIdsToValues(bytes32[] memory keys) internal view returns (string[] memory vals) {\\n        uint256 len = keys.length;\\n        if (len > 0) {\\n            string[] memory values = new string[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                values[i] = IHyperCertMinter(msg.sender).rights(keys[i]);\\n            }\\n            vals = values;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59ab084eb06bd39a5514e327b9f37106b409a470f7abac4384734d95db01934c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHyperCertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHyperCertMetadata {\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x984f26b47e2bce005aa44d746ac17da20974a0c3563f7fc72a7ad74e27d2d4b0\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint256[] memory array) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked('[\\\"', uint256(array[0]).toString(), '\\\",\\\"', uint256(array[1]).toString(), '\\\"]'));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd6a7ceaf9f20b46b56b2722e50c37704e24f1b27a997dae0305734bb8cc570b2\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806391383c891461003b578063ed03f41a14610064575b600080fd5b61004e610049366004610fa1565b610077565b60405161005b919061100a565b60405180910390f35b61004e610072366004611024565b610207565b6040516372927aa360e01b81526004810182905260609060009033906372927aa390602401600060405180830381865afa1580156100b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e191908101906112c2565b905060006100f282608001516103d9565b90506101df82610140015183610160015161010d8585610506565b85610180015161018e6040518060400160405280600b81526020017f546f74616c20756e6974730000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e0000000000000000008152508960e0015160006105c7565b60405160200161019e919061148c565b6040516020818303038152906040526101b68861060b565b6040516020016101cb969594939291906114dc565b6040516020818303038152906040526108be565b6040516020016101ef9190611619565b60405160208183030381529060405292505050919050565b6040516372927aa360e01b81526004810183905260609060009033906372927aa390602401600060405180830381865afa158015610249573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027191908101906112c2565b604051631398fee160e31b8152600481018590529091506000903390639cc7f70890602401602060405180830381865afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d7919061165e565b905060006102e883608001516103d9565b90506103ae836101400151846101600151610304868686610a11565b8661018001516103866040518060400160405280600881526020017f4672616374696f6e0000000000000000000000000000000000000000000000008152506040518060400160405280601781526020017f556e6974732068656c64206279206672616374696f6e2e000000000000000000815250898b60e001516000610a8a565b6040516020016103969190611677565b6040516020818303038152906040526101b68961060b565b6040516020016103be9190611619565b60405160208183030381529060405293505050505b92915050565b805160609080156105005760008167ffffffffffffffff8111156103ff576103ff611046565b60405190808252806020026020018201604052801561043257816020015b606081526020019060019003908161041d5790505b50905060005b828110156104fc57336001600160a01b031663ef6f66d7868381518110610461576104616116c7565b60200260200101516040518263ffffffff1660e01b815260040161048791815260200190565b600060405180830381865afa1580156104a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104cc91908101906116dd565b8282815181106104de576104de6116c7565b602002602001018190525080806104f490611728565b915050610438565b5091505b50919050565b600054610140830151602084015160408086015160e087015191516312945dd760e31b81526060956105a0956001600160a01b03909116946394a2eeb8946105569492938a9391906004016117c9565b600060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059b91908101906116dd565b6108be565b6040516020016105b0919061181b565b604051602081830303815290604052905092915050565b606084846105d485610ad9565b6105df851515610bfa565b6040516020016105f29493929190611860565b6040516020818303038152906040529050949350505050565b606061067b6040518060400160405280600e81526020017f53636f706573206f6620576f726b000000000000000000000000000000000000815250604051806060016040528060378152602001611ed16037913961067461066f8660600151610c5b565b610d7e565b6001610e15565b60405160200161068b919061193b565b6040516020818303038152906040526106fc6040518060400160405280601081526020017f53636f706573206f6620496d7061637400000000000000000000000000000000815250604051806060016040528060398152602001611f486039913961067461066f87608001516103d9565b60405160200161070c919061198b565b6040516020818303038152906040526107796040518060400160405280601181526020017f54696d656672616d65206f6620776f726b0000000000000000000000000000008152506040518060600160405280603c8152602001611fb8603c913986602001516001610e38565b60405160200161078991906119db565b6040516020818303038152906040526107f66040518060400160405280601381526020017f54696d656672616d65206f6620696d7061637400000000000000000000000000815250604051806060016040528060258152602001611eac6025913987604001516001610e38565b6040516020016108069190611a13565b6040516020818303038152906040526108776040518060400160405280600681526020017f5269676874730000000000000000000000000000000000000000000000000000815250604051806060016040528060378152602001611f816037913961067461066f8a60a00151610e45565b6040516020016108879190611a4b565b60408051601f19818403018152908290526108a89594939291602001611a90565b6040516020818303038152906040529050919050565b606081516000036108dd57505060408051602081019091526000815290565b6000604051806060016040528060408152602001611f08604091399050600060038451600261090c9190611afb565b6109169190611b24565b610921906004611b38565b67ffffffffffffffff81111561093957610939611046565b6040519080825280601f01601f191660200182016040528015610963576020820181803683370190505b509050600182016020820185865187015b808210156109cf576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610974565b50506003865106600181146109eb57600281146109fe57610a06565b603d6001830353603d6002830353610a06565b603d60018303535b509195945050505050565b600054610140840151602085015160408087015160e08801519151634560ed3960e11b8152606095610a62956001600160a01b0390911694638ac1da72946105569492938a93918c91600401611b57565b604051602001610a72919061181b565b60405160208183030381529060405290509392505050565b60608585610a9786610ad9565b610aa086610ad9565b610aab861515610bfa565b604051602001610abf959493929190611bb0565b604051602081830303815290604052905095945050505050565b606081600003610b005750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b2a5780610b1481611728565b9150610b239050600a83611b24565b9150610b04565b60008167ffffffffffffffff811115610b4557610b45611046565b6040519080825280601f01601f191660200182016040528015610b6f576020820181803683370190505b5090505b8415610bf257610b84600183611cd0565b9150610b91600a86611ce3565b610b9c906030611afb565b60f81b818381518110610bb157610bb16116c7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610beb600a86611b24565b9450610b73565b949350505050565b60608115610c225750506040805180820190915260048152637472756560e01b602082015290565b505060408051808201909152600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b805160609080156105005760008167ffffffffffffffff811115610c8157610c81611046565b604051908082528060200260200182016040528015610cb457816020015b6060815260200190600190039081610c9f5790505b50905060005b828110156104fc57336001600160a01b0316638f88b767868381518110610ce357610ce36116c7565b60200260200101516040518263ffffffff1660e01b8152600401610d0991815260200190565b600060405180830381865afa158015610d26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4e91908101906116dd565b828281518110610d6057610d606116c7565b60200260200101819052508080610d7690611728565b915050610cba565b80516060908160005b828110156104fc576000858281518110610da357610da36116c7565b6020026020010151604051602001610dbb9190611cf7565b60405160208183030381529060405290508251600003610ddd57809250610e02565b8281604051602001610df0929190611d25565b60405160208183030381529060405292505b5080610e0d81611728565b915050610d87565b6060848484610e25851515610bfa565b6040516020016105f29493929190611d61565b606084846105d485610f68565b805160609080156105005760008167ffffffffffffffff811115610e6b57610e6b611046565b604051908082528060200260200182016040528015610e9e57816020015b6060815260200190600190039081610e895790505b50905060005b828110156104fc57336001600160a01b031663d52fd095868381518110610ecd57610ecd6116c7565b60200260200101516040518263ffffffff1660e01b8152600401610ef391815260200190565b600060405180830381865afa158015610f10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f3891908101906116dd565b828281518110610f4a57610f4a6116c7565b60200260200101819052508080610f6090611728565b915050610ea4565b6060610f858260005b602002015167ffffffffffffffff16610ad9565b610f90836001610f71565b6040516020016108a8929190611e4f565b600060208284031215610fb357600080fd5b5035919050565b60005b83811015610fd5578181015183820152602001610fbd565b50506000910152565b60008151808452610ff6816020860160208601610fba565b601f01601f19169290920160200192915050565b60208152600061101d6020830184610fde565b9392505050565b6000806040838503121561103757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171561108057611080611046565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110af576110af611046565b604052919050565b600082601f8301126110c857600080fd5b6040516040810167ffffffffffffffff82821081831117156110ec576110ec611046565b6040918252829185018681111561110257600080fd5b855b8181101561112b578051838116811461111d5760008081fd5b845260209384019301611104565b50929695505050505050565b600067ffffffffffffffff82111561115157611151611046565b5060051b60200190565b600082601f83011261116c57600080fd5b8151602061118161117c83611137565b611086565b82815260059290921b840181019181810190868411156111a057600080fd5b8286015b848110156111bb57805183529183019183016111a4565b509695505050505050565b600082601f8301126111d757600080fd5b815160206111e761117c83611137565b82815260059290921b8401810191818101908684111561120657600080fd5b8286015b848110156111bb5780516001600160a01b038116811461122a5760008081fd5b835291830191830161120a565b805161ffff8116811461124957600080fd5b919050565b8051801515811461124957600080fd5b600082601f83011261126f57600080fd5b815167ffffffffffffffff81111561128957611289611046565b61129c601f8201601f1916602001611086565b8181528460208386010111156112b157600080fd5b610bf2826020830160208701610fba565b6000602082840312156112d457600080fd5b815167ffffffffffffffff808211156112ec57600080fd5b908301906101e0828603121561130157600080fd5b61130961105c565b8251815261131a86602085016110b7565b602082015261132c86606085016110b7565b604082015260a08301518281111561134357600080fd5b61134f8782860161115b565b60608301525060c08301518281111561136757600080fd5b6113738782860161115b565b60808301525060e08301518281111561138b57600080fd5b6113978782860161115b565b60a08301525061010080840151838111156113b157600080fd5b6113bd888287016111c6565b60c0840152506101208085015160e08401526101406113dd818701611237565b8385015261016092506113f183870161124e565b828501526101809150818601518581111561140b57600080fd5b6114178a82890161125e565b8286015250506101a08501518481111561143057600080fd5b61143c8982880161125e565b83850152506101c085015191508382111561145657600080fd5b6114628883870161125e565b908301525095945050505050565b60008151611482818560208601610fba565b9290920192915050565b7f22746f74616c556e697473223a000000000000000000000000000000000000008152600082516114c481600d850160208701610fba565b600b60fa1b600d939091019283015250600e01919050565b683d913730b6b2911d1160b91b815260008751611500816009850160208c01610fba565b701116113232b9b1b934b83a34b7b7111d1160791b600991840191820152875161153181601a840160208c01610fba565b7f222c22696d616765223a22000000000000000000000000000000000000000000601a9290910191820152865161156f816025840160208b01610fba565b7f222c2265787465726e616c5f75726c223a2200000000000000000000000000006025929091019182015285516115ad816037840160208a01610fba565b7f222c2270726f70657274696573223a7b000000000000000000000000000000006037929091019182015284516115eb816047840160208901610fba565b61160b6115fd60478385010187611470565b617d7d60f01b815260020190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161165181601d850160208701610fba565b91909101601d0192915050565b60006020828403121561167057600080fd5b5051919050565b7f226672616374696f6e223a0000000000000000000000000000000000000000008152600082516116af81600b850160208701610fba565b600b60fa1b600b939091019283015250600c01919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156116ef57600080fd5b815167ffffffffffffffff81111561170657600080fd5b610bf28482850161125e565b634e487b7160e01b600052601160045260246000fd5b60006001820161173a5761173a611712565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015611789578284038952611777848351610fde565b9885019893509084019060010161175f565b5091979650505050505050565b8060005b60028110156117c357815167ffffffffffffffff1684526020938401939091019060010161179a565b50505050565b60e0815260006117dc60e0830188610fde565b82810360208401526117ee8188611741565b9150506117fe6040830186611796565b61180b6080830185611796565b8260c08301529695505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161185381601a850160208701610fba565b91909101601a0192915050565b683d913730b6b2911d1160b91b815260008551611884816009850160208a01610fba565b701116113232b9b1b934b83a34b7b7111d1160791b60099184019182015285516118b581601a840160208a01610fba565b691116113b30b63ab2911d60b11b601a929091019182015284516118e0816024840160208901610fba565b7f2c2269735f696e7472696e736963223a2200000000000000000000000000000060249290910191820152835161191e816035840160208801610fba565b61227d60f01b603592909101918201526037019695505050505050565b7f2273636f7065734f66576f726b223a000000000000000000000000000000000081526000825161197381600f850160208701610fba565b600b60fa1b600f939091019283015250601001919050565b7f2273636f7065734f66496d70616374223a0000000000000000000000000000008152600082516119c3816011850160208701610fba565b600b60fa1b6011939091019283015250601201919050565b7f2274696d654f66576f726b223a000000000000000000000000000000000000008152600082516114c481600d850160208701610fba565b7f2274696d654f66496d70616374223a000000000000000000000000000000000081526000825161197381600f850160208701610fba565b7f22726967687473223a0000000000000000000000000000000000000000000000815260008251611a83816009850160208701610fba565b9190910160090192915050565b60008651611aa2818460208b01610fba565b865190830190611ab6818360208b01610fba565b8651910190611ac9818360208a01610fba565b8551910190611adc818360208901610fba565b8451910190611aef818360208801610fba565b01979650505050505050565b808201808211156103d3576103d3611712565b634e487b7160e01b600052601260045260246000fd5b600082611b3357611b33611b0e565b500490565b6000816000190483118215151615611b5257611b52611712565b500290565b6000610100808352611b6b8184018a610fde565b90508281036020840152611b7f8189611741565b915050611b8f6040830187611796565b611b9c6080830186611796565b60c082019390935260e00152949350505050565b683d913730b6b2911d1160b91b815260008651611bd4816009850160208b01610fba565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528651611c0581601a840160208b01610fba565b691116113b30b63ab2911d60b11b601a92909101918201528551611c30816024840160208a01610fba565b7f2c226d61785f76616c7565223a00000000000000000000000000000000000000602492909101918201528451611c6e816031840160208901610fba565b7f2c2269735f696e7472696e736963223a22000000000000000000000000000000603192909101918201528351611cac816042840160208801610fba565b611cc360428284010161227d60f01b815260020190565b9998505050505050505050565b818103818111156103d3576103d3611712565b600082611cf257611cf2611b0e565b500690565b6000601160f91b8083528351611d14816001860160208801610fba565b600193019283015250600201919050565b60008351611d37818460208801610fba565b600b60fa1b9083019081528351611d55816001840160208801610fba565b01600101949350505050565b683d913730b6b2911d1160b91b815260008551611d85816009850160208a01610fba565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528551611db681601a840160208a01610fba565b7f222c2276616c7565223a5b000000000000000000000000000000000000000000601a92909101918201528451611df4816025840160208901610fba565b7f5d2c2269735f696e7472696e736963223a220000000000000000000000000000602592909101918201528351611e32816037840160208801610fba565b61227d60f01b603792909101918201526039019695505050505050565b612d9160f11b81528251600090611e6d816002850160208801610fba565b6211161160e91b6002918401918201528351611e90816005840160208801610fba565b61225d60f01b6005929091019182015260070194935050505056fe54696d656672616d6520696e20776869636820696d70616374206973207265616c697a656453636f706573206f6620776f726b20656e63617073756c6174656420696e207468697320687970657263657274206672616374696f6e2e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f53636f706573206f6620696d7061637420656e63617073756c6174656420696e207468697320687970657263657274206672616374696f6e2e526967687473206173736f6369617465642077697468206f776e696e67207468652068797065726365727420286672616374696f6e732954696d656672616d6520696e20776869636820776f726b20746f206163686965766520696d7061637420686173206265656e20706572666f726d6564a164736f6c6343000810000a",
  "devdoc": {
    "details": "Hypercertificate metadata creation logic",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4614,
        "contract": "contracts/HyperCertMetadata.sol:HyperCertMetadata",
        "label": "svgGenerator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}