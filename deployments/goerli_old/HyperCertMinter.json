{
  "address": "0xeAd9674689379D939a16E32866C8ec17E2d994aB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConflictingClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateScope",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "InvalidApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidScope",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "from",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "to",
          "type": "uint64"
        }
      ],
      "name": "InvalidTimeframe",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "NonExistentSlot",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "NotERC3525Receiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "NotERC721Receiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlotAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "SlotOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "SlotTokenOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        }
      ],
      "name": "SlotsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ApprovalValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "fractions",
          "type": "uint64[]"
        }
      ],
      "name": "ImpactClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "ImpactScopeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "RightAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_oldSlot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newSlot",
          "type": "uint256"
        }
      ],
      "name": "SlotChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "WorkScopeAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYMBOL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "addImpactScope",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "addRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "addWorkScope",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[2]",
          "name": "workTimeframe_",
          "type": "uint64[2]"
        },
        {
          "internalType": "bytes32[]",
          "name": "workScopes_",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64[2]",
          "name": "impactTimeframe_",
          "type": "uint64[2]"
        },
        {
          "internalType": "bytes32[]",
          "name": "impactScopes_",
          "type": "bytes32[]"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimID",
          "type": "uint256"
        }
      ],
      "name": "getImpactCert",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "claimHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64[2]",
              "name": "workTimeframe",
              "type": "uint64[2]"
            },
            {
              "internalType": "uint64[2]",
              "name": "impactTimeframe",
              "type": "uint64[2]"
            },
            {
              "internalType": "bytes32[]",
              "name": "workScopes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "impactScopes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "rights",
              "type": "bytes32[]"
            },
            {
              "internalType": "address[]",
              "name": "contributors",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "version",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            }
          ],
          "internalType": "struct HyperCertMinter.Claim",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "impactScopes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metadataAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rights",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved_",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metadataGenerator",
          "type": "address"
        }
      ],
      "name": "setMetadataGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "slotByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "slotOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId_",
          "type": "uint256"
        }
      ],
      "name": "slotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "split",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "tokenInSlotByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot_",
          "type": "uint256"
        }
      ],
      "name": "tokenSupplyInSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valueDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "workScopes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "59f3f70cd176e0a49e496a9ef529ab52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConflictingClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateScope\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidScope\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"from\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"to\",\"type\":\"uint64\"}],\"name\":\"InvalidTimeframe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"NonExistentSlot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"NotERC3525Receiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"NotERC721Receiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlotAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"SlotOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SlotTokenOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"SlotsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApprovalValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"fractions\",\"type\":\"uint64[]\"}],\"name\":\"ImpactClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"ImpactScopeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"RightAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_oldSlot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newSlot\",\"type\":\"uint256\"}],\"name\":\"SlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"WorkScopeAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"addImpactScope\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"addRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"addWorkScope\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[2]\",\"name\":\"workTimeframe_\",\"type\":\"uint64[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"workScopes_\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[2]\",\"name\":\"impactTimeframe_\",\"type\":\"uint64[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"impactScopes_\",\"type\":\"bytes32[]\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"}],\"name\":\"getImpactCert\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"claimHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64[2]\",\"name\":\"workTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"impactTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"workScopes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"impactScopes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rights\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"internalType\":\"struct HyperCertMinter.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"impactScopes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rights\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataGenerator\",\"type\":\"address\"}],\"name\":\"setMetadataGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"slotByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"slotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId_\",\"type\":\"uint256\"}],\"name\":\"slotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenInSlotByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"}],\"name\":\"tokenSupplyInSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"workScopes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"bitbeckers, mr_bluesky\",\"events\":{\"ImpactClaimed(uint256,address,uint64[])\":{\"params\":{\"fractions\":\"Units of tokens issued under the hypercert.\",\"id\":\"Id of the claimed impact.\",\"minter\":\"Address of cert minter.\"}},\"ImpactScopeAdded(bytes32,string)\":{\"params\":{\"id\":\"Id of the impact scope.\",\"text\":\"Short text code of the impact scope.\"}},\"RightAdded(bytes32,string)\":{\"params\":{\"id\":\"Id of the right.\",\"text\":\"Short text code of the right.\"}},\"WorkScopeAdded(bytes32,string)\":{\"params\":{\"id\":\"Id of the work scope.\",\"text\":\"Short text code of the work scope.\"}}},\"kind\":\"dev\",\"methods\":{\"addImpactScope(string)\":{\"params\":{\"text\":\"Text representing the impact scope\"},\"returns\":{\"id\":\"Id of the impact scope\"}},\"addRight(string)\":{\"params\":{\"text\":\"Text representing the right\"},\"returns\":{\"id\":\"Id of the right\"}},\"addWorkScope(string)\":{\"params\":{\"text\":\"Text representing the work scope\"},\"returns\":{\"id\":\"Id of the work scope\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"contractURI()\":{\"details\":\"This function SHOULD return the URI for this contract in JSON format, starting with  header `data:application/json;`.  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\",\"returns\":{\"_0\":\"The JSON formatted URI of the current ERC3525 contract\"}},\"getImpactCert(uint256)\":{\"params\":{\"claimID\":\"Id of the claim\"},\"returns\":{\"_0\":\"The claim, if it doesn't exist with default values\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mint(address,bytes)\":{\"params\":{\"account\":\"Account issuing the new hypercertificate\",\"data\":\"Data representing the parameters of the claim\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"slotByIndex(uint256)\":{\"params\":{\"index_\":\"The index in the slot list\"},\"returns\":{\"_0\":\"The slot at `index` of all slots.\"}},\"slotCount()\":{\"returns\":{\"_0\":\"The total amount of slots\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface\"},\"returns\":{\"_0\":\"true, if the interface is supported\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenInSlotByIndex(uint256,uint256)\":{\"params\":{\"index_\":\"The index in the token list of the slot\",\"slot_\":\"The slot to query tokens with\"},\"returns\":{\"_0\":\"The token ID at `_index` of all tokens with `_slot`\"}},\"tokenSupplyInSlot(uint256)\":{\"params\":{\"slot_\":\"The slot to query token supply for\"},\"returns\":{\"_0\":\"The total amount of tokens with the specified `_slot`\"}},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"valueDecimals()\":{\"returns\":{\"_0\":\"The number of decimals for value\"}}},\"title\":\"Hypercertificate minting logic\",\"version\":1},\"userdoc\":{\"events\":{\"ImpactClaimed(uint256,address,uint64[])\":{\"notice\":\"Emitted when an impact is claimed.\"},\"ImpactScopeAdded(bytes32,string)\":{\"notice\":\"Emitted when a new impact scope is added.\"},\"RightAdded(bytes32,string)\":{\"notice\":\"Emitted when a new right is added.\"},\"WorkScopeAdded(bytes32,string)\":{\"notice\":\"Emitted when a new work scope is added.\"}},\"kind\":\"user\",\"methods\":{\"DECIMALS()\":{\"notice\":\"Token value decimals\"},\"NAME()\":{\"notice\":\"Contract name\"},\"SYMBOL()\":{\"notice\":\"Token symbol\"},\"UPGRADER_ROLE()\":{\"notice\":\"User role required in order to upgrade the contract\"},\"addImpactScope(string)\":{\"notice\":\"Adds a new impact scope\"},\"addRight(string)\":{\"notice\":\"Adds a new right\"},\"addWorkScope(string)\":{\"notice\":\"Adds a new work scope\"},\"constructor\":{\"notice\":\"Contract constructor logic\"},\"contractURI()\":{\"notice\":\"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\"},\"getImpactCert(uint256)\":{\"notice\":\"Gets the impact claim with the specified id\"},\"impactScopes(bytes32)\":{\"notice\":\"Mapping of id's to impact-scopes\"},\"initialize(address)\":{\"notice\":\"Contract initialization logic\"},\"mint(address,bytes)\":{\"notice\":\"Issues a new hypercertificate\"},\"rights(bytes32)\":{\"notice\":\"Mapping of id's to rights\"},\"slotByIndex(uint256)\":{\"notice\":\"Get the slot at the specified index of all slots stored by the contract.\"},\"slotCount()\":{\"notice\":\"Get the total amount of slots stored by the contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns a flag indicating if the contract supports the specified interface\"},\"tokenInSlotByIndex(uint256,uint256)\":{\"notice\":\"Get the token at the specified index of all tokens with the same slot.\"},\"tokenSupplyInSlot(uint256)\":{\"notice\":\"Get the total amount of tokens with the same slot.\"},\"updateVersion()\":{\"notice\":\"Update the contract version numberOnly allowed for member of UPGRADER_ROLE\"},\"valueDecimals()\":{\"notice\":\"Get the number of decimals the token uses for value - e.g. 6, means the user  representation of the value of a token can be calculated by dividing it by 1,000,000.  Considering the compatibility with third-party wallets, this function is defined as  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens.\"},\"version()\":{\"notice\":\"gets the current version of the contract\"},\"workScopes(bytes32)\":{\"notice\":\"Mapping of id's to work-scopes\"}},\"notice\":\"Contains functions and events to initialize and issue a hypercertificate\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperCertMinter.sol\":\"HyperCertMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x9a8e2a400966f5e21b7dc105bb7236e5dc986c93b5fc18eafdae08a96e803cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xc0e1ac396ac591a4c38ddcdd220321128eb94424d73e41a573cf58d5c643af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/ERC3525SlotEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Ref: https://raw.githubusercontent.com/solv-finance/erc-3525/main/contracts/ERC3525SlotEnumerableUpgradeable.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC3525Upgradeable.sol\\\";\\nimport \\\"./interfaces/IERC3525SlotEnumerableUpgradeable.sol\\\";\\nerror SlotAlreadyMinted();\\nerror SlotOutOfBounds(uint256 slotId);\\nerror SlotTokenOutOfBounds(uint256 slotId, uint256 tokenId);\\n\\ncontract ERC3525SlotEnumerableUpgradeable is ERC3525Upgradeable {\\n    struct SlotData {\\n        uint256 slot;\\n        uint256[] slotTokens;\\n        // mapping(uint256 => uint256) slotTokensIndex;\\n    }\\n\\n    // slot => tokenId => index\\n    mapping(uint256 => mapping(uint256 => uint256)) private _slotTokensIndex;\\n\\n    SlotData[] private _allSlots;\\n\\n    // slot => index\\n    mapping(uint256 => uint256) private _allSlotsIndex;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC3525SlotEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Get the total amount of slots stored by the contract.\\n     * @return The total amount of slots\\n     */\\n    function slotCount() public view virtual returns (uint256) {\\n        return _allSlots.length;\\n    }\\n\\n    /**\\n     * @notice Get the slot at the specified index of all slots stored by the contract.\\n     * @param index_ The index in the slot list\\n     * @return The slot at `index` of all slots.\\n     */\\n    function slotByIndex(uint256 index_) public view virtual returns (uint256) {\\n        if (index_ >= ERC3525SlotEnumerableUpgradeable.slotCount()) {\\n            revert SlotOutOfBounds(index_);\\n        }\\n        return _allSlots[index_].slot;\\n    }\\n\\n    function _slotExists(uint256 slot_) internal view virtual returns (bool) {\\n        return _allSlots.length != 0 && _allSlots[_allSlotsIndex[slot_]].slot == slot_;\\n    }\\n\\n    /**\\n     * @notice Get the total amount of tokens with the same slot.\\n     * @param slot_ The slot to query token supply for\\n     * @return The total amount of tokens with the specified `_slot`\\n     */\\n    function tokenSupplyInSlot(uint256 slot_) public view virtual returns (uint256) {\\n        if (!_slotExists(slot_)) {\\n            return 0;\\n        }\\n        return _allSlots[_allSlotsIndex[slot_]].slotTokens.length;\\n    }\\n\\n    /**\\n     * @notice Get the token at the specified index of all tokens with the same slot.\\n     * @param slot_ The slot to query tokens with\\n     * @param index_ The index in the token list of the slot\\n     * @return The token ID at `_index` of all tokens with `_slot`\\n     */\\n    function tokenInSlotByIndex(uint256 slot_, uint256 index_) public view virtual returns (uint256) {\\n        if (index_ >= ERC3525SlotEnumerableUpgradeable.tokenSupplyInSlot(slot_)) {\\n            revert SlotTokenOutOfBounds(slot_, index_);\\n        }\\n        return _allSlots[_allSlotsIndex[slot_]].slotTokens[index_];\\n    }\\n\\n    function _tokenExistsInSlot(uint256 slot_, uint256 tokenId_) private view returns (bool) {\\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\\n        return slotData.slotTokens.length > 0 && slotData.slotTokens[_slotTokensIndex[slot_][tokenId_]] == tokenId_;\\n    }\\n\\n    function _createSlot(uint256 slot_) internal virtual {\\n        if (_slotExists(slot_)) {\\n            revert SlotAlreadyMinted();\\n        }\\n        SlotData memory slotData = SlotData({ slot: slot_, slotTokens: new uint256[](0) });\\n        _addSlotToAllSlotsEnumeration(slotData);\\n    }\\n\\n    function _beforeValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_\\n    ) internal virtual override {\\n        if (from_ == address(0) && fromTokenId_ == 0 && !_slotExists(slot_)) {\\n            _createSlot(slot_);\\n        }\\n\\n        //Shh - currently unused\\n        to_;\\n        toTokenId_;\\n        value_;\\n    }\\n\\n    function _afterValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_\\n    ) internal virtual override {\\n        if (from_ == address(0) && fromTokenId_ == 0 && !_tokenExistsInSlot(slot_, toTokenId_)) {\\n            _addTokenToSlotEnumeration(slot_, toTokenId_);\\n        } else if (to_ == address(0) && toTokenId_ == 0 && _tokenExistsInSlot(slot_, fromTokenId_)) {\\n            _removeTokenFromSlotEnumeration(slot_, fromTokenId_);\\n        }\\n\\n        //Shh - currently unused\\n        value_;\\n    }\\n\\n    function _addSlotToAllSlotsEnumeration(SlotData memory slotData) private {\\n        _allSlotsIndex[slotData.slot] = _allSlots.length;\\n        _allSlots.push(slotData);\\n    }\\n\\n    function _addTokenToSlotEnumeration(uint256 slot_, uint256 tokenId_) private {\\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\\n        _slotTokensIndex[slot_][tokenId_] = slotData.slotTokens.length;\\n        slotData.slotTokens.push(tokenId_);\\n    }\\n\\n    function _removeTokenFromSlotEnumeration(uint256 slot_, uint256 tokenId_) private {\\n        SlotData storage slotData = _allSlots[_allSlotsIndex[slot_]];\\n        uint256 lastTokenIndex = slotData.slotTokens.length - 1;\\n        uint256 lastTokenId = slotData.slotTokens[lastTokenIndex];\\n        uint256 tokenIndex = _slotTokensIndex[slot_][tokenId_];\\n        \\n        slotData.slotTokens[tokenIndex] = lastTokenId;\\n        _slotTokensIndex[slot_][lastTokenId] = tokenIndex;\\n\\n        delete _slotTokensIndex[slot_][tokenId_];\\n        slotData.slotTokens.pop();\\n    }\\n\\n    //TODO cleanup inheritance\\n    function valueDecimals() external view virtual override returns (uint8) {}\\n\\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {}\\n\\n    function slotURI(uint256 _slot) external view virtual override returns (string memory) {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x9afa6ed960b4f4411b4ee5ac62e0e208ed34f6920cfbba593c5b88a4f97c6da0\",\"license\":\"MIT\"},\"contracts/ERC3525Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC3525MetadataUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC3525Receiver.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nerror NonExistentToken(uint256 tokenId);\\nerror NonExistentSlot(uint256 slotId);\\nerror InsufficientBalance(uint256 transferAmount, uint256 balance);\\nerror InsufficientAllowance(uint256 transferAmount, uint256 allowance);\\nerror ToZeroAddress();\\nerror InvalidID(uint256 tokenId);\\nerror AlreadyMinted(uint256 tokenId);\\nerror SlotsMismatch(uint256 fromTokenId, uint256 toTokenId);\\nerror InvalidApproval(uint256 tokenId, address from, address to);\\nerror NotApprovedOrOwner();\\nerror NotERC3525Receiver(address receiver);\\nerror NotERC721Receiver(address receiver);\\nerror FromIncorrectOwner();\\n\\nabstract contract ERC3525Upgradeable is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IERC721EnumerableUpgradeable,\\n    IERC3525MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    struct TokenData {\\n        uint256 id;\\n        uint256 slot;\\n        uint256 balance;\\n        address owner;\\n        address approved;\\n        address[] valueApprovals;\\n    }\\n\\n    struct AddressData {\\n        uint256[] ownedTokens;\\n        mapping(uint256 => uint256) ownedTokensIndex;\\n        mapping(address => bool) approvals;\\n    }\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /// @dev tokenId => operator => units\\n    mapping(uint256 => mapping(address => uint256)) private _approvedValues;\\n    TokenData[] private _allTokens;\\n\\n    //key: id\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n    mapping(address => AddressData) private _addressData;\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC3525Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC3525MetadataUpgradeable).interfaceId ||\\n            interfaceId == type(IERC721EnumerableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /*******************\\n     * VIEWS\\n     ******************/\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n        return _allTokens[_allTokensIndex[tokenId_]].balance;\\n    }\\n\\n    function balanceOf(address owner_) public view virtual override returns (uint256 balance) {\\n        if (owner_ == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        return _addressData[owner_].ownedTokens.length;\\n    }\\n\\n    // ERC721 Compatible\\n    function ownerOf(uint256 tokenId_) public view virtual override returns (address owner_) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n        owner_ = _allTokens[_allTokensIndex[tokenId_]].owner;\\n        if (owner_ == address(0)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n    }\\n\\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n        return _allTokens[_allTokensIndex[tokenId_]].slot;\\n    }\\n\\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\\n        return _approvedValues[tokenId_][operator_];\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index_) public view virtual override returns (uint256) {\\n        if (index_ >= ERC3525Upgradeable.totalSupply()) {\\n            revert InvalidID(index_);\\n        }\\n        return _allTokens[index_].id;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner_, uint256 index_) public view virtual override returns (uint256) {\\n        if (index_ >= ERC3525Upgradeable.balanceOf(owner_)) {\\n            revert InvalidID(index_);\\n        }\\n        return _addressData[owner_].ownedTokens[index_];\\n    }\\n\\n    function _isApprovedOrOwner(address operator_, uint256 tokenId_) internal view virtual returns (bool) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\\n        return (operator_ == owner ||\\n            ERC3525Upgradeable.isApprovedForAll(owner, operator_) ||\\n            ERC3525Upgradeable.getApproved(tokenId_) == operator_);\\n    }\\n\\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\\n        return _allTokens.length != 0 && _allTokens[_allTokensIndex[tokenId_]].id == tokenId_;\\n    }\\n\\n    /*******************\\n     * APPROVALS\\n     ******************/\\n\\n    function approve(\\n        uint256 tokenId_,\\n        address to_,\\n        uint256 value_\\n    ) external payable virtual override(IERC3525Upgradeable) {\\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\\n        if (to_ == owner) {\\n            revert InvalidApproval(tokenId_, to_, owner);\\n        }\\n\\n        if (!ERC3525Upgradeable._isApprovedOrOwner(_msgSender(), tokenId_)) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        _approveValue(tokenId_, to_, value_);\\n    }\\n\\n    function approve(address to_, uint256 tokenId_) public virtual override {\\n        address owner = ERC3525Upgradeable.ownerOf(tokenId_);\\n        if (to_ == owner) {\\n            revert InvalidApproval(tokenId_, msg.sender, to_);\\n        }\\n        if (!ERC3525Upgradeable._isApprovedOrOwner(_msgSender(), tokenId_)) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        _approve(to_, tokenId_);\\n    }\\n\\n    function getApproved(uint256 tokenId_) public view virtual override returns (address) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n\\n        return _allTokens[_allTokensIndex[tokenId_]].approved;\\n    }\\n\\n    function setApprovalForAll(address operator_, bool approved_) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator_, approved_);\\n    }\\n\\n    function isApprovedForAll(address owner_, address operator_) public view virtual override returns (bool) {\\n        return _addressData[owner_].approvals[operator_];\\n    }\\n\\n    /*******************\\n     * TRANSFERS\\n     ******************/\\n\\n    function transferFrom(\\n        uint256 fromTokenId_,\\n        address to_,\\n        uint256 value_\\n    ) public payable virtual override returns (uint256) {\\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\\n\\n        uint256 newTokenId = _createDerivedTokenId(fromTokenId_);\\n        _mint(to_, newTokenId, ERC3525Upgradeable.slotOf(fromTokenId_));\\n        _transferValue(fromTokenId_, newTokenId, value_);\\n\\n        return newTokenId;\\n    }\\n\\n    function transferFrom(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_\\n    ) public payable virtual override {\\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\\n\\n        _transferValue(fromTokenId_, toTokenId_, value_);\\n    }\\n\\n    function transferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) public virtual override {\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId_)) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        _transferTokenId(from_, to_, tokenId_);\\n    }\\n\\n    function safeTransferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) public virtual override {\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId_)) {\\n            revert NotApprovedOrOwner();\\n        }\\n        _safeTransferTokenId(from_, to_, tokenId_, data_);\\n    }\\n\\n    function safeTransferFrom(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) public virtual override {\\n        safeTransferFrom(from_, to_, tokenId_, \\\"\\\");\\n    }\\n\\n    function contractURI() public view virtual override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;{\\\",\\n                    '\\\"name\\\":',\\n                    name(),\\n                    \\\",\\\"\\n                    '\\\"symbol\\\":',\\n                    symbol(),\\n                    \\\"}\\\"\\n                )\\n            );\\n    }\\n\\n    /*******************\\n     * INTERNAL\\n     ******************/\\n\\n    /*******************\\n     * MINT AND BURN\\n     ******************/\\n\\n    function _mint(\\n        address to_,\\n        uint256 tokenId_,\\n        uint256 slot_\\n    ) internal {\\n        TokenData memory tokenData = TokenData({\\n            id: tokenId_,\\n            slot: slot_,\\n            balance: 0,\\n            owner: to_,\\n            approved: address(0),\\n            valueApprovals: new address[](0)\\n        });\\n\\n        _addTokenToAllTokensEnumeration(tokenData);\\n        _addTokenToOwnerEnumeration(to_, tokenId_);\\n\\n        emit Transfer(address(0), to_, tokenId_);\\n        emit SlotChanged(tokenId_, 0, slot_);\\n    }\\n\\n    function _mintValue(\\n        address to_,\\n        uint256 slot_,\\n        uint256 value_\\n    ) internal virtual returns (uint256 tokenId) {\\n        tokenId = _createOriginalTokenId();\\n\\n        if (to_ == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        if (tokenId == 0) {\\n            revert InvalidID(tokenId);\\n        }\\n        if (_exists(tokenId)) {\\n            revert AlreadyMinted(tokenId);\\n        }\\n\\n        _beforeValueTransfer(address(0), to_, 0, tokenId, slot_, value_);\\n\\n        _mint(to_, tokenId, slot_);\\n        _allTokens[_allTokensIndex[tokenId]].balance = value_;\\n\\n        emit TransferValue(0, tokenId, value_);\\n\\n        _afterValueTransfer(address(0), to_, 0, tokenId, slot_, value_);\\n\\n        return tokenId;\\n    }\\n\\n    function _splitValue(uint256 fromToken_, uint256 value_) internal virtual returns (uint256 tokenId) {\\n        tokenId = _createOriginalTokenId();\\n        address to_ = _msgSender();\\n        // address from_ = _msgSender();\\n        uint256 slot_ = slotOf(fromToken_);\\n\\n        if (to_ == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        if (tokenId == 0) {\\n            revert InvalidID(tokenId);\\n        }\\n        if (_exists(tokenId)) {\\n            revert AlreadyMinted(tokenId);\\n        }\\n\\n        _beforeValueTransfer(address(0), to_, 0, tokenId, slot_, value_);\\n\\n        _mint(to_, tokenId, slot_);\\n        _allTokens[_allTokensIndex[tokenId]].balance = value_;\\n        _allTokens[_allTokensIndex[fromToken_]].balance -= value_;\\n\\n        emit TransferValue(fromToken_, tokenId, value_);\\n\\n        _afterValueTransfer(address(0), to_, 0, tokenId, slot_, value_);\\n\\n        return tokenId;\\n    }\\n\\n    function _mergeValue(uint256 fromToken_, uint256 toToken_) internal virtual returns (uint256 tokenId) {\\n        address to_ = ERC3525Upgradeable.ownerOf(toToken_);\\n        address from_ = _msgSender();\\n        uint256 slotFrom_ = slotOf(fromToken_);\\n        uint256 slotTo_ = slotOf(toToken_);\\n        uint256 value_ = balanceOf(fromToken_);\\n\\n        if (to_ == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        if (fromToken_ == 0 || toToken_ == 0) {\\n            revert InvalidID(tokenId);\\n        }\\n        if (_exists(tokenId)) {\\n            revert AlreadyMinted(tokenId);\\n        }\\n        if (slotFrom_ != slotTo_) {\\n            revert SlotsMismatch(slotFrom_, slotTo_);\\n        }\\n\\n        _beforeValueTransfer(from_, to_, fromToken_, toToken_, slotTo_, value_);\\n\\n        _allTokens[_allTokensIndex[toToken_]].balance += value_;\\n        _allTokens[_allTokensIndex[fromToken_]].balance -= value_;\\n\\n        emit TransferValue(fromToken_, toToken_, value_);\\n\\n        _afterValueTransfer(from_, to_, fromToken_, toToken_, slotTo_, value_);\\n\\n        return tokenId;\\n    }\\n\\n    function _burn(uint256 tokenId_) internal virtual {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n\\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\\n        address owner = tokenData.owner;\\n\\n        if (msg.sender != owner) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        uint256 slot = tokenData.slot;\\n        uint256 value = tokenData.balance;\\n\\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\\n\\n        _clearApprovedValues(tokenId_);\\n        _removeTokenFromOwnerEnumeration(owner, tokenId_);\\n        _removeTokenFromAllTokensEnumeration(tokenId_);\\n\\n        emit TransferValue(tokenId_, 0, value);\\n        emit Transfer(owner, address(0), tokenId_);\\n        emit SlotChanged(tokenId_, slot, 0);\\n\\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\\n    }\\n\\n    /*******************\\n     * ALLOWANCES\\n     ******************/\\n\\n    function _approve(address to_, uint256 tokenId_) internal virtual {\\n        _allTokens[_allTokensIndex[tokenId_]].approved = to_;\\n        emit Approval(ERC3525Upgradeable.ownerOf(tokenId_), to_, tokenId_);\\n    }\\n\\n    function _approveValue(\\n        uint256 tokenId_,\\n        address to_,\\n        uint256 value_\\n    ) internal virtual {\\n        if (!_existApproveValue(to_, tokenId_)) {\\n            _allTokens[_allTokensIndex[tokenId_]].valueApprovals.push(to_);\\n        }\\n        _approvedValues[tokenId_][to_] = value_;\\n\\n        emit ApprovalValue(tokenId_, to_, value_);\\n    }\\n\\n    function _spendAllowance(\\n        address operator_,\\n        uint256 tokenId_,\\n        uint256 value_\\n    ) internal virtual {\\n        uint256 currentAllowance = ERC3525Upgradeable.allowance(tokenId_, operator_);\\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value_) {\\n                revert InsufficientAllowance(value_, currentAllowance);\\n            }\\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\\n        }\\n    }\\n\\n    function _clearApprovedValues(uint256 tokenId_) internal virtual {\\n        TokenData storage tokenData = _allTokens[_allTokensIndex[tokenId_]];\\n        uint256 length = tokenData.valueApprovals.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address approval = tokenData.valueApprovals[i];\\n            delete _approvedValues[tokenId_][approval];\\n        }\\n    }\\n\\n    function _existApproveValue(address to_, uint256 tokenId_) internal view virtual returns (bool) {\\n        uint256 length = _allTokens[_allTokensIndex[tokenId_]].valueApprovals.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_allTokens[_allTokensIndex[tokenId_]].valueApprovals[i] == to_) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner_,\\n        address operator_,\\n        bool approved_\\n    ) internal virtual {\\n        if (owner_ == operator_) {\\n            revert InvalidApproval(0, owner_, operator_);\\n        }\\n\\n        _addressData[owner_].approvals[operator_] = approved_;\\n\\n        emit ApprovalForAll(owner_, operator_, approved_);\\n    }\\n\\n    /*******************\\n     * TRANSFERS\\n     ******************/\\n\\n    function _transferValue(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_\\n    ) internal virtual {\\n        if (!_exists(fromTokenId_)) {\\n            revert NonExistentToken(fromTokenId_);\\n        }\\n        if (!_exists(toTokenId_)) {\\n            revert NonExistentToken(toTokenId_);\\n        }\\n\\n        TokenData storage fromTokenData = _allTokens[_allTokensIndex[fromTokenId_]];\\n        TokenData storage toTokenData = _allTokens[_allTokensIndex[toTokenId_]];\\n\\n        if (fromTokenData.balance < value_) {\\n            revert InsufficientBalance(value_, fromTokenData.balance);\\n        }\\n        if (fromTokenData.slot != toTokenData.slot) {\\n            revert SlotsMismatch(fromTokenData.slot, toTokenData.slot);\\n        }\\n\\n        _beforeValueTransfer(\\n            fromTokenData.owner,\\n            toTokenData.owner,\\n            fromTokenId_,\\n            toTokenId_,\\n            fromTokenData.slot,\\n            value_\\n        );\\n\\n        fromTokenData.balance -= value_;\\n        toTokenData.balance += value_;\\n\\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\\n\\n        _afterValueTransfer(\\n            fromTokenData.owner,\\n            toTokenData.owner,\\n            fromTokenId_,\\n            toTokenId_,\\n            fromTokenData.slot,\\n            value_\\n        );\\n\\n        if (!_checkOnERC3525Received(fromTokenId_, toTokenId_, value_, \\\"\\\")) {\\n            revert NotERC3525Receiver(ownerOf(toTokenId_));\\n        }\\n    }\\n\\n    function _transferTokenId(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_\\n    ) internal virtual {\\n        if (ownerOf(tokenId_) != from_) {\\n            revert NotApprovedOrOwner();\\n        }\\n        if (to_ == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n\\n        _beforeValueTransfer(from_, to_, tokenId_, tokenId_, slotOf(tokenId_), balanceOf(tokenId_));\\n\\n        _approve(address(0), tokenId_);\\n        _clearApprovedValues(tokenId_);\\n\\n        _removeTokenFromOwnerEnumeration(from_, tokenId_);\\n        _addTokenToOwnerEnumeration(to_, tokenId_);\\n\\n        emit Transfer(from_, to_, tokenId_);\\n\\n        _afterValueTransfer(from_, to_, tokenId_, tokenId_, slotOf(tokenId_), balanceOf(tokenId_));\\n    }\\n\\n    function _safeTransferTokenId(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) internal virtual {\\n        _transferTokenId(from_, to_, tokenId_);\\n        require(_checkOnERC721Received(from_, to_, tokenId_, data_), \\\"ERC3525: transfer to non ERC721Receiver\\\");\\n    }\\n\\n    function _beforeValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_ // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {\\n        // empty block\\n    }\\n\\n    function _afterValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_ // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {\\n        // empty block\\n    }\\n\\n    function _checkOnERC3525Received(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_,\\n        bytes memory data_\\n    ) private returns (bool) {\\n        address to = ownerOf((toTokenId_));\\n        if (to.isContract() && IERC165Upgradeable(to).supportsInterface(type(IERC3525Receiver).interfaceId)) {\\n            try IERC3525Receiver(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC3525Receiver.onERC3525Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert NotERC3525Receiver(to);\\n                } else {\\n                    // solhint-disable-next-line\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        bytes memory data_\\n    ) private returns (bool) {\\n        if (\\n            to_.isContract() && IERC165Upgradeable(to_).supportsInterface(type(IERC721ReceiverUpgradeable).interfaceId)\\n        ) {\\n            try IERC721ReceiverUpgradeable(to_).onERC721Received(_msgSender(), from_, tokenId_, data_) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert NotERC721Receiver(to_);\\n                } else {\\n                    // solhint-disable-next-line\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /*******************\\n     * TOKEN IDs\\n     ******************/\\n\\n    function _createOriginalTokenId() internal virtual returns (uint256) {\\n        return _createDefaultTokenId();\\n    }\\n\\n    function _createDerivedTokenId(uint256 fromTokenId_) internal virtual returns (uint256) {\\n        fromTokenId_;\\n        return _createDefaultTokenId();\\n    }\\n\\n    function _createDefaultTokenId() private view returns (uint256) {\\n        return totalSupply() + 1;\\n    }\\n\\n    /*******************\\n     * ENUMERATIONS\\n     ******************/\\n\\n    function _addTokenToOwnerEnumeration(address to_, uint256 tokenId_) private {\\n        _allTokens[_allTokensIndex[tokenId_]].owner = to_;\\n\\n        _addressData[to_].ownedTokensIndex[tokenId_] = _addressData[to_].ownedTokens.length;\\n        _addressData[to_].ownedTokens.push(tokenId_);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from_, uint256 tokenId_) private {\\n        _allTokens[_allTokensIndex[tokenId_]].owner = address(0);\\n\\n        AddressData storage ownerData = _addressData[from_];\\n        uint256 lastTokenIndex = ownerData.ownedTokens.length - 1;\\n        uint256 lastTokenId = ownerData.ownedTokens[lastTokenIndex];\\n        uint256 tokenIndex = ownerData.ownedTokensIndex[tokenId_];\\n\\n        ownerData.ownedTokens[tokenIndex] = lastTokenId;\\n        ownerData.ownedTokensIndex[lastTokenId] = tokenIndex;\\n\\n        delete ownerData.ownedTokensIndex[tokenId_];\\n\\n        ownerData.ownedTokens.pop();\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(TokenData memory tokenData_) private {\\n        _allTokensIndex[tokenData_.id] = _allTokens.length;\\n        _allTokens.push(tokenData_);\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId_) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId_];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        TokenData memory lastTokenData = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenData; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenData.id] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId_];\\n        _allTokens.pop();\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x238ad8d335be4b94afd4c29e2b43574ed8a542ee3b9f40cb3b3ae5f0faa1442c\",\"license\":\"UNLICENSED\"},\"contracts/HyperCertMinter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./ERC3525SlotEnumerableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IHyperCertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nerror EmptyInput();\\nerror DuplicateScope();\\nerror InvalidScope();\\nerror InvalidTimeframe(uint64 from, uint64 to);\\nerror ConflictingClaim();\\nerror InvalidInput();\\n\\n/// @title Hypercertificate minting logic\\n/// @notice Contains functions and events to initialize and issue a hypercertificate\\n/// @author bitbeckers, mr_bluesky\\ncontract HyperCertMinter is Initializable, ERC3525SlotEnumerableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {\\n    using ArraysUpgradeable for uint64[];\\n\\n    /// @notice Contract name\\n    string public constant NAME = \\\"HyperCerts\\\";\\n    /// @notice Token symbol\\n    string public constant SYMBOL = \\\"HCRT\\\";\\n    /// @notice Token value decimals\\n    uint8 public constant DECIMALS = 0;\\n    /// @notice User role required in order to upgrade the contract\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    /// @notice Current version of the contract\\n    uint16 internal _version;\\n    /// @notice Hypercert metadata contract\\n    IHyperCertMetadata internal _metadata;\\n\\n    /// @notice Mapping of id's to work-scopes\\n    mapping(bytes32 => string) public workScopes;\\n    /// @notice Mapping of id's to impact-scopes\\n    mapping(bytes32 => string) public impactScopes;\\n    /// @notice Mapping of id's to rights\\n    mapping(bytes32 => string) public rights;\\n    mapping(address => mapping(bytes32 => bool)) internal _contributorImpacts;\\n    mapping(uint256 => Claim) internal _hyperCerts;\\n\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n        address minter;\\n    }\\n\\n    /*******************\\n     * EVENTS\\n     ******************/\\n\\n    /// @notice Emitted when an impact is claimed.\\n    /// @param id Id of the claimed impact.\\n    /// @param minter Address of cert minter.\\n    /// @param fractions Units of tokens issued under the hypercert.\\n    event ImpactClaimed(uint256 id, address minter, uint64[] fractions);\\n\\n    /// @notice Emitted when a new impact scope is added.\\n    /// @param id Id of the impact scope.\\n    /// @param text Short text code of the impact scope.\\n    event ImpactScopeAdded(bytes32 id, string text);\\n\\n    /// @notice Emitted when a new right is added.\\n    /// @param id Id of the right.\\n    /// @param text Short text code of the right.\\n    event RightAdded(bytes32 id, string text);\\n\\n    /// @notice Emitted when a new work scope is added.\\n    /// @param id Id of the work scope.\\n    /// @param text Short text code of the work scope.\\n    event WorkScopeAdded(bytes32 id, string text);\\n\\n    /*******************\\n     * DEPLOY\\n     ******************/\\n\\n    /// @notice Contract constructor logic\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract initialization logic\\n    function initialize(address metadataAddress) public initializer {\\n        _metadata = IHyperCertMetadata(metadataAddress);\\n\\n        // __ERC721Burnable_init();\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    /*******************\\n     * PUBLIC\\n     ******************/\\n\\n    /// @notice Adds a new impact scope\\n    /// @param text Text representing the impact scope\\n    /// @return id Id of the impact scope\\n    function addImpactScope(string memory text) public returns (bytes32 id) {\\n        id = _authorizeAdd(text, impactScopes);\\n        impactScopes[id] = text;\\n        emit ImpactScopeAdded(id, text);\\n    }\\n\\n    /// @notice Adds a new right\\n    /// @param text Text representing the right\\n    /// @return id Id of the right\\n    function addRight(string memory text) public returns (bytes32 id) {\\n        id = _authorizeAdd(text, rights);\\n        rights[id] = text;\\n        emit RightAdded(id, text);\\n    }\\n\\n    /// @notice Adds a new work scope\\n    /// @param text Text representing the work scope\\n    /// @return id Id of the work scope\\n    function addWorkScope(string memory text) public returns (bytes32 id) {\\n        id = _authorizeAdd(text, workScopes);\\n        workScopes[id] = text;\\n        emit WorkScopeAdded(id, text);\\n    }\\n\\n    /// @notice Issues a new hypercertificate\\n    /// @param account Account issuing the new hypercertificate\\n    /// @param data Data representing the parameters of the claim\\n    function mint(address account, bytes calldata data) public virtual {\\n        // Parse data to get Claim\\n        (Claim memory claim, uint64[] memory fractions) = _parseData(data);\\n        claim.minter = msg.sender;\\n\\n        _authorizeMint(account, claim);\\n\\n        // Check on overlapping contributor-claims and store if success\\n        _storeContributorsClaims(claim.claimHash, claim.contributors);\\n\\n        uint256 slot = slotCount() + 1;\\n        // Store impact cert\\n        _hyperCerts[slot] = claim;\\n\\n        // Mint impact cert\\n        uint256 len = fractions.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _mintValue(account, slot, fractions[i]);\\n        }\\n\\n        emit ImpactClaimed(slot, account, fractions);\\n    }\\n\\n    function split(uint256 tokenId, uint256[] calldata amounts) public {\\n        if (!_exists(tokenId)) revert NonExistentToken(tokenId);\\n\\n        uint256 total;\\n\\n        uint256 amountsLength = amounts.length;\\n        if (amounts.length == 1) revert AlreadyMinted(tokenId);\\n\\n        for (uint256 i; i < amountsLength; i++) {\\n            total += amounts[i];\\n        }\\n\\n        if (total > balanceOf(tokenId) || total < balanceOf(tokenId)) revert InvalidInput();\\n\\n        uint256 len = amounts.length;\\n        for (uint256 i = 1; i < len; i++) {\\n            _splitValue(tokenId, amounts[i]);\\n        }\\n    }\\n\\n    function merge(uint256[] memory tokenIds) public {\\n        uint256 len = tokenIds.length;\\n        uint256 targetTokenId = tokenIds[len - 1];\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            if (tokenId != targetTokenId) {\\n                _mergeValue(tokenId, targetTokenId);\\n                _burn(tokenId);\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the impact claim with the specified id\\n    /// @param claimID Id of the claim\\n    /// @return The claim, if it doesn't exist with default values\\n    function getImpactCert(uint256 claimID) public view returns (Claim memory) {\\n        return _hyperCerts[claimID];\\n    }\\n\\n    /// @notice gets the current version of the contract\\n    function version() public view virtual returns (uint256) {\\n        return _version;\\n    }\\n\\n    /// @notice Update the contract version number\\n    /// @notice Only allowed for member of UPGRADER_ROLE\\n    function updateVersion() external onlyRole(UPGRADER_ROLE) {\\n        _version += 1;\\n    }\\n\\n    /// @notice Returns a flag indicating if the contract supports the specified interface\\n    /// @param interfaceId Id of the interface\\n    /// @return true, if the interface is supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC3525SlotEnumerableUpgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function valueDecimals() public view virtual override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function getHash(\\n        uint64[2] memory workTimeframe_,\\n        bytes32[] memory workScopes_,\\n        uint64[2] memory impactTimeframe_,\\n        bytes32[] memory impactScopes_\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(workTimeframe_, workScopes_, impactTimeframe_, impactScopes_));\\n    }\\n\\n    function slotURI(uint256 slotId_) external view override returns (string memory) {\\n        if (!_hyperCerts[slotId_].exists) {\\n            revert NonExistentSlot(slotId_);\\n        }\\n        return _metadata.generateSlotURI(slotId_);\\n    }\\n\\n    function tokenURI(uint256 tokenId_) public view override returns (string memory) {\\n        return _metadata.generateTokenURI(slotOf(tokenId_), tokenId_);\\n    }\\n\\n    function contractURI() public view override returns (string memory) {\\n        return _metadata.generateContractURI();\\n    }\\n\\n    function burn(uint256 tokenId_) public {\\n        Claim storage claim = _hyperCerts[slotOf(tokenId_)];\\n        if (msg.sender != claim.minter) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        if (balanceOf(tokenId_) != claim.totalUnits) {\\n            revert InsufficientBalance(claim.totalUnits, balanceOf(tokenId_));\\n        }\\n\\n        _burn(tokenId_);\\n        claim.exists = false;\\n    }\\n\\n    function donate(uint256 tokenId_) public {\\n        if (msg.sender == ownerOf(tokenId_)) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        _burn(tokenId_);\\n    }\\n\\n    /*******************\\n     * INTERNAL\\n     ******************/\\n\\n    /// @notice upgrade authorization logic\\n    /// @dev adds onlyRole(UPGRADER_ROLE) requirement\\n    function _authorizeUpgrade(\\n        address /*newImplementation*/\\n    )\\n        internal\\n        view\\n        override\\n        onlyRole(UPGRADER_ROLE) // solhint-disable-next-line no-empty-blocks\\n    {\\n        //empty block\\n    }\\n\\n    /// @notice Pre-add validation checks\\n    /// @param text Text to be added\\n    /// @param map Storage mapping that will be appended\\n    function _authorizeAdd(string memory text, mapping(bytes32 => string) storage map)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32 id)\\n    {\\n        if (bytes(text).length == 0) {\\n            revert EmptyInput();\\n        }\\n        id = keccak256(abi.encode(text));\\n        if (_hasKey(map, id)) {\\n            revert DuplicateScope();\\n        }\\n    }\\n\\n    /// @notice Pre-mint validation checks\\n    /// @param account Destination address for the mint\\n    /// @param claim Impact claim data\\n    /* solhint-disable code-complexity */\\n\\n    function _authorizeMint(address account, Claim memory claim) internal view virtual {\\n        if (account == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        if (claim.workTimeframe[0] > claim.workTimeframe[1]) {\\n            revert InvalidTimeframe(claim.workTimeframe[0], claim.workTimeframe[1]);\\n        }\\n        if (claim.impactTimeframe[0] > claim.impactTimeframe[1]) {\\n            revert InvalidTimeframe(claim.impactTimeframe[0], claim.impactTimeframe[1]);\\n        }\\n        if (claim.workTimeframe[0] > claim.impactTimeframe[0]) {\\n            revert InvalidTimeframe(claim.workTimeframe[0], claim.impactTimeframe[0]);\\n        }\\n\\n        uint256 impactScopelength = claim.impactScopes.length;\\n        for (uint256 i = 0; i < impactScopelength; i++) {\\n            if (bytes(impactScopes[claim.impactScopes[i]]).length == 0) {\\n                revert InvalidScope();\\n            }\\n        }\\n\\n        uint256 workScopelength = claim.workScopes.length;\\n        for (uint256 i = 0; i < workScopelength; i++) {\\n            if (!_hasKey(workScopes, claim.workScopes[i])) {\\n                revert InvalidScope();\\n            }\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n\\n    /// @notice Parse bytes to Claim and URI\\n    /// @param data Byte data representing the claim\\n    /// @dev This function is overridable in order to support future schema changes\\n    /// @return claim The parsed Claim struct\\n    /// @return Claim metadata URI\\n    function _parseData(bytes calldata data) internal pure virtual returns (Claim memory claim, uint64[] memory) {\\n        if (data.length == 0) {\\n            revert EmptyInput();\\n        }\\n\\n        (\\n            bytes32[] memory rights_,\\n            bytes32[] memory workScopes_,\\n            bytes32[] memory impactScopes_,\\n            uint64[2] memory workTimeframe,\\n            uint64[2] memory impactTimeframe,\\n            address[] memory contributors,\\n            string memory name_,\\n            string memory description_,\\n            string memory uri_,\\n            uint64[] memory fractions\\n        ) = abi.decode(\\n                data,\\n                (bytes32[], bytes32[], bytes32[], uint64[2], uint64[2], address[], string, string, string, uint64[])\\n            );\\n\\n        claim.claimHash = getHash(workTimeframe, workScopes_, impactTimeframe, impactScopes_);\\n        claim.contributors = contributors;\\n        claim.workTimeframe = workTimeframe;\\n        claim.impactTimeframe = impactTimeframe;\\n        claim.workScopes = workScopes_;\\n        claim.impactScopes = impactScopes_;\\n        claim.rights = rights_;\\n        claim.totalUnits = fractions.getSum();\\n        claim.version = uint16(0);\\n        claim.exists = true;\\n        claim.name = name_;\\n        claim.description = description_;\\n        claim.uri = uri_;\\n\\n        return (claim, fractions);\\n    }\\n\\n    /// @notice Stores contributor claims in the `contributorImpacts` mapping; guards against overlapping claims\\n    /// @param claimHash Claim data hash-code value\\n    /// @param creators Array of addresses for contributors\\n    function _storeContributorsClaims(bytes32 claimHash, address[] memory creators) internal {\\n        for (uint256 i = 0; i < creators.length; i++) {\\n            if (_contributorImpacts[creators[i]][claimHash]) {\\n                revert ConflictingClaim();\\n            }\\n            _contributorImpacts[creators[i]][claimHash] = true;\\n        }\\n    }\\n\\n    /// @notice Checks whether the supplied mapping contains the supplied key\\n    /// @param map mapping to search\\n    /// @param key key to search\\n    /// @return true, if the key exists in the mapping\\n    function _hasKey(mapping(bytes32 => string) storage map, bytes32 key) internal view returns (bool) {\\n        return (bytes(map[key]).length > 0);\\n    }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, ERC3525Upgradeable) returns (address sender) {\\n        return msg.sender;\\n    }\\n\\n    function setMetadataGenerator(address metadataGenerator) external onlyRole(UPGRADER_ROLE) {\\n        if (metadataGenerator == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        _metadata = IHyperCertMetadata(metadataGenerator);\\n    }\\n}\\n\",\"keccak256\":\"0xebe6eb6ce7abb91ac315dc7b85497e0c0f2f69251d074b668d6889dc7849f7b4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC3525Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\\n *  (URI) for the ERC3525 contract as well as a specified slot.\\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\\n *  to any resource stored in a centralized system.\\n *  See https://eips.ethereum.org/EIPS/eip-3525\\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\\n */\\ninterface IERC3525MetadataUpgradeable is IERC3525Upgradeable, IERC721MetadataUpgradeable {\\n    /**\\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\\n     *  header `data:application/json;`.\\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\\n     * @return The JSON formatted URI of the current ERC3525 contract\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\\n     *  `data:application/json;`.\\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\\n     * @return The JSON formatted URI of `_slot`\\n     */\\n    function slotURI(uint256 _slot) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xab24377dec100bbfb8eda8ae3e8030aada3097e42f4061853ecc81b330af94ff\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-3525 token receiver interface\\n * @dev Interface for any contract that wants to be informed by EIP-3525 contracts when receiving values from other\\n *      addresses.\\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\\n */\\ninterface IERC3525Receiver {\\n    /**\\n     * @notice Handle the receipt of an EIP-3525 token value.\\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the\\n     *  recipient contract implements this function, the EIP-3525 contract MUST call this function after a\\n     *  value transfer (i.e. `transferFrom(uint256,uint256,uint256,bytes)`).\\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\\n     *  uint256,bytes)'))`) if the transfer is accepted.\\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\\n     *  The EIP-3525 smart contract that calls this function MUST revert the transfer transaction if the return value\\n     *  is not equal to 0x009ce20b.\\n     * @param _operator The address which triggered the transfer\\n     * @param _fromTokenId The token id to transfer value from\\n     * @param _toTokenId The token id to transfer value to\\n     * @param _value The transferred value\\n     * @param _data Additional data with no specified format\\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))`\\n     *  unless the transfer is rejected.\\n     */\\n    function onERC3525Received(\\n        address _operator,\\n        uint256 _fromTokenId,\\n        uint256 _toTokenId,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7ccb546405ab096944efb2f21a5b5cf75b22ea8250cf07f9c05d70508a19ca67\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525SlotEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC3525Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @title EIP-3525 Semi-Fungible Token Standard, optional extension for slot enumeration\\n * @dev Interfaces for any contract that wants to support enumeration of slots as well as tokens\\n *  with the same slot.\\n * Note: the EIP-165 identifier for this interface is 0x3b741b9e.\\n */\\ninterface IERC3525SlotEnumerableUpgradeable is IERC3525Upgradeable, IERC721EnumerableUpgradeable {\\n    /**\\n     * @notice Get the total amount of slots stored by the contract.\\n     * @return The total amount of slots\\n     */\\n    function slotCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the slot at the specified index of all slots stored by the contract.\\n     * @param _index The index in the slot list\\n     * @return The slot at `index` of all slots.\\n     */\\n    function slotByIndex(uint256 _index) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total amount of tokens with the same slot.\\n     * @param _slot The slot to query token supply for\\n     * @return The total amount of tokens with the specified `_slot`\\n     */\\n    function tokenSupplyInSlot(uint256 _slot) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the token at the specified index of all tokens with the same slot.\\n     * @param _slot The slot to query tokens with\\n     * @param _index The index in the token list of the slot\\n     * @return The token ID at `_index` of all tokens with `_slot`\\n     */\\n    function tokenInSlotByIndex(uint256 _slot, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2398f15d912889197635f97c6fa761092d31e352d5f9fd6b6238c74c63896b06\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-3525 Semi-Fungible Token Standard\\n * Note: the EIP-165 identifier for this interface is 0xd5358140.\\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\\n */\\ninterface IERC3525Upgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\\n     * @param _fromTokenId The token id to transfer value from\\n     * @param _toTokenId The token id to transfer value to\\n     * @param _value The transferred value\\n     */\\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\\n\\n    /**\\n     * @dev MUST emit when the approval value of a token is set or changed.\\n     * @param _tokenId The token to approve\\n     * @param _operator The operator to approve for\\n     * @param _value The maximum value that `_operator` is allowed to manage\\n     */\\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\\n\\n    /**\\n     * @dev MUST emit when the slot of a token is set or changed.\\n     * @param _tokenId The token of which slot is set or changed\\n     * @param _oldSlot The previous slot of the token\\n     * @param _newSlot The updated slot of the token\\n     */\\n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\\n\\n    /**\\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\\n     *  Considering the compatibility with third-party wallets, this function is defined as\\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens.\\n     * @return The number of decimals for value\\n     */\\n    function valueDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the value of a token.\\n     * @param _tokenId The token for which to query the balance\\n     * @return The value of `_tokenId`\\n     */\\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the slot of a token.\\n     * @param _tokenId The identifier for a token\\n     * @return The slot of the token\\n     */\\n    function slotOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allow an operator to manage the value of a token, up to the `_value`.\\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\\n     *  address for `_tokenId`.\\n     *  MUST emit the ApprovalValue event.\\n     * @param _tokenId The token to approve\\n     * @param _operator The operator to be approved\\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\\n     */\\n    function approve(\\n        uint256 _tokenId,\\n        address _operator,\\n        uint256 _value\\n    ) external payable;\\n\\n    /**\\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\\n     * @param _tokenId The token for which to query the allowance\\n     * @param _operator The address of an operator\\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\\n     */\\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfer value from a specified token to another specified token with the same slot.\\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\\n     *  approved the whole `_fromTokenId` or part of it.\\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\\n     *  operator.\\n     *  MUST emit `TransferValue` event.\\n     * @param _fromTokenId The token to transfer value from\\n     * @param _toTokenId The token to transfer value to\\n     * @param _value The transferred value\\n     */\\n    function transferFrom(\\n        uint256 _fromTokenId,\\n        uint256 _toTokenId,\\n        uint256 _value\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\\n     *  `_to` is capable of receiving EIP-3525 tokens.\\n     * @dev This function MUST create a new EIP-3525 token with the same slot for `_to`,\\n     *  or find an existing token with the same slot owned by `_to`, to receive the transferred value.\\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\\n     *  MUST revert if `_to` is zero address.\\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\\n     *  operator.\\n     *  MUST emit `Transfer` and `TransferValue` events.\\n     * @param _fromTokenId The token to transfer value from\\n     * @param _to The address to transfer value to\\n     * @param _value The transferred value\\n     * @return ID of the token which receives the transferred value\\n     */\\n    function transferFrom(\\n        uint256 _fromTokenId,\\n        address _to,\\n        uint256 _value\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6af91b4b57a480ae7150bad7a49e1656b78525af82f725dbac86d8843fd6b460\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHyperCertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHyperCertMetadata {\\n    function generateContractURI() external view returns (string memory);\\n\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xebb3f8e922f27c92018d6f9e84a2cfce0b4e5b3024a728eeab34012c3e36814a\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint64[] memory array) internal pure returns (uint64) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint64 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked('[\\\"', uint256(array[0]).toString(), '\\\",\\\"', uint256(array[1]).toString(), '\\\"]'));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xb716e2b5d07932b16bd0188b72be81f2bedfcb8bade90f23c97afffdba0eb9e1\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051615e3a6200012060003960008181611057015281816110970152818161124d0152818161128d01526113ca0152615e3a6000f3fe60806040526004361061038b5760003560e01c806369c67247116101dc578063b88d4fde11610102578063e8a3d485116100a0578063f0f11e051161006f578063f0f11e0514610ad8578063f14faf6f14610af8578063f72c0d8b14610b18578063f76f8d7814610b3a57600080fd5b8063e8a3d48514610a41578063e985e9c514610a56578063ed08fa8014610aa3578063ef6f66d714610ab857600080fd5b8063d52fd095116100dc578063d52fd0951461099e578063d547741f146109be578063de62d842146109de578063e345e0bc146109fe57600080fd5b8063b88d4fde1461093e578063c4d66de81461095e578063c87b56dd1461097e57600080fd5b806395d89b411161017a578063a217fddf11610149578063a217fddf146108b3578063a22cb465146108c8578063a3f4df7e146108e8578063b510391f1461091e57600080fd5b806395d89b4114610826578063993bef8d14610853578063997edc61146108735780639cc7f7081461089357600080fd5b80638cb0a511116101b65780638cb0a511146107b35780638f88b767146107c657806391d14854146107e6578063937773691461080657600080fd5b806369c672471461074657806370a082311461076657806372927aa31461078657600080fd5b80632f2ff15d116102c157806342966c681161025f5780634f8a0f831161022e5780634f8a0f83146106d757806352d1902d146106f757806354fd4d501461070c5780636352211e1461072657600080fd5b806342966c681461066f57806348c02dc11461068f5780634f1ef286146106a45780634f6ccce7146106b757600080fd5b806336568abe1161029b57806336568abe146105fb5780633659cfe61461061b5780633e7e86691461063b57806342842e0e1461064f57600080fd5b80632f2ff15d146105a85780632f745c59146105c8578063310ed7f0146105e857600080fd5b806311e322081161032e57806323b872dd1161030857806323b872dd14610511578063248a9ca314610531578063263f3e7e146105615780632e0f26251461058157600080fd5b806311e32208146104bc57806318160ddd146104dc5780631e6ad4b8146104f157600080fd5b8063081812fc1161036a578063081812fc1461042f578063095ea7b31461046757806309c3dd87146104895780630f485c02146104a957600080fd5b8062cd01101461039057806301ffc9a7146103c357806306fdde03146103f3575b600080fd5b34801561039c57600080fd5b506103b06103ab366004614d17565b610b6a565b6040519081526020015b60405180910390f35b3480156103cf57600080fd5b506103e36103de366004614d4f565b610bfd565b60405190151581526020016103ba565b3480156103ff57600080fd5b5060408051808201909152600a8152694879706572436572747360b01b60208201525b6040516103ba9190614dbc565b34801561043b57600080fd5b5061044f61044a366004614dcf565b610c08565b6040516001600160a01b0390911681526020016103ba565b34801561047357600080fd5b50610487610482366004614dff565b610c7a565b005b34801561049557600080fd5b506104226104a4366004614dcf565b610d07565b6103b06104b7366004614e29565b610dbe565b3480156104c857600080fd5b506103b06104d7366004614fbf565b610e00565b3480156104e857600080fd5b506068546103b0565b3480156104fd57600080fd5b506103b061050c3660046150bd565b610e3a565b34801561051d57600080fd5b5061048761052c3660046150f1565b610ea3565b34801561053d57600080fd5b506103b061054c366004614dcf565b6000908152609d602052604090206001015490565b34801561056d57600080fd5b506103b061057c366004614dcf565b610ed5565b34801561058d57600080fd5b50610596600081565b60405160ff90911681526020016103ba565b3480156105b457600080fd5b506104876105c336600461511d565b610f3d565b3480156105d457600080fd5b506103b06105e3366004614dff565b610f62565b6104876105f6366004615149565b610fb9565b34801561060757600080fd5b5061048761061636600461511d565b610fcf565b34801561062757600080fd5b50610487610636366004615175565b61104d565b34801561064757600080fd5b506000610596565b34801561065b57600080fd5b5061048761066a3660046150f1565b61112c565b34801561067b57600080fd5b5061048761068a366004614dcf565b611147565b34801561069b57600080fd5b506104876111f3565b6104876106b2366004615190565b611243565b3480156106c357600080fd5b506103b06106d2366004614dcf565b61130f565b3480156106e357600080fd5b506103b06106f2366004614dcf565b611368565b34801561070357600080fd5b506103b06113bd565b34801561071857600080fd5b506101335461ffff166103b0565b34801561073257600080fd5b5061044f610741366004614dcf565b611470565b34801561075257600080fd5b506104876107613660046151dd565b611504565b34801561077257600080fd5b506103b0610781366004615175565b61161e565b34801561079257600080fd5b506107a66107a1366004614dcf565b611663565b6040516103ba91906152fb565b6104876107c1366004614e29565b611ac1565b3480156107d257600080fd5b506104226107e1366004614dcf565b611b51565b3480156107f257600080fd5b506103e361080136600461511d565b611bec565b34801561081257600080fd5b50610487610821366004615175565b611c17565b34801561083257600080fd5b506040805180820190915260048152631210d49560e21b6020820152610422565b34801561085f57600080fd5b506103b061086e366004614dcf565b611c82565b34801561087f57600080fd5b506103b061088e3660046150bd565b611cdb565b34801561089f57600080fd5b506103b06108ae366004614dcf565b611d37565b3480156108bf57600080fd5b506103b0600081565b3480156108d457600080fd5b506104876108e3366004615477565b611d9f565b3480156108f457600080fd5b506104226040518060400160405280600a8152602001694879706572436572747360b01b81525081565b34801561092a57600080fd5b506104876109393660046154ae565b611daa565b34801561094a57600080fd5b5061048761095936600461551d565b611fe4565b34801561096a57600080fd5b50610487610979366004615175565b612016565b34801561098a57600080fd5b50610422610999366004614dcf565b612175565b3480156109aa57600080fd5b506104226109b9366004614dcf565b6121c0565b3480156109ca57600080fd5b506104876109d936600461511d565b6121da565b3480156109ea57600080fd5b506104876109f9366004615578565b6121ff565b348015610a0a57600080fd5b506103b0610a1936600461511d565b60009182526067602090815260408084206001600160a01b0393909316845291905290205490565b348015610a4d57600080fd5b50610422612280565b348015610a6257600080fd5b506103e3610a71366004615608565b6001600160a01b039182166000908152606a602090815260408083209390941682526002909201909152205460ff1690565b348015610aaf57600080fd5b50606c546103b0565b348015610ac457600080fd5b50610422610ad3366004614dcf565b612303565b348015610ae457600080fd5b506103b0610af33660046150bd565b61231d565b348015610b0457600080fd5b50610487610b13366004614dcf565b612379565b348015610b2457600080fd5b506103b0600080516020615da783398151915281565b348015610b4657600080fd5b50610422604051806040016040528060048152602001631210d49560e21b81525081565b6000610b7583611368565b8210610ba3576040516305ad208d60e11b815260048101849052602481018390526044015b60405180910390fd5b6000838152606d6020526040902054606c80549091908110610bc757610bc7615632565b90600052602060002090600202016001018281548110610be957610be9615632565b906000526020600020015490505b92915050565b6000610bf7826123b3565b6000610c13826123d8565b610c33576040516338077a2b60e01b815260048101839052602401610b9a565b600082815260696020526040902054606880549091908110610c5757610c57615632565b60009182526020909120600460069092020101546001600160a01b031692915050565b6000610c8582611470565b9050806001600160a01b0316836001600160a01b031603610cd05760405162ea9f2160e81b8152600481018390523360248201526001600160a01b0384166044820152606401610b9a565b610cdb335b83612424565b610cf85760405163390cdd9b60e21b815260040160405180910390fd5b610d0283836124d0565b505050565b6000818152610138602052604090206008015460609062010000900460ff16610d465760405163ae1b0df160e01b815260048101839052602401610b9a565b610133546040516391383c8960e01b815260048101849052620100009091046001600160a01b0316906391383c89906024015b600060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bf79190810190615648565b6000610dcb338584612567565b6000610dd6856125e7565b9050610deb8482610de688610ed5565b6125f1565b610df68582856126b7565b90505b9392505050565b600084848484604051602001610e1994939291906156b5565b6040516020818303038152906040528051906020012090505b949350505050565b6000610e48826101356128e8565b600081815261013560205260409020909150610e648382615774565b507f2efcce702e3d0b95b3deb632da6d41c3d169e0c3effb9066d949f14d6f13224f8183604051610e96929190615833565b60405180910390a1919050565b610ead3382612424565b610eca5760405163390cdd9b60e21b815260040160405180910390fd5b610d0283838361295d565b6000610ee0826123d8565b610f00576040516338077a2b60e01b815260048101839052602401610b9a565b600082815260696020526040902054606880549091908110610f2457610f24615632565b9060005260206000209060060201600101549050919050565b6000828152609d6020526040902060010154610f5881612a63565b610d028383612a6d565b6000610f6d8361161e565b8210610f8f5760405163d338ed0760e01b815260048101839052602401610b9a565b6001600160a01b0383166000908152606a60205260409020805483908110610be957610be9615632565b610fc4338483612567565b610d028383836126b7565b6001600160a01b038116331461103f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b9a565b6110498282612af3565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110955760405162461bcd60e51b8152600401610b9a9061584c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110de600080516020615de7833981519152546001600160a01b031690565b6001600160a01b0316146111045760405162461bcd60e51b8152600401610b9a90615898565b61110d81612b5a565b6040805160008082526020820190925261112991839190612b72565b50565b610d0283838360405180602001604052806000815250611fe4565b6000610138600061115784610ed5565b81526020810191909152604001600020600c8101549091506001600160a01b031633146111975760405163390cdd9b60e21b815260040160405180910390fd5b80600701546111a583611d37565b146111da5780600701546111b883611d37565b60405163cf47918160e01b815260048101929092526024820152604401610b9a565b6111e382612cdd565b600801805462ff00001916905550565b600080516020615da783398151915261120b81612a63565b61013380546001919060009061122690849061ffff166158fa565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361128b5760405162461bcd60e51b8152600401610b9a9061584c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112d4600080516020615de7833981519152546001600160a01b031690565b6001600160a01b0316146112fa5760405162461bcd60e51b8152600401610b9a90615898565b61130382612b5a565b61104982826001612b72565b600061131a60685490565b821061133c5760405163d338ed0760e01b815260048101839052602401610b9a565b6068828154811061134f5761134f615632565b9060005260206000209060060201600001549050919050565b600061137382612e42565b61137f57506000919050565b6000828152606d6020526040902054606c805490919081106113a3576113a3615632565b600091825260209091206001600290920201015492915050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461145d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b9a565b50600080516020615de783398151915290565b600061147b826123d8565b61149b576040516338077a2b60e01b815260048101839052602401610b9a565b6000828152606960205260409020546068805490919081106114bf576114bf615632565b60009182526020909120600360069092020101546001600160a01b03169050806114ff576040516338077a2b60e01b815260048101839052602401610b9a565b919050565b61150d836123d8565b61152d576040516338077a2b60e01b815260048101849052602401610b9a565b6000816001819003611555576040516314b27b7f60e31b815260048101869052602401610b9a565b60005b818110156115985784848281811061157257611572615632565b90506020020135836115849190615915565b92508061159081615928565b915050611558565b506115a285611d37565b8211806115b657506115b385611d37565b82105b156115d45760405163b4fa3fb360e01b815260040160405180910390fd5b8260015b8181101561161557611602878787848181106115f6576115f6615632565b90506020020135612e8e565b508061160d81615928565b9150506115d8565b50505050505050565b60006001600160a01b03821661164757604051630c63e1ed60e11b815260040160405180910390fd5b506001600160a01b03166000908152606a602052604090205490565b61166b614b06565b60008281526101386020908152604080832081516101c0810183528154815282518084019384905290949193850192909160018501916002918390855b82829054906101000a90046001600160401b03166001600160401b0316815260200190600801906020826007010492830192600103820291508084116116a857505050928452505060408051808201918290526020909301929150600284810191826000855b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161170e57905050505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156117a857602002820191906000526020600020905b815481526020019060010190808311611794575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561180057602002820191906000526020600020905b8154815260200190600101908083116117ec575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561185857602002820191906000526020600020905b815481526020019060010190808311611844575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156118ba57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161189c575b505050918352505060078201546020820152600882015461ffff8116604083015262010000900460ff1615156060820152600982018054608090920191611900906156f4565b80601f016020809104026020016040519081016040528092919081815260200182805461192c906156f4565b80156119795780601f1061194e57610100808354040283529160200191611979565b820191906000526020600020905b81548152906001019060200180831161195c57829003601f168201915b50505050508152602001600a82018054611992906156f4565b80601f01602080910402602001604051908101604052809291908181526020018280546119be906156f4565b8015611a0b5780601f106119e057610100808354040283529160200191611a0b565b820191906000526020600020905b8154815290600101906020018083116119ee57829003601f168201915b50505050508152602001600b82018054611a24906156f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611a50906156f4565b8015611a9d5780601f10611a7257610100808354040283529160200191611a9d565b820191906000526020600020905b815481529060010190602001808311611a8057829003601f168201915b5050509183525050600c91909101546001600160a01b031660209091015292915050565b6000611acc84611470565b9050806001600160a01b0316836001600160a01b031603611b195760405162ea9f2160e81b8152600481018590526001600160a01b03808516602483015282166044820152606401610b9a565b611b233385612424565b611b405760405163390cdd9b60e21b815260040160405180910390fd5b611b4b848484612ffa565b50505050565b6101346020526000908152604090208054611b6b906156f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b97906156f4565b8015611be45780601f10611bb957610100808354040283529160200191611be4565b820191906000526020600020905b815481529060010190602001808311611bc757829003601f168201915b505050505081565b6000918252609d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020615da7833981519152611c2f81612a63565b6001600160a01b038216611c5657604051630c63e1ed60e11b815260040160405180910390fd5b5061013380546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6000611c8d606c5490565b8210611caf57604051637ed0f68f60e01b815260048101839052602401610b9a565b606c8281548110611cc257611cc2615632565b9060005260206000209060020201600001549050919050565b6000611ce9826101346128e8565b600081815261013460205260409020909150611d058382615774565b507f8b841033bc947e807d9766c542105a3dbb0bae62591be7b5c8cd4f37f698bf738183604051610e96929190615833565b6000611d42826123d8565b611d62576040516338077a2b60e01b815260048101839052602401610b9a565b600082815260696020526040902054606880549091908110611d8657611d86615632565b9060005260206000209060060201600201549050919050565b6110493383836130c9565b600080611db7848461317d565b336101a08301529092509050611dcd858361325a565b611ddf82600001518360c00151613426565b6000611dea606c5490565b611df5906001615915565b60008181526101386020908152604090912085518155908501519192508491611e249060018301906002614b91565b506040820151611e3a9060028084019190614b91565b5060608201518051611e56916003840191602090910190614c36565b5060808201518051611e72916004840191602090910190614c36565b5060a08201518051611e8e916005840191602090910190614c36565b5060c08201518051611eaa916006840191602090910190614c71565b5060e082015160078201556101008201516008820180546101208501511515620100000262ffffff1990911661ffff909316929092179190911790556101408201516009820190611efb9082615774565b50610160820151600a820190611f119082615774565b50610180820151600b820190611f279082615774565b506101a09190910151600c90910180546001600160a01b0319166001600160a01b03909216919091179055815160005b81811015611f9f57611f8c8884868481518110611f7657611f76615632565b60200260200101516001600160401b0316613505565b5080611f9781615928565b915050611f57565b507f99ba308ef0906cce9332a23fc9ff0c458c3eb58aa3f023baa558fe9539d520f6828885604051611fd393929190615941565b60405180910390a150505050505050565b611fed33610cd5565b61200a5760405163390cdd9b60e21b815260040160405180910390fd5b611b4b84848484613614565b600054610100900460ff16158080156120365750600054600160ff909116105b806120505750303b158015612050575060005460ff166001145b6120b35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b9a565b6000805460ff1916600117905580156120d6576000805461ff0019166101001790555b610133805462010000600160b01b031916620100006001600160a01b03851602179055612101613687565b612109613687565b612114600033612a6d565b61212c600080516020615da783398151915233612a6d565b8015611049576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610133546060906201000090046001600160a01b031663ed03f41a61219984610ed5565b846040518363ffffffff1660e01b8152600401610d79929190918252602082015260400190565b6101366020526000908152604090208054611b6b906156f4565b6000828152609d60205260409020600101546121f581612a63565b610d028383612af3565b805160008261220f6001846159a9565b8151811061221f5761221f615632565b6020026020010151905060005b82811015611b4b57600084828151811061224857612248615632565b6020026020010151905082811461226d5761226381846136f4565b5061226d81612cdd565b508061227881615928565b91505061222c565b606061013360029054906101000a90046001600160a01b03166001600160a01b0316639f4475da6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156122d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122fe9190810190615648565b905090565b6101356020526000908152604090208054611b6b906156f4565b600061232b826101366128e8565b6000818152610136602052604090209091506123478382615774565b507f4527d373276b1ece0c8dd18e140572f93feffd35a0993d9e4de70623b1ac93ce8183604051610e96929190615833565b61238281611470565b6001600160a01b031633036123aa5760405163390cdd9b60e21b815260040160405180910390fd5b61112981612cdd565b60006001600160e01b03198216637965db0b60e01b1480610bf75750610bf7826138af565b60685460009015801590610bf7575060008281526069602052604090205460688054849290811061240b5761240b615632565b9060005260206000209060060201600001541492915050565b600061242f826123d8565b61244f576040516338077a2b60e01b815260048101839052602401610b9a565b600061245a83611470565b9050806001600160a01b0316846001600160a01b031614806124a557506001600160a01b038082166000908152606a60209081526040808320938816835260029093019052205460ff165b80610e325750836001600160a01b03166124be84610c08565b6001600160a01b031614949350505050565b6000818152606960205260409020546068805484929081106124f4576124f4615632565b6000918252602090912060069091020160040180546001600160a01b0319166001600160a01b039283161790558190831661252e82611470565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526067602090815260408083206001600160a01b03871684529091529020546125948484612424565b1580156125a357506000198114155b15611b4b57818110156125d35760405163054365bb60e31b81526004810183905260248101829052604401610b9a565b611b4b83856125e285856159a9565b612ffa565b6000610bf76138d4565b6040805160c081018252838152602080820184905260008284018190526001600160a01b038716606084015260808301819052835181815291820190935260a0820152905061263f816138ea565b6126498484613a3c565b60405183906001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4816000847fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a450505050565b6126c0836123d8565b6126e0576040516338077a2b60e01b815260048101849052602401610b9a565b6126e9826123d8565b612709576040516338077a2b60e01b815260048101839052602401610b9a565b60008381526069602052604081205460688054909190811061272d5761272d615632565b906000526020600020906006020190506000606860696000868152602001908152602001600020548154811061276557612765615632565b9060005260206000209060060201905082826002015410156127aa57600282015460405163cf47918160e01b8152610b9a918591600401918252602082015260400190565b80600101548260010154146127e55760018083015490820154604051630240901360e61b815260048101929092526024820152604401610b9a565b600380830154908201546001840154612810926001600160a01b039081169216908890889088613ac5565b8282600201600082825461282491906159a9565b925050819055508281600201600082825461283f9190615915565b909155505060405183815284908690600080516020615dc78339815191529060200160405180910390a3600380830154908201546001840154612894926001600160a01b039081169216908890889088613b02565b6128af85858560405180602001604052806000815250613b73565b6128e1576128bc84611470565b604051639c645a0b60e01b81526001600160a01b039091166004820152602401610b9a565b5050505050565b6000825160000361290c5760405163a447fc5360e01b815260040160405180910390fd5b8260405160200161291d9190614dbc565b60405160208183030381529060405280519060200120905061293f8282613d03565b15610bf75760405163331d850160e01b815260040160405180910390fd5b826001600160a01b031661297082611470565b6001600160a01b0316146129975760405163390cdd9b60e21b815260040160405180910390fd5b6001600160a01b0382166129be57604051630c63e1ed60e11b815260040160405180910390fd5b6129dc838383846129ce86610ed5565b6129d787611d37565b613ac5565b6129e76000826124d0565b6129f081613d2a565b6129fa8382613dc6565b612a048282613a3c565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610d0283838384612a5586610ed5565b612a5e87611d37565b613b02565b6111298133613ee7565b612a778282611bec565b611049576000828152609d602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612aaf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612afd8282611bec565b15611049576000828152609d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020615da783398151915261104981612a63565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612ba557610d0283613f4b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612bff575060408051601f3d908101601f19168201909252612bfc918101906159bc565b60015b612c625760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610b9a565b600080516020615de78339815191528114612cd15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610b9a565b50610d02838383613fe7565b612ce6816123d8565b612d06576040516338077a2b60e01b815260048101829052602401610b9a565b600081815260696020526040812054606880549091908110612d2a57612d2a615632565b6000918252602090912060069091020160038101549091506001600160a01b0316338114612d6b5760405163390cdd9b60e21b815260040160405180910390fd5b60018201546002830154612d8483600087818686613ac5565b612d8d85613d2a565b612d978386613dc6565b612da08561400c565b600085600080516020615dc783398151915283604051612dc291815260200190565b60405180910390a360405185906000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4600082867fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a46128e18360008760008686613b02565b606c5460009015801590610bf757506000828152606d6020526040902054606c80548492908110612e7557612e75615632565b9060005260206000209060020201600001541492915050565b6000612e9861421a565b9050336000612ea685610ed5565b90506001600160a01b038216612ecf57604051630c63e1ed60e11b815260040160405180910390fd5b82600003612ef35760405163d338ed0760e01b815260048101849052602401610b9a565b612efc836123d8565b15612f1d576040516314b27b7f60e31b815260048101849052602401610b9a565b612f2d6000836000868589613ac5565b612f388284836125f1565b600083815260696020526040902054606880548692908110612f5c57612f5c615632565b906000526020600020906006020160020181905550836068606960008881526020019081526020016000205481548110612f9857612f98615632565b90600052602060002090600602016002016000828254612fb891906159a9565b909155505060405184815283908690600080516020615dc78339815191529060200160405180910390a3612ff26000836000868589613b02565b505092915050565b6130048284614224565b61306a5760008381526069602052604090205460688054909190811061302c5761302c615632565b60009182526020808320600692909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b60008381526067602090815260408083206001600160a01b038616808552908352928190208490555183815285917f621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b91015b60405180910390a3505050565b816001600160a01b0316836001600160a01b0316036131145760405162ea9f2160e81b8152600060048201526001600160a01b03808516602483015283166044820152606401610b9a565b6001600160a01b038381166000818152606a602090815260408083209487168084526002909501825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016130bc565b613185614b06565b606060008390036131a95760405163a447fc5360e01b815260040160405180910390fd5b60008080808080808080806131c08d8f018f615a99565b99509950995099509950995099509950995099506131e0878a888b610e00565b8c5260c08c0185905260208c0187905260408c0186905260608c0189905260808c0188905260a08c018a9052613215816142f7565b6001600160401b031660e08d015260006101008d015260016101208d01526101408c01939093526101608b01919091526101808a015296505050505050509250929050565b6001600160a01b03821661328157604051630c63e1ed60e11b815260040160405180910390fd5b6020818101519081015190516001600160401b03918216911611156132dc57602081015180519060015b6020020151604051630b58ad1560e21b81526001600160401b03928316600482015291166024820152604401610b9a565b6040810151602081015190516001600160401b039182169116111561330a57604081015180519060016132ab565b6040810151516020820151516001600160401b039182169116111561333b57602081015151604082015160006132ab565b60808101515160005b818110156133bc5761013560008460800151838151811061336757613367615632565b602002602001015181526020019081526020016000208054613388906156f4565b90506000036133aa5760405163725a844f60e01b815260040160405180910390fd5b806133b481615928565b915050613344565b5060608201515160005b818110156128e1576133f7610134856060015183815181106133ea576133ea615632565b6020026020010151613d03565b6134145760405163725a844f60e01b815260040160405180910390fd5b8061341e81615928565b9150506133c6565b60005b8151811015610d0257610137600083838151811061344957613449615632565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812086825290925290205460ff161561349b5760405163755402db60e11b815260040160405180910390fd5b600161013760008484815181106134b4576134b4615632565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208782529092529020805460ff1916911515919091179055806134fd81615928565b915050613429565b600061350f61421a565b90506001600160a01b03841661353857604051630c63e1ed60e11b815260040160405180910390fd5b8060000361355c5760405163d338ed0760e01b815260048101829052602401610b9a565b613565816123d8565b15613586576040516314b27b7f60e31b815260048101829052602401610b9a565b6135966000856000848787613ac5565b6135a18482856125f1565b6000818152606960205260409020546068805484929081106135c5576135c5615632565b906000526020600020906006020160020181905550806000600080516020615dc7833981519152846040516135fc91815260200190565b60405180910390a3610df96000856000848787613b02565b61361f84848461295d565b61362b84848484614357565b611b4b5760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e7366657220746f206e6f6e204552433732315260448201526632b1b2b4bb32b960c91b6064820152608401610b9a565b600054610100900460ff166136f25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b9a565b565b60008061370083611470565b905033600061370e86610ed5565b9050600061371b86610ed5565b9050600061372888611d37565b90506001600160a01b03851661375157604051630c63e1ed60e11b815260040160405180910390fd5b87158061375c575086155b1561377d5760405163d338ed0760e01b815260048101879052602401610b9a565b613786866123d8565b156137a7576040516314b27b7f60e31b815260048101879052602401610b9a565b8183146137d157604051630240901360e61b81526004810184905260248101839052604401610b9a565b6137df84868a8a8686613ac5565b60008781526069602052604090205460688054839290811061380357613803615632565b906000526020600020906006020160020160008282546138239190615915565b909155505060008881526069602052604090205460688054839290811061384c5761384c615632565b9060005260206000209060060201600201600082825461386c91906159a9565b909155505060405181815287908990600080516020615dc78339815191529060200160405180910390a36138a484868a8a8686613b02565b505050505092915050565b60006001600160e01b03198216631dba0dcf60e11b1480610bf75750610bf7826144d1565b60006138df60685490565b6122fe906001615915565b606880548251600090815260696020908152604080832084905560018401855593909152835160069092027fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977538101928355818501517fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c22097754820155928401517fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775584015560608401517fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c22097756840180546001600160a01b039283166001600160a01b03199182161790915560808601517fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977578601805491909316911617905560a084015180518594611b4b937fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c22097758909101920190614c71565b600081815260696020526040902054606880548492908110613a6057613a60615632565b6000918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b03948516179055939091168152606a80845260408083208054858552600182810188529285208190559286529082018155825292902090910155565b6001600160a01b038616158015613ada575083155b8015613aec5750613aea82612e42565b155b15613afa57613afa82614557565b505050505050565b6001600160a01b038616158015613b17575083155b8015613b2a5750613b2882846145a8565b155b15613b3e57613b398284614634565b613afa565b6001600160a01b038516158015613b53575082155b8015613b645750613b6482856145a8565b15613afa57613afa8285614695565b600080613b7f85611470565b90506001600160a01b0381163b15158015613c0357506040516301ffc9a760e01b8152629ce20b60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015613bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c039190615bff565b15613cf957604051629ce20b60e01b81526001600160a01b03821690629ce20b90613c3a9033908a908a908a908a90600401615c1c565b6020604051808303816000875af1925050508015613c75575060408051601f3d908101601f19168201909252613c7291810190615c4f565b60015b613cde573d808015613ca3576040519150601f19603f3d011682016040523d82523d6000602084013e613ca8565b606091505b508051600003613cd657604051639c645a0b60e01b81526001600160a01b0383166004820152602401610b9a565b805181602001fd5b6001600160e01b031916629ce20b60e01b149150610e329050565b6001915050610e32565b60008181526020839052604081208054829190613d1f906156f4565b905011905092915050565b600081815260696020526040812054606880549091908110613d4e57613d4e615632565b600091825260208220600560069092020190810154909250905b81811015611b4b576000836005018281548110613d8757613d87615632565b60009182526020808320909101548783526067825260408084206001600160a01b03909216845291528120555080613dbe81615928565b915050613d68565b600081815260696020526040812054606880549091908110613dea57613dea615632565b6000918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b039485161790559184168152606a909152604081208054909190613e39906001906159a9565b90506000826000018281548110613e5257613e52615632565b90600052602060002001549050600083600101600086815260200190815260200160002054905081846000018281548110613e8f57613e8f615632565b60009182526020808320909101929092558381526001860190915260408082208390558682528120558354849080613ec957613ec9615c6c565b60019003818190600052602060002001600090559055505050505050565b613ef18282611bec565b61104957613f09816001600160a01b03166014614779565b613f14836020614779565b604051602001613f25929190615c82565b60408051601f198184030181529082905262461bcd60e51b8252610b9a91600401614dbc565b6001600160a01b0381163b613fb85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610b9a565b600080516020615de783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613ff083614914565b600082511180613ffd5750805b15610d0257611b4b8383614954565b60685460009061401e906001906159a9565b6000838152606960205260408120546068805493945090928490811061404657614046615632565b60009182526020918290206040805160c08101825260069093029091018054835260018101548385015260028101548383015260038101546001600160a01b03908116606085015260048201541660808401526005810180548351818702810187019094528084529394919360a0860193928301828280156140f157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116140d3575b5050505050815250509050806068838154811061411057614110615632565b600091825260209182902083516006909202019081558282015160018201556040830151600282015560608301516003820180546001600160a01b039283166001600160a01b031991821617909155608085015160048401805491909316911617905560a08301518051919261418e92600585019290910190614c71565b505081516000908152606960205260408082208590558682528120555060688054806141bc576141bc615c6c565b60008281526020812060066000199093019283020181815560018101829055600281018290556003810180546001600160a01b03199081169091556004820180549091169055906142106005830182614cc6565b5050905550505050565b60006122fe6138d4565b60008181526069602052604081205460688054839290811061424857614248615632565b6000918252602082206005600690920201015491505b818110156142ec57600084815260696020526040902054606880546001600160a01b0388169290811061429357614293615632565b906000526020600020906006020160050182815481106142b5576142b5615632565b6000918252602090912001546001600160a01b0316036142da57600192505050610bf7565b806142e481615928565b91505061425e565b506000949350505050565b6000815160000361430a57506000919050565b6000805b83518110156143505783818151811061432957614329615632565b60200260200101518261433c9190615cf7565b91508061434881615928565b91505061430e565b5092915050565b60006001600160a01b0384163b151580156143dc57506040516301ffc9a760e01b8152630a85bd0160e11b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa1580156143b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143dc9190615bff565b156144c957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614413903390899088908890600401615d17565b6020604051808303816000875af192505050801561444e575060408051601f3d908101601f1916820190925261444b91810190615c4f565b60015b6144af573d80801561447c576040519150601f19603f3d011682016040523d82523d6000602084013e614481565b606091505b508051600003613cd6576040516361ef2ab560e11b81526001600160a01b0386166004820152602401610b9a565b6001600160e01b031916630a85bd0160e11b149050610e32565b506001610e32565b60006001600160e01b03198216630354d60560e61b148061450257506001600160e01b031982166380ac58cd60e01b145b8061451d57506001600160e01b031982166370b0048160e11b145b8061453857506001600160e01b0319821663780e9d6360e01b145b80610bf757506301ffc9a760e01b6001600160e01b0319831614610bf7565b61456081612e42565b1561457e57604051630139222f60e31b815260040160405180910390fd5b60408051808201825282815281516000808252602082810190945292820152905061104981614a48565b6000828152606d6020526040812054606c805483929081106145cc576145cc615632565b9060005260206000209060020201905060008160010180549050118015610e3257506000848152606b60209081526040808320868452909152902054600182018054859290811061461f5761461f615632565b90600052602060002001541491505092915050565b6000828152606d6020526040812054606c8054909190811061465857614658615632565b60009182526020808320600160029093020182018054968452606b8252604080852087865283528420879055918601825590825290209092015550565b6000828152606d6020526040812054606c805490919081106146b9576146b9615632565b6000918252602082206001600290920201818101549093506146db91906159a9565b905060008260010182815481106146f4576146f4615632565b6000918252602080832090910154878352606b8252604080842088855290925291205460018501805492935090918391908390811061473557614735615632565b600091825260208083209190910192909255878152606b825260408082208583529092528181208390558681529081205560018401805480613ec957613ec9615c6c565b60606000614788836002615d54565b614793906002615915565b6001600160401b038111156147aa576147aa614e5e565b6040519080825280601f01601f1916602001820160405280156147d4576020820181803683370190505b509050600360fc1b816000815181106147ef576147ef615632565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061481e5761481e615632565b60200101906001600160f81b031916908160001a9053506000614842846002615d54565b61484d906001615915565b90505b60018111156148c5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061488157614881615632565b1a60f81b82828151811061489757614897615632565b60200101906001600160f81b031916908160001a90535060049490941c936148be81615d73565b9050614850565b508315610df95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b9a565b61491d81613f4b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610b9a565b600080846001600160a01b0316846040516149d79190615d8a565b600060405180830381855af49150503d8060008114614a12576040519150601f19603f3d011682016040523d82523d6000602084013e614a17565b606091505b5091509150614a3f8282604051806060016040528060278152602001615e0760279139614acd565b95945050505050565b606c805482516000908152606d602090815260408220839055600183018455929052825160029091027f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01681019182558284015180518594611b4b937f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01701920190614c36565b60608315614adc575081610df9565b825115614aec5782518084602001fd5b8160405162461bcd60e51b8152600401610b9a9190614dbc565b604080516101c081019091526000815260208101614b22614ce4565b8152602001614b2f614ce4565b81526020016060815260200160608152602001606081526020016060815260200160008152602001600061ffff16815260200160001515815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b600183019183908215614c265791602002820160005b83821115614bf157835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302614ba7565b8015614c245782816101000a8154906001600160401b030219169055600801602081600701049283019260010302614bf1565b505b50614c32929150614d02565b5090565b828054828255906000526020600020908101928215614c26579160200282015b82811115614c26578251825591602001919060010190614c56565b828054828255906000526020600020908101928215614c26579160200282015b82811115614c2657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614c91565b50805460008255906000526020600020908101906111299190614d02565b60405180604001604052806002906020820280368337509192915050565b5b80821115614c325760008155600101614d03565b60008060408385031215614d2a57600080fd5b50508035926020909101359150565b6001600160e01b03198116811461112957600080fd5b600060208284031215614d6157600080fd5b8135610df981614d39565b60005b83811015614d87578181015183820152602001614d6f565b50506000910152565b60008151808452614da8816020860160208601614d6c565b601f01601f19169290920160200192915050565b602081526000610df96020830184614d90565b600060208284031215614de157600080fd5b5035919050565b80356001600160a01b03811681146114ff57600080fd5b60008060408385031215614e1257600080fd5b614e1b83614de8565b946020939093013593505050565b600080600060608486031215614e3e57600080fd5b83359250614e4e60208501614de8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614e9c57614e9c614e5e565b604052919050565b80356001600160401b03811681146114ff57600080fd5b600082601f830112614ecc57600080fd5b604051604081018181106001600160401b0382111715614eee57614eee614e5e565b8060405250806040840185811115614f0557600080fd5b845b81811015614f2657614f1881614ea4565b835260209283019201614f07565b509195945050505050565b60006001600160401b03821115614f4a57614f4a614e5e565b5060051b60200190565b600082601f830112614f6557600080fd5b81356020614f7a614f7583614f31565b614e74565b82815260059290921b84018101918181019086841115614f9957600080fd5b8286015b84811015614fb45780358352918301918301614f9d565b509695505050505050565b60008060008060c08587031215614fd557600080fd5b614fdf8686614ebb565b935060408501356001600160401b0380821115614ffb57600080fd5b61500788838901614f54565b94506150168860608901614ebb565b935060a087013591508082111561502c57600080fd5b5061503987828801614f54565b91505092959194509250565b60006001600160401b0382111561505e5761505e614e5e565b50601f01601f191660200190565b600082601f83011261507d57600080fd5b813561508b614f7582615045565b8181528460208386010111156150a057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156150cf57600080fd5b81356001600160401b038111156150e557600080fd5b610e328482850161506c565b60008060006060848603121561510657600080fd5b61510f84614de8565b9250614e4e60208501614de8565b6000806040838503121561513057600080fd5b8235915061514060208401614de8565b90509250929050565b60008060006060848603121561515e57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561518757600080fd5b610df982614de8565b600080604083850312156151a357600080fd5b6151ac83614de8565b915060208301356001600160401b038111156151c757600080fd5b6151d38582860161506c565b9150509250929050565b6000806000604084860312156151f257600080fd5b8335925060208401356001600160401b038082111561521057600080fd5b818601915086601f83011261522457600080fd5b81358181111561523357600080fd5b8760208260051b850101111561524857600080fd5b6020830194508093505050509250925092565b8060005b6002811015611b4b5781516001600160401b031684526020938401939091019060010161525f565b600081518084526020808501945080840160005b838110156152b75781518752958201959082019060010161529b565b509495945050505050565b600081518084526020808501945080840160005b838110156152b75781516001600160a01b0316875295820195908201906001016152d6565b60208152815160208201526000602083015161531a604084018261525b565b50604083015161532d608084018261525b565b5060608301516102008060c085015261534a610220850183615287565b91506080850151601f19808685030160e08701526153688483615287565b935060a087015191506101008187860301818801526153878584615287565b945060c088015192506101208288870301818901526153a686856152c2565b955060e0890151935061014084818a0152828a0151945061016092506153d1838a018661ffff169052565b908901519350610180906153e88983018615159052565b808a01519450506101a08389880301818a01526154058786614d90565b9650828a0151945083898803016101c08a01526154228786614d90565b9650818a0151945083898803016101e08a015261543f8786614d90565b9650808a015194505050505061545f828601826001600160a01b03169052565b5090949350505050565b801515811461112957600080fd5b6000806040838503121561548a57600080fd5b61549383614de8565b915060208301356154a381615469565b809150509250929050565b6000806000604084860312156154c357600080fd5b6154cc84614de8565b925060208401356001600160401b03808211156154e857600080fd5b818601915086601f8301126154fc57600080fd5b81358181111561550b57600080fd5b87602082850101111561524857600080fd5b6000806000806080858703121561553357600080fd5b61553c85614de8565b935061554a60208601614de8565b92506040850135915060608501356001600160401b0381111561556c57600080fd5b6150398782880161506c565b6000602080838503121561558b57600080fd5b82356001600160401b038111156155a157600080fd5b8301601f810185136155b257600080fd5b80356155c0614f7582614f31565b81815260059190911b820183019083810190878311156155df57600080fd5b928401925b828410156155fd578335825292840192908401906155e4565b979650505050505050565b6000806040838503121561561b57600080fd5b61562483614de8565b915061514060208401614de8565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561565a57600080fd5b81516001600160401b0381111561567057600080fd5b8201601f8101841361568157600080fd5b805161568f614f7582615045565b8181528560208385010111156156a457600080fd5b614a3f826020830160208601614d6c565b6156bf818661525b565b60c0604082015260006156d560c0830186615287565b6156e2606084018661525b565b82810360a08401526155fd8185615287565b600181811c9082168061570857607f821691505b60208210810361572857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d0257600081815260208120601f850160051c810160208610156157555750805b601f850160051c820191505b81811015613afa57828155600101615761565b81516001600160401b0381111561578d5761578d614e5e565b6157a18161579b84546156f4565b8461572e565b602080601f8311600181146157d657600084156157be5750858301515b600019600386901b1c1916600185901b178555613afa565b600085815260208120601f198616915b82811015615805578886015182559484019460019091019084016157e6565b50858210156158235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000610e326040830184614d90565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115614350576143506158e4565b80820180821115610bf757610bf76158e4565b60006001820161593a5761593a6158e4565b5060010190565b8381526001600160a01b0383166020808301919091526060604083018190528351908301819052600091848101916080850190845b8181101561599b5784516001600160401b031683529383019391830191600101615976565b509098975050505050505050565b81810381811115610bf757610bf76158e4565b6000602082840312156159ce57600080fd5b5051919050565b600082601f8301126159e657600080fd5b813560206159f6614f7583614f31565b82815260059290921b84018101918181019086841115615a1557600080fd5b8286015b84811015614fb457615a2a81614de8565b8352918301918301615a19565b600082601f830112615a4857600080fd5b81356020615a58614f7583614f31565b82815260059290921b84018101918181019086841115615a7757600080fd5b8286015b84811015614fb457615a8c81614ea4565b8352918301918301615a7b565b6000806000806000806000806000806101808b8d031215615ab957600080fd5b8a356001600160401b0380821115615ad057600080fd5b615adc8e838f01614f54565b9b5060208d0135915080821115615af257600080fd5b615afe8e838f01614f54565b9a5060408d0135915080821115615b1457600080fd5b615b208e838f01614f54565b9950615b2f8e60608f01614ebb565b9850615b3e8e60a08f01614ebb565b975060e08d0135915080821115615b5457600080fd5b615b608e838f016159d5565b96506101008d0135915080821115615b7757600080fd5b615b838e838f0161506c565b95506101208d0135915080821115615b9a57600080fd5b615ba68e838f0161506c565b94506101408d0135915080821115615bbd57600080fd5b615bc98e838f0161506c565b93506101608d0135915080821115615be057600080fd5b50615bed8d828e01615a37565b9150509295989b9194979a5092959850565b600060208284031215615c1157600080fd5b8151610df981615469565b60018060a01b038616815284602082015283604082015282606082015260a0608082015260006155fd60a0830184614d90565b600060208284031215615c6157600080fd5b8151610df981614d39565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615cba816017850160208801614d6c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615ceb816028840160208801614d6c565b01602801949350505050565b6001600160401b03818116838216019080821115614350576143506158e4565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615d4a90830184614d90565b9695505050505050565b6000816000190483118215151615615d6e57615d6e6158e4565b500290565b600081615d8257615d826158e4565b506000190190565b60008251615d9c818460208701614d6c565b919091019291505056fe189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e30b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc6360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000810000a",
  "deployedBytecode": "",
  "devdoc": {
    "author": "bitbeckers, mr_bluesky",
    "events": {
      "ImpactClaimed(uint256,address,uint64[])": {
        "params": {
          "fractions": "Units of tokens issued under the hypercert.",
          "id": "Id of the claimed impact.",
          "minter": "Address of cert minter."
        }
      },
      "ImpactScopeAdded(bytes32,string)": {
        "params": {
          "id": "Id of the impact scope.",
          "text": "Short text code of the impact scope."
        }
      },
      "RightAdded(bytes32,string)": {
        "params": {
          "id": "Id of the right.",
          "text": "Short text code of the right."
        }
      },
      "WorkScopeAdded(bytes32,string)": {
        "params": {
          "id": "Id of the work scope.",
          "text": "Short text code of the work scope."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addImpactScope(string)": {
        "params": {
          "text": "Text representing the impact scope"
        },
        "returns": {
          "id": "Id of the impact scope"
        }
      },
      "addRight(string)": {
        "params": {
          "text": "Text representing the right"
        },
        "returns": {
          "id": "Id of the right"
        }
      },
      "addWorkScope(string)": {
        "params": {
          "text": "Text representing the work scope"
        },
        "returns": {
          "id": "Id of the work scope"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "contractURI()": {
        "details": "This function SHOULD return the URI for this contract in JSON format, starting with  header `data:application/json;`.  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.",
        "returns": {
          "_0": "The JSON formatted URI of the current ERC3525 contract"
        }
      },
      "getImpactCert(uint256)": {
        "params": {
          "claimID": "Id of the claim"
        },
        "returns": {
          "_0": "The claim, if it doesn't exist with default values"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "mint(address,bytes)": {
        "params": {
          "account": "Account issuing the new hypercertificate",
          "data": "Data representing the parameters of the claim"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "slotByIndex(uint256)": {
        "params": {
          "index_": "The index in the slot list"
        },
        "returns": {
          "_0": "The slot at `index` of all slots."
        }
      },
      "slotCount()": {
        "returns": {
          "_0": "The total amount of slots"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Id of the interface"
        },
        "returns": {
          "_0": "true, if the interface is supported"
        }
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenInSlotByIndex(uint256,uint256)": {
        "params": {
          "index_": "The index in the token list of the slot",
          "slot_": "The slot to query tokens with"
        },
        "returns": {
          "_0": "The token ID at `_index` of all tokens with `_slot`"
        }
      },
      "tokenSupplyInSlot(uint256)": {
        "params": {
          "slot_": "The slot to query token supply for"
        },
        "returns": {
          "_0": "The total amount of tokens with the specified `_slot`"
        }
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "valueDecimals()": {
        "returns": {
          "_0": "The number of decimals for value"
        }
      }
    },
    "title": "Hypercertificate minting logic",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ImpactClaimed(uint256,address,uint64[])": {
        "notice": "Emitted when an impact is claimed."
      },
      "ImpactScopeAdded(bytes32,string)": {
        "notice": "Emitted when a new impact scope is added."
      },
      "RightAdded(bytes32,string)": {
        "notice": "Emitted when a new right is added."
      },
      "WorkScopeAdded(bytes32,string)": {
        "notice": "Emitted when a new work scope is added."
      }
    },
    "kind": "user",
    "methods": {
      "DECIMALS()": {
        "notice": "Token value decimals"
      },
      "NAME()": {
        "notice": "Contract name"
      },
      "SYMBOL()": {
        "notice": "Token symbol"
      },
      "UPGRADER_ROLE()": {
        "notice": "User role required in order to upgrade the contract"
      },
      "addImpactScope(string)": {
        "notice": "Adds a new impact scope"
      },
      "addRight(string)": {
        "notice": "Adds a new right"
      },
      "addWorkScope(string)": {
        "notice": "Adds a new work scope"
      },
      "constructor": {
        "notice": "Contract constructor logic"
      },
      "contractURI()": {
        "notice": "Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."
      },
      "getImpactCert(uint256)": {
        "notice": "Gets the impact claim with the specified id"
      },
      "impactScopes(bytes32)": {
        "notice": "Mapping of id's to impact-scopes"
      },
      "initialize(address)": {
        "notice": "Contract initialization logic"
      },
      "mint(address,bytes)": {
        "notice": "Issues a new hypercertificate"
      },
      "rights(bytes32)": {
        "notice": "Mapping of id's to rights"
      },
      "slotByIndex(uint256)": {
        "notice": "Get the slot at the specified index of all slots stored by the contract."
      },
      "slotCount()": {
        "notice": "Get the total amount of slots stored by the contract."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns a flag indicating if the contract supports the specified interface"
      },
      "tokenInSlotByIndex(uint256,uint256)": {
        "notice": "Get the token at the specified index of all tokens with the same slot."
      },
      "tokenSupplyInSlot(uint256)": {
        "notice": "Get the total amount of tokens with the same slot."
      },
      "updateVersion()": {
        "notice": "Update the contract version numberOnly allowed for member of UPGRADER_ROLE"
      },
      "valueDecimals()": {
        "notice": "Get the number of decimals the token uses for value - e.g. 6, means the user  representation of the value of a token can be calculated by dividing it by 1,000,000.  Considering the compatibility with third-party wallets, this function is defined as  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens."
      },
      "version()": {
        "notice": "gets the current version of the contract"
      },
      "workScopes(bytes32)": {
        "notice": "Mapping of id's to work-scopes"
      }
    },
    "notice": "Contains functions and events to initialize and issue a hypercertificate",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 814,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 817,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1570,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1900,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2527,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2529,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2536,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_approvedValues",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2540,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_allTokens",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_struct(TokenData)2513_storage)dyn_storage"
      },
      {
        "astId": 2544,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2549,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_addressData",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressData)2525_storage)"
      },
      {
        "astId": 1943,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_slotTokensIndex",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1947,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_allSlots",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_struct(SlotData)1937_storage)dyn_storage"
      },
      {
        "astId": 1951,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_allSlotsIndex",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2417,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_roles",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1093,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4653,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_version",
        "offset": 0,
        "slot": "307",
        "type": "t_uint16"
      },
      {
        "astId": 4657,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_metadata",
        "offset": 2,
        "slot": "307",
        "type": "t_contract(IHyperCertMetadata)6036"
      },
      {
        "astId": 4662,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "workScopes",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 4667,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "impactScopes",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 4672,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "rights",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 4678,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_contributorImpacts",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 4683,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_hyperCerts",
        "offset": 0,
        "slot": "312",
        "type": "t_mapping(t_uint256,t_struct(Claim)4720_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SlotData)1937_storage)dyn_storage": {
        "base": "t_struct(SlotData)1937_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC3525SlotEnumerableUpgradeable.SlotData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenData)2513_storage)dyn_storage": {
        "base": "t_struct(TokenData)2513_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC3525Upgradeable.TokenData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)2_storage": {
        "base": "t_uint64",
        "encoding": "inplace",
        "label": "uint64[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHyperCertMetadata)6036": {
        "encoding": "inplace",
        "label": "contract IHyperCertMetadata",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2525_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC3525Upgradeable.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2525_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Claim)4720_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HyperCertMinter.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)4720_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2525_storage": {
        "encoding": "inplace",
        "label": "struct ERC3525Upgradeable.AddressData",
        "members": [
          {
            "astId": 2516,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "ownedTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2520,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "ownedTokensIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 2524,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "approvals",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Claim)4720_storage": {
        "encoding": "inplace",
        "label": "struct HyperCertMinter.Claim",
        "members": [
          {
            "astId": 4685,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "claimHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4689,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "workTimeframe",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint64)2_storage"
          },
          {
            "astId": 4693,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "impactTimeframe",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint64)2_storage"
          },
          {
            "astId": 4696,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "workScopes",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4699,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "impactScopes",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4702,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "rights",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4705,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "contributors",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4707,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "totalUnits",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4709,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "version",
            "offset": 0,
            "slot": "8",
            "type": "t_uint16"
          },
          {
            "astId": 4711,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "exists",
            "offset": 2,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 4713,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "name",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 4715,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "description",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 4717,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "uri",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 4719,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "minter",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SlotData)1937_storage": {
        "encoding": "inplace",
        "label": "struct ERC3525SlotEnumerableUpgradeable.SlotData",
        "members": [
          {
            "astId": 1933,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "slot",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1936,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "slotTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)2513_storage": {
        "encoding": "inplace",
        "label": "struct ERC3525Upgradeable.TokenData",
        "members": [
          {
            "astId": 2501,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2503,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "slot",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2505,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2507,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2509,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "approved",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2512,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "valueApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}