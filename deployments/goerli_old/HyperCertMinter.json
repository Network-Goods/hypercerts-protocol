{
  "address": "0xb43552D2459C62Bc2e1562c2896449CC44997C18",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConflictingClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateScope",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "InvalidApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidScope",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "from",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "to",
          "type": "uint64"
        }
      ],
      "name": "InvalidTimeframe",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        }
      ],
      "name": "SlotsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ApprovalValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "fractions",
          "type": "uint64[]"
        }
      ],
      "name": "ImpactClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "ImpactScopeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "RightAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_oldSlot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newSlot",
          "type": "uint256"
        }
      ],
      "name": "SlotChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "WorkScopeAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYMBOL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "addImpactScope",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "addRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "addWorkScope",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[2]",
          "name": "workTimeframe_",
          "type": "uint64[2]"
        },
        {
          "internalType": "bytes32[]",
          "name": "workScopes_",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64[2]",
          "name": "impactTimeframe_",
          "type": "uint64[2]"
        },
        {
          "internalType": "bytes32[]",
          "name": "impactScopes_",
          "type": "bytes32[]"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimID",
          "type": "uint256"
        }
      ],
      "name": "getImpactCert",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "claimHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64[2]",
              "name": "workTimeframe",
              "type": "uint64[2]"
            },
            {
              "internalType": "uint64[2]",
              "name": "impactTimeframe",
              "type": "uint64[2]"
            },
            {
              "internalType": "bytes32[]",
              "name": "workScopes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "impactScopes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "rights",
              "type": "bytes32[]"
            },
            {
              "internalType": "address[]",
              "name": "contributors",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "version",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            }
          ],
          "internalType": "struct HyperCertMinter.Claim",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "impactScopes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metadataAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rights",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "slotByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "slotOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slotId_",
          "type": "uint256"
        }
      ],
      "name": "slotURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "split",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenInSlotByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        }
      ],
      "name": "tokenSupplyInSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "valueDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "workScopes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "277a5bcebf83f57fc6500f9d1b3e7404",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConflictingClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateScope\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidScope\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"from\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"to\",\"type\":\"uint64\"}],\"name\":\"InvalidTimeframe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"SlotsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApprovalValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"fractions\",\"type\":\"uint64[]\"}],\"name\":\"ImpactClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"ImpactScopeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"RightAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_oldSlot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newSlot\",\"type\":\"uint256\"}],\"name\":\"SlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"WorkScopeAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"addImpactScope\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"addRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"addWorkScope\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[2]\",\"name\":\"workTimeframe_\",\"type\":\"uint64[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"workScopes_\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[2]\",\"name\":\"impactTimeframe_\",\"type\":\"uint64[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"impactScopes_\",\"type\":\"bytes32[]\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"}],\"name\":\"getImpactCert\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"claimHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64[2]\",\"name\":\"workTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"impactTimeframe\",\"type\":\"uint64[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"workScopes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"impactScopes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rights\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct HyperCertMinter.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"impactScopes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rights\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"slotByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"slotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slotId_\",\"type\":\"uint256\"}],\"name\":\"slotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenInSlotByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"tokenSupplyInSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"workScopes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"bitbeckers, mr_bluesky\",\"events\":{\"ImpactClaimed(uint256,address,uint64[])\":{\"params\":{\"fractions\":\"Units of tokens issued under the hypercert.\",\"id\":\"Id of the claimed impact.\",\"minter\":\"Address of cert minter.\"}},\"ImpactScopeAdded(bytes32,string)\":{\"params\":{\"id\":\"Id of the impact scope.\",\"text\":\"Short text code of the impact scope.\"}},\"RightAdded(bytes32,string)\":{\"params\":{\"id\":\"Id of the right.\",\"text\":\"Short text code of the right.\"}},\"WorkScopeAdded(bytes32,string)\":{\"params\":{\"id\":\"Id of the work scope.\",\"text\":\"Short text code of the work scope.\"}}},\"kind\":\"dev\",\"methods\":{\"addImpactScope(string)\":{\"params\":{\"text\":\"Text representing the impact scope\"},\"returns\":{\"id\":\"Id of the impact scope\"}},\"addRight(string)\":{\"params\":{\"text\":\"Text representing the right\"},\"returns\":{\"id\":\"Id of the right\"}},\"addWorkScope(string)\":{\"params\":{\"text\":\"Text representing the work scope\"},\"returns\":{\"id\":\"Id of the work scope\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"contractURI()\":{\"details\":\"This function SHOULD return the URI for this contract in JSON format, starting with  header `data:application/json;`.  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\",\"returns\":{\"_0\":\"The JSON formatted URI of the current ERC3525 contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getImpactCert(uint256)\":{\"params\":{\"claimID\":\"Id of the claim\"},\"returns\":{\"_0\":\"The claim, if it doesn't exist with default values\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,bytes)\":{\"params\":{\"account\":\"Account issuing the new hypercertificate\",\"data\":\"Data representing the parameters of the claim\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"slotByIndex(uint256)\":{\"params\":{\"_index\":\"The index in the slot list\"},\"returns\":{\"_0\":\"The slot at `index` of all slots.\"}},\"slotCount()\":{\"returns\":{\"_0\":\"The total amount of slots\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Id of the interface\"},\"returns\":{\"_0\":\"true, if the interface is supported\"}},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenInSlotByIndex(uint256,uint256)\":{\"params\":{\"_index\":\"The index in the token list of the slot\",\"_slot\":\"The slot to query tokens with\"},\"returns\":{\"_0\":\"The token ID at `_index` of all tokens with `_slot`\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenSupplyInSlot(uint256)\":{\"params\":{\"_slot\":\"The slot to query token supply for\"},\"returns\":{\"_0\":\"The total amount of tokens with the specified `_slot`\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"valueDecimals()\":{\"returns\":{\"_0\":\"The number of decimals for value\"}}},\"title\":\"Hypercertificate minting logic\",\"version\":1},\"userdoc\":{\"events\":{\"ImpactClaimed(uint256,address,uint64[])\":{\"notice\":\"Emitted when an impact is claimed.\"},\"ImpactScopeAdded(bytes32,string)\":{\"notice\":\"Emitted when a new impact scope is added.\"},\"RightAdded(bytes32,string)\":{\"notice\":\"Emitted when a new right is added.\"},\"WorkScopeAdded(bytes32,string)\":{\"notice\":\"Emitted when a new work scope is added.\"}},\"kind\":\"user\",\"methods\":{\"DECIMALS()\":{\"notice\":\"Token value decimals\"},\"NAME()\":{\"notice\":\"Contract name\"},\"SYMBOL()\":{\"notice\":\"Token symbol\"},\"UPGRADER_ROLE()\":{\"notice\":\"User role required in order to upgrade the contract\"},\"addImpactScope(string)\":{\"notice\":\"Adds a new impact scope\"},\"addRight(string)\":{\"notice\":\"Adds a new right\"},\"addWorkScope(string)\":{\"notice\":\"Adds a new work scope\"},\"constructor\":{\"notice\":\"Contract constructor logic\"},\"contractURI()\":{\"notice\":\"Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\"},\"getImpactCert(uint256)\":{\"notice\":\"Gets the impact claim with the specified id\"},\"impactScopes(bytes32)\":{\"notice\":\"Mapping of id's to impact-scopes\"},\"initialize(address)\":{\"notice\":\"Contract initialization logic\"},\"mint(address,bytes)\":{\"notice\":\"Issues a new hypercertificate\"},\"rights(bytes32)\":{\"notice\":\"Mapping of id's to rights\"},\"slotByIndex(uint256)\":{\"notice\":\"Get the slot at the specified index of all slots stored by the contract.\"},\"slotCount()\":{\"notice\":\"Get the total amount of slots stored by the contract.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns a flag indicating if the contract supports the specified interface\"},\"tokenInSlotByIndex(uint256,uint256)\":{\"notice\":\"Get the token at the specified index of all tokens with the same slot.\"},\"tokenSupplyInSlot(uint256)\":{\"notice\":\"Get the total amount of tokens with the same slot.\"},\"updateVersion()\":{\"notice\":\"Update the contract version numberOnly allowed for member of UPGRADER_ROLE\"},\"valueDecimals()\":{\"notice\":\"Get the number of decimals the token uses for value - e.g. 6, means the user  representation of the value of a token can be calculated by dividing it by 1,000,000.  Considering the compatibility with third-party wallets, this function is defined as  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens.\"},\"version()\":{\"notice\":\"gets the current version of the contract\"},\"workScopes(bytes32)\":{\"notice\":\"Mapping of id's to work-scopes\"}},\"notice\":\"Contains functions and events to initialize and issue a hypercertificate\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperCertMinter.sol\":\"HyperCertMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x9a8e2a400966f5e21b7dc105bb7236e5dc986c93b5fc18eafdae08a96e803cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xc0e1ac396ac591a4c38ddcdd220321128eb94424d73e41a573cf58d5c643af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/ERC3525Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./interfaces/IERC3525MetadataUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC3525Receiver.sol\\\";\\nimport \\\"./interfaces/IERC3525SlotEnumerableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\n\\nerror NonExistentToken(uint256 tokenId);\\nerror NonExistentSlot(uint256 slotId);\\nerror InsufficientBalance(uint256 transferAmount, uint256 balance);\\nerror InsufficientAllowance(uint256 transferAmount, uint256 allowance);\\nerror ToZeroAddress();\\nerror InvalidID(uint256 tokenId);\\nerror AlreadyMinted(uint256 tokenId);\\nerror SlotsMismatch(uint256 fromTokenId, uint256 toTokenId);\\nerror InvalidApproval(uint256 tokenId, address from, address to);\\nerror NotApprovedOrOwner();\\n\\nabstract contract ERC3525Upgradeable is\\n    Initializable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    IERC3525MetadataUpgradeable,\\n    IERC3525SlotEnumerableUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    struct ApproveData {\\n        address[] approvals;\\n        mapping(address => uint256) allowances;\\n    }\\n\\n    /// @dev tokenId => values\\n    mapping(uint256 => uint256) internal _values;\\n\\n    /// @dev tokenId => operator => units\\n    mapping(uint256 => ApproveData) private _approvedValues;\\n\\n    /// @dev tokenId => slot\\n    mapping(uint256 => uint256) internal _slots;\\n    uint256[] internal _slotArray;\\n\\n    /// @dev slot => tokenId[]\\n    mapping(uint256 => uint256[]) internal _tokensBySlot;\\n\\n    uint256 internal _tokenCounter;\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721EnumerableUpgradeable, ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC3525MetadataUpgradeable).interfaceId ||\\n            interfaceId == type(IERC3525SlotEnumerableUpgradeable).interfaceId ||\\n            interfaceId == type(IERC3525Upgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(uint256 tokenId_) public view virtual override returns (uint256) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n        return _values[tokenId_];\\n    }\\n\\n    function slotOf(uint256 tokenId_) public view virtual override returns (uint256) {\\n        if (!_exists(tokenId_)) {\\n            revert NonExistentToken(tokenId_);\\n        }\\n        return _slots[tokenId_];\\n    }\\n\\n    function approve(\\n        uint256 tokenId_,\\n        address to_,\\n        uint256 value_\\n    ) external payable virtual override(IERC3525Upgradeable) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId_);\\n        if (to_ == owner) {\\n            revert InvalidApproval(tokenId_, msg.sender, to_);\\n        }\\n\\n        if (!ERC721Upgradeable._isApprovedOrOwner(_msgSender(), tokenId_)) {\\n            revert NotApprovedOrOwner();\\n        }\\n\\n        _approveValue(tokenId_, to_, value_);\\n    }\\n\\n    function allowance(uint256 tokenId_, address operator_) public view virtual override returns (uint256) {\\n        return _approvedValues[tokenId_].allowances[operator_];\\n    }\\n\\n    /**\\n     * @notice Get the total amount of slots stored by the contract.\\n     * @return The total amount of slots\\n     */\\n    function slotCount() external view virtual override returns (uint256) {\\n        return _slotArray.length;\\n    }\\n\\n    /**\\n     * @notice Get the slot at the specified index of all slots stored by the contract.\\n     * @param _index The index in the slot list\\n     * @return The slot at `index` of all slots.\\n     */\\n    function slotByIndex(uint256 _index) external view virtual override returns (uint256) {\\n        return _slotArray[_index];\\n    }\\n\\n    /**\\n     * @notice Get the total amount of tokens with the same slot.\\n     * @param _slot The slot to query token supply for\\n     * @return The total amount of tokens with the specified `_slot`\\n     */\\n    function tokenSupplyInSlot(uint256 _slot) external view virtual override returns (uint256) {\\n        return _tokensBySlot[_slot].length;\\n    }\\n\\n    /**\\n     * @notice Get the token at the specified index of all tokens with the same slot.\\n     * @param _slot The slot to query tokens with\\n     * @param _index The index in the token list of the slot\\n     * @return The token ID at `_index` of all tokens with `_slot`\\n     */\\n    function tokenInSlotByIndex(uint256 _slot, uint256 _index) external view virtual override returns (uint256) {\\n        return _tokensBySlot[_slot][_index];\\n    }\\n\\n    function tokenFractions(uint256 _slot) internal view virtual returns (uint256[] memory) {\\n        uint256 tokenSupply = _tokensBySlot[_slot].length;\\n        uint256[] memory fractions = new uint256[](tokenSupply);\\n        for (uint256 i = 0; i < 25 && i < tokenSupply; i++) {\\n            fractions[i] = balanceOf(_tokensBySlot[_slot][i]);\\n        }\\n        return fractions;\\n    }\\n\\n    function transferFrom(\\n        uint256 fromTokenId_,\\n        address to_,\\n        uint256 value_\\n    ) public payable virtual override returns (uint256 newTokenId) {\\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\\n\\n        newTokenId = _getNewTokenId(fromTokenId_);\\n        _mint(to_, newTokenId, _slots[fromTokenId_]);\\n        _transfer(fromTokenId_, newTokenId, value_);\\n    }\\n\\n    function transferFrom(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_\\n    ) public payable virtual override {\\n        _spendAllowance(_msgSender(), fromTokenId_, value_);\\n\\n        _transfer(fromTokenId_, toTokenId_, value_);\\n    }\\n\\n    function contractURI() public view virtual override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;{\\\",\\n                    '\\\"name\\\":',\\n                    name(),\\n                    \\\",\\\"\\n                    '\\\"symbol\\\":',\\n                    symbol(),\\n                    \\\"}\\\"\\n                )\\n            );\\n    }\\n\\n    /*******************\\n     * INTERNAL\\n     ******************/\\n\\n    function _mint(\\n        address to_,\\n        uint256 tokenId_,\\n        uint256 slot_\\n    ) internal {\\n        ERC721Upgradeable._mint(to_, tokenId_);\\n        _slots[tokenId_] = slot_;\\n        if (_tokensBySlot[slot_].length == 0) {\\n            _slotArray.push(slot_);\\n        }\\n        _tokensBySlot[slot_].push(tokenId_);\\n        emit SlotChanged(tokenId_, 0, slot_);\\n        _tokenCounter += 1;\\n    }\\n\\n    function _mintValue(\\n        address to_,\\n        uint256 tokenId_,\\n        uint256 slot_,\\n        uint256 value_\\n    ) internal virtual {\\n        if (to_ == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        if (tokenId_ == 0) {\\n            revert InvalidID(tokenId_);\\n        }\\n        if (_exists(tokenId_)) {\\n            revert AlreadyMinted(tokenId_);\\n        }\\n\\n        _mint(to_, tokenId_, slot_);\\n\\n        _beforeValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\\n        _values[tokenId_] = value_;\\n        _afterValueTransfer(address(0), to_, 0, tokenId_, slot_, value_);\\n\\n        emit TransferValue(0, tokenId_, value_);\\n    }\\n\\n    function _burn(uint256 tokenId_) internal virtual override(ERC721Upgradeable) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId_);\\n\\n        if (msg.sender != owner) {\\n            revert NotApprovedOrOwner();\\n        }\\n        uint256 slot = _slots[tokenId_];\\n        uint256 value = _values[tokenId_];\\n\\n        ERC721Upgradeable._burn(tokenId_);\\n\\n        _beforeValueTransfer(owner, address(0), tokenId_, 0, slot, value);\\n        delete _slots[tokenId_];\\n        delete _values[tokenId_];\\n        _afterValueTransfer(owner, address(0), tokenId_, 0, slot, value);\\n\\n        emit TransferValue(tokenId_, 0, value);\\n        emit SlotChanged(tokenId_, slot, 0);\\n    }\\n\\n    function _transfer(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_\\n    ) internal virtual {\\n        if (!_exists(fromTokenId_)) {\\n            revert NonExistentToken(fromTokenId_);\\n        }\\n        if (!_exists(toTokenId_)) {\\n            revert NonExistentToken(toTokenId_);\\n        }\\n\\n        if (value_ > _values[fromTokenId_]) {\\n            revert InsufficientBalance(value_, _values[fromTokenId_]);\\n        }\\n\\n        if (_slots[fromTokenId_] != _slots[toTokenId_]) {\\n            revert SlotsMismatch(fromTokenId_, toTokenId_);\\n        }\\n\\n        address from = ERC721Upgradeable.ownerOf(fromTokenId_);\\n        address to = ERC721Upgradeable.ownerOf(toTokenId_);\\n        _beforeValueTransfer(from, to, fromTokenId_, toTokenId_, _slots[fromTokenId_], value_);\\n\\n        _values[fromTokenId_] -= value_;\\n        _values[toTokenId_] += value_;\\n\\n        _afterValueTransfer(from, to, fromTokenId_, toTokenId_, _slots[fromTokenId_], value_);\\n\\n        emit TransferValue(fromTokenId_, toTokenId_, value_);\\n    }\\n\\n    function _spendAllowance(\\n        address operator_,\\n        uint256 tokenId_,\\n        uint256 value_\\n    ) internal virtual {\\n        uint256 currentAllowance = ERC3525Upgradeable.allowance(tokenId_, operator_);\\n        if (!_isApprovedOrOwner(operator_, tokenId_) && currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value_) {\\n                revert InsufficientAllowance(value_, currentAllowance);\\n            }\\n            _approveValue(tokenId_, operator_, currentAllowance - value_);\\n        }\\n    }\\n\\n    function _approveValue(\\n        uint256 tokenId_,\\n        address to_,\\n        uint256 value_\\n    ) internal virtual {\\n        ApproveData storage approveData = _approvedValues[tokenId_];\\n        approveData.approvals.push(to_);\\n        approveData.allowances[to_] = value_;\\n\\n        emit ApprovalValue(tokenId_, to_, value_);\\n    }\\n\\n    function _getNewTokenId(\\n        uint256 /*fromTokenId_*/\\n    ) internal virtual returns (uint256) {\\n        return _tokenCounter + 1;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721EnumerableUpgradeable, ERC721Upgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        // clear approve data\\n        uint256 length = _approvedValues[tokenId].approvals.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address approval = _approvedValues[tokenId].approvals[i];\\n            delete _approvedValues[tokenId].allowances[approval];\\n        }\\n        delete _approvedValues[tokenId].approvals;\\n    }\\n\\n    function _checkOnERC3525Received(\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 value_,\\n        bytes memory data_\\n    ) private returns (bool) {\\n        address to = ERC721Upgradeable.ownerOf((toTokenId_));\\n        if (to.isContract() && IERC165Upgradeable(to).supportsInterface(type(IERC3525Receiver).interfaceId)) {\\n            try IERC3525Receiver(to).onERC3525Received(_msgSender(), fromTokenId_, toTokenId_, value_, data_) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC3525Receiver.onERC3525Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC3525: transfer to non ERC3525Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _beforeValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_ // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {\\n        // empty block\\n    }\\n\\n    function _afterValueTransfer(\\n        address from_,\\n        address to_,\\n        uint256 fromTokenId_,\\n        uint256 toTokenId_,\\n        uint256 slot_,\\n        uint256 value_ // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {\\n        // empty block\\n    }\\n}\\n\",\"keccak256\":\"0xe7e2a15dd750a7a4667523a40e8c4c2d91c109d84a9188cf68c269ffeaf41c91\",\"license\":\"UNLICENSED\"},\"contracts/HyperCertMinter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./ERC3525Upgradeable.sol\\\";\\nimport \\\"./interfaces/IHyperCertMetadata.sol\\\";\\nimport \\\"./utils/ArraysUpgradeable.sol\\\";\\nimport \\\"./utils/StringsExtensions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nerror EmptyInput();\\nerror DuplicateScope();\\nerror InvalidScope();\\nerror InvalidTimeframe(uint64 from, uint64 to);\\nerror ConflictingClaim();\\nerror InvalidInput();\\n\\n/// @title Hypercertificate minting logic\\n/// @notice Contains functions and events to initialize and issue a hypercertificate\\n/// @author bitbeckers, mr_bluesky\\ncontract HyperCertMinter is Initializable, ERC3525Upgradeable, AccessControlUpgradeable, UUPSUpgradeable {\\n    using ArraysUpgradeable for uint64[];\\n\\n    /// @notice Contract name\\n    string public constant NAME = \\\"HyperCerts\\\";\\n    /// @notice Token symbol\\n    string public constant SYMBOL = \\\"HCRT\\\";\\n    /// @notice Token value decimals\\n    uint8 public constant DECIMALS = 0;\\n    /// @notice User role required in order to upgrade the contract\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    /// @notice Current version of the contract\\n    uint16 internal _version;\\n    /// @notice Hypercert metadata contract\\n    address internal _metadata;\\n\\n    /// @notice Mapping of id's to work-scopes\\n    mapping(bytes32 => string) public workScopes;\\n    /// @notice Mapping of id's to impact-scopes\\n    mapping(bytes32 => string) public impactScopes;\\n    /// @notice Mapping of id's to rights\\n    mapping(bytes32 => string) public rights;\\n    mapping(address => mapping(bytes32 => bool)) internal _contributorImpacts;\\n    mapping(uint256 => Claim) internal _impactCerts;\\n\\n    struct Claim {\\n        bytes32 claimHash;\\n        uint64[2] workTimeframe;\\n        uint64[2] impactTimeframe;\\n        bytes32[] workScopes;\\n        bytes32[] impactScopes;\\n        bytes32[] rights;\\n        address[] contributors;\\n        uint256 totalUnits;\\n        uint16 version;\\n        bool exists;\\n        string name;\\n        string description;\\n        string uri;\\n    }\\n\\n    /*******************\\n     * EVENTS\\n     ******************/\\n\\n    /// @notice Emitted when an impact is claimed.\\n    /// @param id Id of the claimed impact.\\n    /// @param minter Address of cert minter.\\n    /// @param fractions Units of tokens issued under the hypercert.\\n    event ImpactClaimed(uint256 id, address minter, uint64[] fractions);\\n\\n    /// @notice Emitted when a new impact scope is added.\\n    /// @param id Id of the impact scope.\\n    /// @param text Short text code of the impact scope.\\n    event ImpactScopeAdded(bytes32 id, string text);\\n\\n    /// @notice Emitted when a new right is added.\\n    /// @param id Id of the right.\\n    /// @param text Short text code of the right.\\n    event RightAdded(bytes32 id, string text);\\n\\n    /// @notice Emitted when a new work scope is added.\\n    /// @param id Id of the work scope.\\n    /// @param text Short text code of the work scope.\\n    event WorkScopeAdded(bytes32 id, string text);\\n\\n    /*******************\\n     * DEPLOY\\n     ******************/\\n\\n    /// @notice Contract constructor logic\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract initialization logic\\n    function initialize(address metadataAddress) public initializer {\\n        _metadata = metadataAddress;\\n\\n        __ERC721Burnable_init();\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    /*******************\\n     * PUBLIC\\n     ******************/\\n\\n    /// @notice Adds a new impact scope\\n    /// @param text Text representing the impact scope\\n    /// @return id Id of the impact scope\\n    function addImpactScope(string memory text) public returns (bytes32 id) {\\n        id = _authorizeAdd(text, impactScopes);\\n        impactScopes[id] = text;\\n        emit ImpactScopeAdded(id, text);\\n    }\\n\\n    /// @notice Adds a new right\\n    /// @param text Text representing the right\\n    /// @return id Id of the right\\n    function addRight(string memory text) public returns (bytes32 id) {\\n        id = _authorizeAdd(text, rights);\\n        rights[id] = text;\\n        emit RightAdded(id, text);\\n    }\\n\\n    /// @notice Adds a new work scope\\n    /// @param text Text representing the work scope\\n    /// @return id Id of the work scope\\n    function addWorkScope(string memory text) public returns (bytes32 id) {\\n        id = _authorizeAdd(text, workScopes);\\n        workScopes[id] = text;\\n        emit WorkScopeAdded(id, text);\\n    }\\n\\n    /// @notice Issues a new hypercertificate\\n    /// @param account Account issuing the new hypercertificate\\n    /// @param data Data representing the parameters of the claim\\n    function mint(address account, bytes calldata data) public virtual {\\n        // Parse data to get Claim\\n        (Claim memory claim, uint64[] memory fractions) = _parseData(data);\\n\\n        _authorizeMint(account, claim);\\n\\n        // Check on overlapping contributor-claims and store if success\\n        _storeContributorsClaims(claim.claimHash, claim.contributors);\\n\\n        uint256 slot = uint256(claim.claimHash);\\n        // Store impact cert\\n        _impactCerts[slot] = claim;\\n\\n        // Mint impact cert\\n        uint256 len = fractions.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 tokenID = _getNewTokenId(0);\\n            _mintValue(account, tokenID, slot, fractions[i]);\\n        }\\n\\n        emit ImpactClaimed(slot, account, fractions);\\n    }\\n\\n    function split(uint256 tokenId, uint256[] calldata amounts) public {\\n        if (!_exists(tokenId)) revert NonExistentToken(tokenId);\\n\\n        uint256 total;\\n\\n        uint256 amountsLength = amounts.length;\\n        if (amounts.length == 1) revert AlreadyMinted(tokenId);\\n\\n        for (uint256 i; i < amountsLength; i++) {\\n            total += amounts[i];\\n        }\\n\\n        if (total > balanceOf(tokenId) || total < balanceOf(tokenId)) revert InvalidInput();\\n\\n        uint256 len = amounts.length;\\n        uint256 slotID = slotOf(tokenId);\\n        for (uint256 i = 1; i < len; i++) {\\n            uint256 newTokenID = _getNewTokenId(0);\\n            _mint(msg.sender, newTokenID, slotID);\\n            _transfer(tokenId, newTokenID, amounts[i]);\\n        }\\n    }\\n\\n    function merge(uint256[] memory tokenIds) public {\\n        uint256 len = tokenIds.length;\\n        uint256 targetTokenId = tokenIds[len - 1];\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            if (tokenId != targetTokenId) {\\n                _transfer(tokenId, targetTokenId, balanceOf(tokenId));\\n                _burn(tokenId);\\n            }\\n        }\\n    }\\n\\n    function donate(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n\\n    /// @notice Gets the impact claim with the specified id\\n    /// @param claimID Id of the claim\\n    /// @return The claim, if it doesn't exist with default values\\n    function getImpactCert(uint256 claimID) public view returns (Claim memory) {\\n        return _impactCerts[claimID];\\n    }\\n\\n    /// @notice gets the current version of the contract\\n    function version() public view virtual returns (uint256) {\\n        return _version;\\n    }\\n\\n    /// @notice Update the contract version number\\n    /// @notice Only allowed for member of UPGRADER_ROLE\\n    function updateVersion() external onlyRole(UPGRADER_ROLE) {\\n        _version += 1;\\n    }\\n\\n    /// @notice Returns a flag indicating if the contract supports the specified interface\\n    /// @param interfaceId Id of the interface\\n    /// @return true, if the interface is supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC3525Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public pure override(ERC721Upgradeable, IERC721MetadataUpgradeable) returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function symbol() public pure override(ERC721Upgradeable, IERC721MetadataUpgradeable) returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function valueDecimals() public view virtual override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function getHash(\\n        uint64[2] memory workTimeframe_,\\n        bytes32[] memory workScopes_,\\n        uint64[2] memory impactTimeframe_,\\n        bytes32[] memory impactScopes_\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(workTimeframe_, workScopes_, impactTimeframe_, impactScopes_));\\n    }\\n\\n    function slotURI(uint256 slotId_) external view returns (string memory) {\\n        return IHyperCertMetadata(_metadata).generateSlotURI(slotId_);\\n    }\\n\\n    function tokenURI(uint256 tokenId_)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC721MetadataUpgradeable)\\n        returns (string memory)\\n    {\\n        return IHyperCertMetadata(_metadata).generateTokenURI(slotOf(tokenId_), tokenId_);\\n    }\\n\\n    function contractURI()\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return IHyperCertMetadata(_metadata).generateContractURI();\\n    }\\n\\n    /*******************\\n     * INTERNAL\\n     ******************/\\n\\n    /// @notice upgrade authorization logic\\n    /// @dev adds onlyRole(UPGRADER_ROLE) requirement\\n    function _authorizeUpgrade(\\n        address /*newImplementation*/\\n    )\\n        internal\\n        view\\n        override\\n        onlyRole(UPGRADER_ROLE) // solhint-disable-next-line no-empty-blocks\\n    {\\n        //empty block\\n    }\\n\\n    /// @notice Pre-add validation checks\\n    /// @param text Text to be added\\n    /// @param map Storage mapping that will be appended\\n    function _authorizeAdd(string memory text, mapping(bytes32 => string) storage map)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32 id)\\n    {\\n        if (bytes(text).length == 0) {\\n            revert EmptyInput();\\n        }\\n        id = keccak256(abi.encode(text));\\n        if (_hasKey(map, id)) {\\n            revert DuplicateScope();\\n        }\\n    }\\n\\n    /// @notice Pre-mint validation checks\\n    /// @param account Destination address for the mint\\n    /// @param claim Impact claim data\\n    /* solhint-disable code-complexity */\\n\\n    function _authorizeMint(address account, Claim memory claim) internal view virtual {\\n        if (account == address(0)) {\\n            revert ToZeroAddress();\\n        }\\n        if (claim.workTimeframe[0] > claim.workTimeframe[1]) {\\n            revert InvalidTimeframe(claim.workTimeframe[0], claim.workTimeframe[1]);\\n        }\\n        if (claim.impactTimeframe[0] > claim.impactTimeframe[1]) {\\n            revert InvalidTimeframe(claim.impactTimeframe[0], claim.impactTimeframe[1]);\\n        }\\n        if (claim.workTimeframe[0] > claim.impactTimeframe[0]) {\\n            revert InvalidTimeframe(claim.workTimeframe[0], claim.impactTimeframe[0]);\\n        }\\n\\n        uint256 impactScopelength = claim.impactScopes.length;\\n        for (uint256 i = 0; i < impactScopelength; i++) {\\n            if (bytes(impactScopes[claim.impactScopes[i]]).length == 0) {\\n                revert InvalidScope();\\n            }\\n        }\\n\\n        uint256 workScopelength = claim.workScopes.length;\\n        for (uint256 i = 0; i < workScopelength; i++) {\\n            if (!_hasKey(workScopes, claim.workScopes[i])) {\\n                revert InvalidScope();\\n            }\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n\\n    /// @notice Parse bytes to Claim and URI\\n    /// @param data Byte data representing the claim\\n    /// @dev This function is overridable in order to support future schema changes\\n    /// @return claim The parsed Claim struct\\n    /// @return Claim metadata URI\\n    function _parseData(bytes calldata data) internal pure virtual returns (Claim memory claim, uint64[] memory) {\\n        if (data.length == 0) {\\n            revert EmptyInput();\\n        }\\n\\n        (\\n            bytes32[] memory rights_,\\n            bytes32[] memory workScopes_,\\n            bytes32[] memory impactScopes_,\\n            uint64[2] memory workTimeframe,\\n            uint64[2] memory impactTimeframe,\\n            address[] memory contributors,\\n            string memory name_,\\n            string memory description_,\\n            string memory uri_,\\n            uint64[] memory fractions\\n        ) = abi.decode(\\n                data,\\n                (bytes32[], bytes32[], bytes32[], uint64[2], uint64[2], address[], string, string, string, uint64[])\\n            );\\n\\n        claim.claimHash = getHash(workTimeframe, workScopes_, impactTimeframe, impactScopes_);\\n        claim.contributors = contributors;\\n        claim.workTimeframe = workTimeframe;\\n        claim.impactTimeframe = impactTimeframe;\\n        claim.workScopes = workScopes_;\\n        claim.impactScopes = impactScopes_;\\n        claim.rights = rights_;\\n        claim.totalUnits = fractions.getSum();\\n        claim.version = uint16(0);\\n        claim.exists = true;\\n        claim.name = name_;\\n        claim.description = description_;\\n        claim.uri = uri_;\\n\\n        return (claim, fractions);\\n    }\\n\\n    /// @notice Stores contributor claims in the `contributorImpacts` mapping; guards against overlapping claims\\n    /// @param claimHash Claim data hash-code value\\n    /// @param creators Array of addresses for contributors\\n    function _storeContributorsClaims(bytes32 claimHash, address[] memory creators) internal {\\n        for (uint256 i = 0; i < creators.length; i++) {\\n            if (_contributorImpacts[creators[i]][claimHash]) {\\n                revert ConflictingClaim();\\n            }\\n            _contributorImpacts[creators[i]][claimHash] = true;\\n        }\\n    }\\n\\n    /// @notice Checks whether the supplied mapping contains the supplied key\\n    /// @param map mapping to search\\n    /// @param key key to search\\n    /// @return true, if the key exists in the mapping\\n    function _hasKey(mapping(bytes32 => string) storage map, bytes32 key) internal view returns (bool) {\\n        return (bytes(map[key]).length > 0);\\n    }\\n}\\n\",\"keccak256\":\"0x70dc25f95b9ff0a325f639eb8d4e5f92e5d59f85dfd0d802da60cc3fdf96dbc9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC3525Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC-3525 Semi-Fungible Token Standard, optional extension for metadata\\n * @dev Interfaces for any contract that wants to support query of the Uniform Resource Identifier\\n *  (URI) for the ERC3525 contract as well as a specified slot.\\n *  Because of the higher reliability of data stored in smart contracts compared to data stored in\\n *  centralized systems, it is recommended that metadata, including `contractURI`, `slotURI` and\\n *  `tokenURI`, be directly returned in JSON format, instead of being returned with a url pointing\\n *  to any resource stored in a centralized system.\\n *  See https://eips.ethereum.org/EIPS/eip-3525\\n * Note: the ERC-165 identifier for this interface is 0xe1600902.\\n */\\ninterface IERC3525MetadataUpgradeable is IERC3525Upgradeable, IERC721MetadataUpgradeable {\\n    /**\\n     * @notice Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract.\\n     * @dev This function SHOULD return the URI for this contract in JSON format, starting with\\n     *  header `data:application/json;`.\\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.\\n     * @return The JSON formatted URI of the current ERC3525 contract\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the Uniform Resource Identifier (URI) for the specified slot.\\n     * @dev This function SHOULD return the URI for `_slot` in JSON format, starting with header\\n     *  `data:application/json;`.\\n     *  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for slot URI.\\n     * @return The JSON formatted URI of `_slot`\\n     */\\n    function slotURI(uint256 _slot) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xab24377dec100bbfb8eda8ae3e8030aada3097e42f4061853ecc81b330af94ff\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-3525 token receiver interface\\n * @dev Interface for any contract that wants to be informed by EIP-3525 contracts when receiving values from other\\n *      addresses.\\n * Note: the EIP-165 identifier for this interface is 0x009ce20b.\\n */\\ninterface IERC3525Receiver {\\n    /**\\n     * @notice Handle the receipt of an EIP-3525 token value.\\n     * @dev An EIP-3525 smart contract MUST check whether this function is implemented by the recipient contract, if the\\n     *  recipient contract implements this function, the EIP-3525 contract MUST call this function after a\\n     *  value transfer (i.e. `transferFrom(uint256,uint256,uint256,bytes)`).\\n     *  MUST return 0x009ce20b (i.e. `bytes4(keccak256('onERC3525Received(address,uint256,uint256,\\n     *  uint256,bytes)'))`) if the transfer is accepted.\\n     *  MUST revert or return any value other than 0x009ce20b if the transfer is rejected.\\n     *  The EIP-3525 smart contract that calls this function MUST revert the transfer transaction if the return value\\n     *  is not equal to 0x009ce20b.\\n     * @param _operator The address which triggered the transfer\\n     * @param _fromTokenId The token id to transfer value from\\n     * @param _toTokenId The token id to transfer value to\\n     * @param _value The transferred value\\n     * @param _data Additional data with no specified format\\n     * @return `bytes4(keccak256('onERC3525Received(address,uint256,uint256,uint256,bytes)'))`\\n     *  unless the transfer is rejected.\\n     */\\n    function onERC3525Received(\\n        address _operator,\\n        uint256 _fromTokenId,\\n        uint256 _toTokenId,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7ccb546405ab096944efb2f21a5b5cf75b22ea8250cf07f9c05d70508a19ca67\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525SlotEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC3525Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @title EIP-3525 Semi-Fungible Token Standard, optional extension for slot enumeration\\n * @dev Interfaces for any contract that wants to support enumeration of slots as well as tokens\\n *  with the same slot.\\n * Note: the EIP-165 identifier for this interface is 0x3b741b9e.\\n */\\ninterface IERC3525SlotEnumerableUpgradeable is IERC3525Upgradeable, IERC721EnumerableUpgradeable {\\n    /**\\n     * @notice Get the total amount of slots stored by the contract.\\n     * @return The total amount of slots\\n     */\\n    function slotCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the slot at the specified index of all slots stored by the contract.\\n     * @param _index The index in the slot list\\n     * @return The slot at `index` of all slots.\\n     */\\n    function slotByIndex(uint256 _index) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total amount of tokens with the same slot.\\n     * @param _slot The slot to query token supply for\\n     * @return The total amount of tokens with the specified `_slot`\\n     */\\n    function tokenSupplyInSlot(uint256 _slot) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the token at the specified index of all tokens with the same slot.\\n     * @param _slot The slot to query tokens with\\n     * @param _index The index in the token list of the slot\\n     * @return The token ID at `_index` of all tokens with `_slot`\\n     */\\n    function tokenInSlotByIndex(uint256 _slot, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2398f15d912889197635f97c6fa761092d31e352d5f9fd6b6238c74c63896b06\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC3525Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-3525 Semi-Fungible Token Standard\\n * Note: the EIP-165 identifier for this interface is 0xd5358140.\\n * @dev See https://eips.ethereum.org/EIPS/eip-3525\\n */\\ninterface IERC3525Upgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev MUST emit when value of a token is transferred to another token with the same slot,\\n     *  including zero value transfers (_value == 0) as well as transfers when tokens are created\\n     *  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).\\n     * @param _fromTokenId The token id to transfer value from\\n     * @param _toTokenId The token id to transfer value to\\n     * @param _value The transferred value\\n     */\\n    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);\\n\\n    /**\\n     * @dev MUST emit when the approval value of a token is set or changed.\\n     * @param _tokenId The token to approve\\n     * @param _operator The operator to approve for\\n     * @param _value The maximum value that `_operator` is allowed to manage\\n     */\\n    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);\\n\\n    /**\\n     * @dev MUST emit when the slot of a token is set or changed.\\n     * @param _tokenId The token of which slot is set or changed\\n     * @param _oldSlot The previous slot of the token\\n     * @param _newSlot The updated slot of the token\\n     */\\n    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);\\n\\n    /**\\n     * @notice Get the number of decimals the token uses for value - e.g. 6, means the user\\n     *  representation of the value of a token can be calculated by dividing it by 1,000,000.\\n     *  Considering the compatibility with third-party wallets, this function is defined as\\n     *  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens.\\n     * @return The number of decimals for value\\n     */\\n    function valueDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the value of a token.\\n     * @param _tokenId The token for which to query the balance\\n     * @return The value of `_tokenId`\\n     */\\n    function balanceOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the slot of a token.\\n     * @param _tokenId The identifier for a token\\n     * @return The slot of the token\\n     */\\n    function slotOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Allow an operator to manage the value of a token, up to the `_value`.\\n     * @dev MUST revert unless caller is the current owner, an authorized operator, or the approved\\n     *  address for `_tokenId`.\\n     *  MUST emit the ApprovalValue event.\\n     * @param _tokenId The token to approve\\n     * @param _operator The operator to be approved\\n     * @param _value The maximum value of `_toTokenId` that `_operator` is allowed to manage\\n     */\\n    function approve(\\n        uint256 _tokenId,\\n        address _operator,\\n        uint256 _value\\n    ) external payable;\\n\\n    /**\\n     * @notice Get the maximum value of a token that an operator is allowed to manage.\\n     * @param _tokenId The token for which to query the allowance\\n     * @param _operator The address of an operator\\n     * @return The current approval value of `_tokenId` that `_operator` is allowed to manage\\n     */\\n    function allowance(uint256 _tokenId, address _operator) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfer value from a specified token to another specified token with the same slot.\\n     * @dev Caller MUST be the current owner, an authorized operator or an operator who has been\\n     *  approved the whole `_fromTokenId` or part of it.\\n     *  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.\\n     *  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.\\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\\n     *  operator.\\n     *  MUST emit `TransferValue` event.\\n     * @param _fromTokenId The token to transfer value from\\n     * @param _toTokenId The token to transfer value to\\n     * @param _value The transferred value\\n     */\\n    function transferFrom(\\n        uint256 _fromTokenId,\\n        uint256 _toTokenId,\\n        uint256 _value\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfer value from a specified token to an address. The caller should confirm that\\n     *  `_to` is capable of receiving EIP-3525 tokens.\\n     * @dev This function MUST create a new EIP-3525 token with the same slot for `_to`,\\n     *  or find an existing token with the same slot owned by `_to`, to receive the transferred value.\\n     *  MUST revert if `_fromTokenId` is zero token id or does not exist.\\n     *  MUST revert if `_to` is zero address.\\n     *  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the\\n     *  operator.\\n     *  MUST emit `Transfer` and `TransferValue` events.\\n     * @param _fromTokenId The token to transfer value from\\n     * @param _to The address to transfer value to\\n     * @param _value The transferred value\\n     * @return ID of the token which receives the transferred value\\n     */\\n    function transferFrom(\\n        uint256 _fromTokenId,\\n        address _to,\\n        uint256 _value\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6af91b4b57a480ae7150bad7a49e1656b78525af82f725dbac86d8843fd6b460\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHyperCertMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Hypercert metadata generator interface\\n */\\ninterface IHyperCertMetadata {\\n    function generateContractURI() external view returns (string memory);\\n\\n    function generateSlotURI(uint256 slotId) external view returns (string memory);\\n\\n    function generateTokenURI(uint256 slotId, uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xebb3f8e922f27c92018d6f9e84a2cfce0b4e5b3024a728eeab34012c3e36814a\",\"license\":\"UNLICENSED\"},\"contracts/utils/ArraysUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StringsUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the sum of the elements of an array\\n     */\\n    function getSum(uint64[] memory array) internal pure returns (uint64) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint64 sum = 0;\\n        for (uint256 i = 0; i < array.length; i++) sum += array[i];\\n        return sum;\\n    }\\n\\n    function toString(uint64[2] memory array) internal pure returns (string memory) {\\n        return string(abi.encodePacked('[\\\"', uint256(array[0]).toString(), '\\\",\\\"', uint256(array[1]).toString(), '\\\"]'));\\n    }\\n\\n    function toCsv(uint256[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = array[i].toString();\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n\\n    function toCsv(string[] memory array) internal pure returns (string memory) {\\n        uint256 len = array.length;\\n        string memory result;\\n        for (uint256 i = 0; i < len; i++) {\\n            string memory s = string(abi.encodePacked('\\\"', array[i], '\\\"'));\\n            if (bytes(result).length == 0) result = s;\\n            else result = string(abi.encodePacked(result, \\\",\\\", s));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xb716e2b5d07932b16bd0188b72be81f2bedfcb8bade90f23c97afffdba0eb9e1\",\"license\":\"UNLICENSED\"},\"contracts/utils/StringsExtensions.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary StringsExtensions {\\n    /**\\n     * @dev returns either \\\"true\\\" or \\\"false\\\"\\n     */\\n    function toString(bool value) internal pure returns (string memory) {\\n        if (value) return \\\"true\\\";\\n        return \\\"false\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x46befa55244793ab2f808a81c55b254f059f60c07386a611160b4da0c8894081\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516153de62000120600039600081816110a90152818161112e015281816113160152818161139b015261152501526153de6000f3fe6080604052600436106103805760003560e01c806369c67247116101d1578063b88d4fde11610102578063e8a3d485116100a0578063f0f11e051161006f578063f0f11e0514610ae2578063f14faf6f14610b02578063f72c0d8b14610b22578063f76f8d7814610b5657600080fd5b8063e8a3d48514610a4f578063e985e9c514610a64578063ed08fa8014610aad578063ef6f66d714610ac257600080fd5b8063d52fd095116100dc578063d52fd095146109a8578063d547741f146109c8578063de62d842146109e8578063e345e0bc14610a0857600080fd5b8063b88d4fde14610948578063c4d66de814610968578063c87b56dd1461098857600080fd5b8063993bef8d1161016f578063a217fddf11610149578063a217fddf146108bd578063a22cb465146108d2578063a3f4df7e146108f2578063b510391f1461092857600080fd5b8063993bef8d1461085d578063997edc611461087d5780639cc7f7081461089d57600080fd5b80638cb0a511116101ab5780638cb0a511146107b65780638f88b767146107c957806391d14854146107e957806395d89b411461083057600080fd5b806369c672471461074957806370a082311461076957806372927aa31461078957600080fd5b80632f2ff15d116102b657806342966c68116102545780634f8a0f83116102235780634f8a0f83146106cd57806352d1902d146106fa57806354fd4d501461070f5780636352211e1461072957600080fd5b806342966c681461066557806348c02dc1146106855780634f1ef2861461069a5780634f6ccce7146106ad57600080fd5b806336568abe1161029057806336568abe146105f15780633659cfe6146106115780633e7e86691461063157806342842e0e1461064557600080fd5b80632f2ff15d1461059e5780632f745c59146105be578063310ed7f0146105de57600080fd5b806311e322081161032357806323b872dd116102fd57806323b872dd14610506578063248a9ca314610526578063263f3e7e146105575780632e0f26251461057757600080fd5b806311e32208146104b157806318160ddd146104d15780631e6ad4b8146104e657600080fd5b8063081812fc1161035f578063081812fc14610424578063095ea7b31461045c57806309c3dd871461047e5780630f485c021461049e57600080fd5b8062cd01101461038557806301ffc9a7146103b857806306fdde03146103e8575b600080fd5b34801561039157600080fd5b506103a56103a0366004614417565b610b86565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103d86103d336600461444f565b610bba565b60405190151581526020016103af565b3480156103f457600080fd5b5060408051808201909152600a8152694879706572436572747360b01b60208201525b6040516103af91906144bc565b34801561043057600080fd5b5061044461043f3660046144cf565b610bc5565b6040516001600160a01b0390911681526020016103af565b34801561046857600080fd5b5061047c610477366004614504565b610bec565b005b34801561048a57600080fd5b506104176104993660046144cf565b610d06565b6103a56104ac36600461452e565b610d80565b3480156104bd57600080fd5b506103a56104cc3660046146c8565b610dc8565b3480156104dd57600080fd5b506099546103a5565b3480156104f257600080fd5b506103a56105013660046147c8565b610e02565b34801561051257600080fd5b5061047c6105213660046147fd565b610e6b565b34801561053257600080fd5b506103a56105413660046144cf565b6000908152610101602052604090206001015490565b34801561056357600080fd5b506103a56105723660046144cf565b610ee4565b34801561058357600080fd5b5061058c600081565b60405160ff90911681526020016103af565b3480156105aa57600080fd5b5061047c6105b9366004614829565b610f2f565b3480156105ca57600080fd5b506103a56105d9366004614504565b610f55565b61047c6105ec366004614855565b610ffd565b3480156105fd57600080fd5b5061047c61060c366004614829565b611013565b34801561061d57600080fd5b5061047c61062c366004614881565b61109f565b34801561063d57600080fd5b50600061058c565b34801561065157600080fd5b5061047c6106603660046147fd565b61121a565b34801561067157600080fd5b5061047c6106803660046144cf565b611235565b34801561069157600080fd5b5061047c6112aa565b61047c6106a836600461489c565b61130c565b3480156106b957600080fd5b506103a56106c83660046144cf565b611474565b3480156106d957600080fd5b506103a56106e83660046144cf565b600090815260ff602052604090205490565b34801561070657600080fd5b506103a5611518565b34801561071b57600080fd5b506101975461ffff166103a5565b34801561073557600080fd5b506104446107443660046144cf565b6115dd565b34801561075557600080fd5b5061047c6107643660046148ea565b611642565b34801561077557600080fd5b506103a5610784366004614881565b611793565b34801561079557600080fd5b506107a96107a43660046144cf565b61182d565b6040516103af9190614a0a565b61047c6107c436600461452e565b611c7b565b3480156107d557600080fd5b506104176107e43660046144cf565b611d09565b3480156107f557600080fd5b506103d8610804366004614829565b6000918252610101602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561083c57600080fd5b506040805180820190915260048152631210d49560e21b6020820152610417565b34801561086957600080fd5b506103a56108783660046144cf565b611da4565b34801561088957600080fd5b506103a56108983660046147c8565b611db9565b3480156108a957600080fd5b506103a56108b83660046144cf565b611e15565b3480156108c957600080fd5b506103a5600081565b3480156108de57600080fd5b5061047c6108ed366004614b56565b611e60565b3480156108fe57600080fd5b506104176040518060400160405280600a8152602001694879706572436572747360b01b81525081565b34801561093457600080fd5b5061047c610943366004614b92565b611e6b565b34801561095457600080fd5b5061047c610963366004614c02565b612070565b34801561097457600080fd5b5061047c610983366004614881565b6120e9565b34801561099457600080fd5b506104176109a33660046144cf565b612287565b3480156109b457600080fd5b506104176109c33660046144cf565b6122d2565b3480156109d457600080fd5b5061047c6109e3366004614829565b6122ec565b3480156109f457600080fd5b5061047c610a03366004614c5e565b612312565b348015610a1457600080fd5b506103a5610a23366004614829565b600082815260fc602090815260408083206001600160a01b038516845260010190915290205492915050565b348015610a5b57600080fd5b5061041761239b565b348015610a7057600080fd5b506103d8610a7f366004614cef565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610ab957600080fd5b5060fe546103a5565b348015610ace57600080fd5b50610417610add3660046144cf565b61241e565b348015610aee57600080fd5b506103a5610afd3660046147c8565b612438565b348015610b0e57600080fd5b5061047c610b1d3660046144cf565b6112a1565b348015610b2e57600080fd5b506103a57f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610b6257600080fd5b50610417604051806040016040528060048152602001631210d49560e21b81525081565b600082815260ff60205260408120805483908110610ba657610ba6614d19565b906000526020600020015490505b92915050565b6000610bb482612494565b6000610bd0826124b9565b506000908152606960205260409020546001600160a01b031690565b6000610bf7826115dd565b9050806001600160a01b0316836001600160a01b031603610c695760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610c855750610c858133610a7f565b610cf75760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610c60565b610d01838361251d565b505050565b610197546040516391383c8960e01b8152600481018390526060916201000090046001600160a01b0316906391383c89906024015b600060405180830381865afa158015610d58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb49190810190614d2f565b6000610d8d33858461258b565b610d968461260e565b9050610db6838260fd600088815260200190815260200160002054612620565b610dc18482846126f3565b9392505050565b600084848484604051602001610de19493929190614d9d565b6040516020818303038152906040528051906020012090505b949350505050565b6000610e108261019961289a565b600081815261019960205260409020909150610e2c8382614e5c565b507f2efcce702e3d0b95b3deb632da6d41c3d169e0c3effb9066d949f14d6f13224f8183604051610e5e929190614f1c565b60405180910390a1919050565b610e76335b8261290f565b610ed95760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610c60565b610d0183838361298d565b6000818152606760205260408120546001600160a01b0316610f1c576040516338077a2b60e01b815260048101839052602401610c60565b50600090815260fd602052604090205490565b60008281526101016020526040902060010154610f4b81612b4c565b610d018383612b56565b6000610f6083611793565b8210610fd45760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610c60565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b61100833848361258b565b610d018383836126f3565b6001600160a01b03811633146110915760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610c60565b61109b8282612bfa565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361112c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610c60565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146111f25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610c60565b6111fb81612c7f565b6040805160008082526020820190925261121791839190612ca9565b50565b610d0183838360405180602001604052806000815250612070565b61123e33610e70565b6112a15760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610c60565b61121781612e49565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36112d481612b4c565b6101978054600191906000906112ef90849061ffff16614f4b565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610c60565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461145f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610c60565b61146882612c7f565b61109b82826001612ca9565b600061147f60995490565b82106114f35760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610c60565b6099828154811061150657611506614d19565b90600052602060002001549050919050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115b85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610c60565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000818152606760205260408120546001600160a01b031680610bb45760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c60565b6000838152606760205260409020546001600160a01b031661167a576040516338077a2b60e01b815260048101849052602401610c60565b60008160018190036116a2576040516314b27b7f60e31b815260048101869052602401610c60565b60005b818110156116e5578484828181106116bf576116bf614d19565b90506020020135836116d19190614f66565b9250806116dd81614f79565b9150506116a5565b506116ef85611e15565b821180611703575061170085611e15565b82105b156117215760405163b4fa3fb360e01b815260040160405180910390fd5b82600061172d87610ee4565b905060015b82811015611789576000611746600061260e565b9050611753338285612620565b61177689828a8a8681811061176a5761176a614d19565b905060200201356126f3565b508061178181614f79565b915050611732565b5050505050505050565b60006001600160a01b0382166118115760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610c60565b506001600160a01b031660009081526068602052604090205490565b611835614213565b600082815261019c6020908152604080832081516101a0810183528154815282518084019384905290949193850192909160018501916002918390855b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161187257505050928452505060408051808201918290526020909301929150600284810191826000855b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116118da579050505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561197657602002820191906000526020600020905b815481526020019060010190808311611962575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156119ce57602002820191906000526020600020905b8154815260200190600101908083116119ba575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611a2657602002820191906000526020600020905b815481526020019060010190808311611a12575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611a8857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a6a575b505050918352505060078201546020820152600882015461ffff8116604083015262010000900460ff1615156060820152600982018054608090920191611ace90614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611afa90614ddc565b8015611b475780601f10611b1c57610100808354040283529160200191611b47565b820191906000526020600020905b815481529060010190602001808311611b2a57829003601f168201915b50505050508152602001600a82018054611b6090614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8c90614ddc565b8015611bd95780601f10611bae57610100808354040283529160200191611bd9565b820191906000526020600020905b815481529060010190602001808311611bbc57829003601f168201915b50505050508152602001600b82018054611bf290614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1e90614ddc565b8015611c6b5780601f10611c4057610100808354040283529160200191611c6b565b820191906000526020600020905b815481529060010190602001808311611c4e57829003601f168201915b5050505050815250509050919050565b6000611c86846115dd565b9050806001600160a01b0316836001600160a01b031603611cd15760405162ea9f2160e81b8152600481018590523360248201526001600160a01b0384166044820152606401610c60565b611cdb338561290f565b611cf85760405163390cdd9b60e21b815260040160405180910390fd5b611d03848484612f28565b50505050565b6101986020526000908152604090208054611d2390614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4f90614ddc565b8015611d9c5780601f10611d7157610100808354040283529160200191611d9c565b820191906000526020600020905b815481529060010190602001808311611d7f57829003601f168201915b505050505081565b600060fe828154811061150657611506614d19565b6000611dc78261019861289a565b600081815261019860205260409020909150611de38382614e5c565b507f8b841033bc947e807d9766c542105a3dbb0bae62591be7b5c8cd4f37f698bf738183604051610e5e929190614f1c565b6000818152606760205260408120546001600160a01b0316611e4d576040516338077a2b60e01b815260048101839052602401610c60565b50600090815260fb602052604090205490565b61109b338383612fb2565b600080611e788484613080565b91509150611e86858361315e565b611e9882600001518360c00151613335565b8151600081815261019c602090815260409091208451815590840151849190611ec7906001830190600261428e565b506040820151611edd906002808401919061428e565b5060608201518051611ef9916003840191602090910190614336565b5060808201518051611f15916004840191602090910190614336565b5060a08201518051611f31916005840191602090910190614336565b5060c08201518051611f4d916006840191602090910190614371565b5060e082015160078201556101008201516008820180546101208501511515620100000262ffffff1990911661ffff909316929092179190911790556101408201516009820190611f9e9082614e5c565b50610160820151600a820190611fb49082614e5c565b50610180820151600b820190611fca9082614e5c565b50508251905060005b8181101561202b576000611fe7600061260e565b905061201889828688868151811061200157612001614d19565b602002602001015167ffffffffffffffff16613414565b508061202381614f79565b915050611fd3565b507f99ba308ef0906cce9332a23fc9ff0c458c3eb58aa3f023baa558fe9539d520f682888560405161205f93929190614f92565b60405180910390a150505050505050565b61207a338361290f565b6120dd5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610c60565b611d03848484846134e8565b600054610100900460ff16158080156121095750600054600160ff909116105b806121235750303b158015612123575060005460ff166001145b6121955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c60565b6000805460ff1916600117905580156121b8576000805461ff0019166101001790555b61019780547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038516021790556121f9613571565b612201613571565b612209613571565b612214600033612b56565b61223e7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333612b56565b801561109b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610197546060906201000090046001600160a01b031663ed03f41a6122ab84610ee4565b846040518363ffffffff1660e01b8152600401610d3b929190918252602082015260400190565b61019a6020526000908152604090208054611d2390614ddc565b6000828152610101602052604090206001015461230881612b4c565b610d018383612bfa565b8051600082612322600184614ffa565b8151811061233257612332614d19565b6020026020010151905060005b82811015611d0357600084828151811061235b5761235b614d19565b602002602001015190508281146123885761237f818461237a84611e15565b6126f3565b61238881612e49565b508061239381614f79565b91505061233f565b606061019760029054906101000a90046001600160a01b03166001600160a01b0316639f4475da6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156123f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124199190810190614d2f565b905090565b6101996020526000908152604090208054611d2390614ddc565b60006124468261019a61289a565b600081815261019a602052604090209091506124628382614e5c565b507f4527d373276b1ece0c8dd18e140572f93feffd35a0993d9e4de70623b1ac93ce8183604051610e5e929190614f1c565b60006001600160e01b03198216637965db0b60e01b1480610bb45750610bb4826135f0565b6000818152606760205260409020546001600160a01b03166112175760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c60565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612552826115dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600082815260fc602090815260408083206001600160a01b03871684526001019091529020546125bb848461290f565b1580156125ca57506000198114155b15611d0357818110156125fa5760405163054365bb60e31b81526004810183905260248101829052604401610c60565b611d0383856126098585614ffa565b612f28565b6000610100546001610bb49190614f66565b61262a838361364b565b600082815260fd6020908152604080832084905583835260ff90915281205490036126855760fe80546001810182556000919091527f54075df80ec1ae6ac9100e1fd0ebf3246c17f5c933137af392011f4c5f61513a018190555b600081815260ff6020908152604080832080546001810182559084529183209091018490555182919084907fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb65908390a4600161010060008282546126e99190614f66565b9091555050505050565b6000838152606760205260409020546001600160a01b031661272b576040516338077a2b60e01b815260048101849052602401610c60565b6000828152606760205260409020546001600160a01b0316612763576040516338077a2b60e01b815260048101839052602401610c60565b600083815260fb60205260409020548111156127ad57600083815260fb60205260409081902054905163cf47918160e01b8152610c60918391600401918252602082015260400190565b600082815260fd602052604080822054858352912054146127eb57604051630240901360e61b81526004810184905260248101839052604401610c60565b60006127f6846115dd565b90506000612803846115dd565b600086815260fb6020526040812080549293508592909190612826908490614ffa565b9091555050600084815260fb602052604081208054859290612849908490614f66565b9091555050600085905260fd60205283857f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc68560405161288b91815260200190565b60405180910390a35050505050565b600082516000036128be5760405163a447fc5360e01b815260040160405180910390fd5b826040516020016128cf91906144bc565b6040516020818303038152906040528051906020012090506128f182826137a1565b15610bb45760405163331d850160e01b815260040160405180910390fd5b60008061291b836115dd565b9050806001600160a01b0316846001600160a01b0316148061296257506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80610dfa5750836001600160a01b031661297b84610bc5565b6001600160a01b031614949350505050565b826001600160a01b03166129a0826115dd565b6001600160a01b031614612a1c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c60565b6001600160a01b038216612a7e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c60565b612a898383836137c8565b612a9460008261251d565b6001600160a01b0383166000908152606860205260408120805460019290612abd908490614ffa565b90915550506001600160a01b0382166000908152606860205260408120805460019290612aeb908490614f66565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611217813361386a565b6000828152610101602090815260408083206001600160a01b038516845290915290205460ff1661109b576000828152610101602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612bb63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152610101602090815260408083206001600160a01b038516845290915290205460ff161561109b576000828152610101602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361109b81612b4c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612cdc57610d01836138eb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612d36575060408051601f3d908101601f19168201909252612d339181019061500d565b60015b612da85760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610c60565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612e3d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610c60565b50610d018383836139a9565b6000612e54826115dd565b9050336001600160a01b03821614612e7f5760405163390cdd9b60e21b815260040160405180910390fd5b600082815260fd602090815260408083205460fb90925290912054612ea3846139ce565b600084815260fd6020908152604080832083905560fb82528083208390555183815286917f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc6910160405180910390a3600082857fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a450505050565b600083815260fc6020908152604080832080546001808201835582865284862090910180546001600160a01b0319166001600160a01b038916908117909155808652908201845293829020859055905184815290929186917f621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b91015b60405180910390a350505050565b816001600160a01b0316836001600160a01b0316036130135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c60565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613088614213565b606060008390036130ac5760405163a447fc5360e01b815260040160405180910390fd5b60008080808080808080806130c38d8f018f6150ea565b99509950995099509950995099509950995099506130e3878a888b610dc8565b8c5260c08c0185905260208c0187905260408c0186905260608c0189905260808c0188905260a08c018a905261311881613a75565b67ffffffffffffffff1660e08d015260006101008d015260016101208d01526101408c01939093526101608b01919091526101808a015296505050505050509250929050565b6001600160a01b03821661318557604051630c63e1ed60e11b815260040160405180910390fd5b60208181015190810151905167ffffffffffffffff918216911611156131e257602081015180519060015b6020020151604051630b58ad1560e21b815267ffffffffffffffff928316600482015291166024820152604401610c60565b60408101516020810151905167ffffffffffffffff9182169116111561321157604081015180519060016131b0565b60408101515160208201515167ffffffffffffffff9182169116111561324357602081015151604082015160006131b0565b60808101515160005b818110156132c45761019960008460800151838151811061326f5761326f614d19565b60200260200101518152602001908152602001600020805461329090614ddc565b90506000036132b25760405163725a844f60e01b815260040160405180910390fd5b806132bc81614f79565b91505061324c565b5060608201515160005b8181101561332e576132ff610198856060015183815181106132f2576132f2614d19565b60200260200101516137a1565b61331c5760405163725a844f60e01b815260040160405180910390fd5b8061332681614f79565b9150506132ce565b5050505050565b60005b8151811015610d015761019b600083838151811061335857613358614d19565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812086825290925290205460ff16156133aa5760405163755402db60e11b815260040160405180910390fd5b600161019b60008484815181106133c3576133c3614d19565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208782529092529020805460ff19169115159190911790558061340c81614f79565b915050613338565b6001600160a01b03841661343b57604051630c63e1ed60e11b815260040160405180910390fd5b8260000361345f5760405163d338ed0760e01b815260048101849052602401610c60565b6000838152606760205260409020546001600160a01b031615613498576040516314b27b7f60e31b815260048101849052602401610c60565b6134a3848484612620565b600083815260fb602052604090208190558260007f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc683604051612fa491815260200190565b6134f384848461298d565b6134ff84848484613ad5565b611d035760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c60565b600054610100900460ff166135ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c60565b565b60006001600160e01b031982166370b0048160e11b148061362157506001600160e01b03198216631dba0dcf60e11b145b8061363c57506001600160e01b03198216630354d60560e61b145b80610bb45750610bb482613c29565b6001600160a01b0382166136a15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c60565b6000818152606760205260409020546001600160a01b0316156137065760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c60565b613712600083836137c8565b6001600160a01b038216600090815260686020526040812080546001929061373b908490614f66565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b505050505050565b600081815260208390526040812080548291906137bd90614ddc565b905011905092915050565b6137d3838383613c4e565b600081815260fc6020526040812054905b8181101561385257600083815260fc6020526040812080548390811061380c5761380c614d19565b600091825260208083209091015486835260fc825260408084206001600160a01b039092168452600191909101909152812055508061384a81614f79565b9150506137e4565b50600082815260fc60205260408120611d03916143c6565b6000828152610101602090815260408083206001600160a01b038516845290915290205460ff1661109b576138a9816001600160a01b03166014613d06565b6138b4836020613d06565b6040516020016138c5929190615251565b60408051601f198184030181529082905262461bcd60e51b8252610c60916004016144bc565b6001600160a01b0381163b6139685760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610c60565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6139b283613eaf565b6000825111806139bf5750805b15610d0157611d038383613eef565b60006139d9826115dd565b90506139e7816000846137c8565b6139f260008361251d565b6001600160a01b0381166000908152606860205260408120805460019290613a1b908490614ffa565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008151600003613a8857506000919050565b6000805b8351811015613ace57838181518110613aa757613aa7614d19565b602002602001015182613aba91906152d2565b915080613ac681614f79565b915050613a8c565b5092915050565b60006001600160a01b0384163b15613c2157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613b199033908990889088906004016152f3565b6020604051808303816000875af1925050508015613b54575060408051601f3d908101601f19168201909252613b5191810190615325565b60015b613c07573d808015613b82576040519150601f19603f3d011682016040523d82523d6000602084013e613b87565b606091505b508051600003613bff5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c60565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dfa565b506001610dfa565b60006001600160e01b0319821663780e9d6360e01b1480610bb45750610bb482613ffa565b6001600160a01b038316613ca957613ca481609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b613ccc565b816001600160a01b0316836001600160a01b031614613ccc57613ccc838261404a565b6001600160a01b038216613ce357610d01816140e7565b826001600160a01b0316826001600160a01b031614610d0157610d018282614196565b60606000613d15836002615342565b613d20906002614f66565b67ffffffffffffffff811115613d3857613d38614563565b6040519080825280601f01601f191660200182016040528015613d62576020820181803683370190505b509050600360fc1b81600081518110613d7d57613d7d614d19565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613dac57613dac614d19565b60200101906001600160f81b031916908160001a9053506000613dd0846002615342565b613ddb906001614f66565b90505b6001811115613e60577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613e1c57613e1c614d19565b1a60f81b828281518110613e3257613e32614d19565b60200101906001600160f81b031916908160001a90535060049490941c93613e5981615361565b9050613dde565b508315610dc15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c60565b613eb8816138eb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613f6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610c60565b600080846001600160a01b031684604051613f899190615378565b600060405180830381855af49150503d8060008114613fc4576040519150601f19603f3d011682016040523d82523d6000602084013e613fc9565b606091505b5091509150613ff182826040518060600160405280602781526020016153ab602791396141da565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b148061402b57506001600160e01b03198216635b5e139f60e01b145b80610bb457506301ffc9a760e01b6001600160e01b0319831614610bb4565b6000600161405784611793565b6140619190614ffa565b6000838152609860205260409020549091508082146140b4576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906140f990600190614ffa565b6000838152609a60205260408120546099805493945090928490811061412157614121614d19565b90600052602060002001549050806099838154811061414257614142614d19565b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061417a5761417a615394565b6001900381819060005260206000200160009055905550505050565b60006141a183611793565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b606083156141e9575081610dc1565b8251156141f95782518084602001fd5b8160405162461bcd60e51b8152600401610c6091906144bc565b604080516101a08101909152600081526020810161422f6143e4565b815260200161423c6143e4565b81526020016060815260200160608152602001606081526020016060815260200160008152602001600061ffff1681526020016000151581526020016060815260200160608152602001606081525090565b6001830191839082156143265791602002820160005b838211156142f057835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555092602001926008016020816007010492830192600103026142a4565b80156143245782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026142f0565b505b50614332929150614402565b5090565b828054828255906000526020600020908101928215614326579160200282015b82811115614326578251825591602001919060010190614356565b828054828255906000526020600020908101928215614326579160200282015b8281111561432657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614391565b50805460008255906000526020600020908101906112179190614402565b60405180604001604052806002906020820280368337509192915050565b5b808211156143325760008155600101614403565b6000806040838503121561442a57600080fd5b50508035926020909101359150565b6001600160e01b03198116811461121757600080fd5b60006020828403121561446157600080fd5b8135610dc181614439565b60005b8381101561448757818101518382015260200161446f565b50506000910152565b600081518084526144a881602086016020860161446c565b601f01601f19169290920160200192915050565b602081526000610dc16020830184614490565b6000602082840312156144e157600080fd5b5035919050565b80356001600160a01b03811681146144ff57600080fd5b919050565b6000806040838503121561451757600080fd5b614520836144e8565b946020939093013593505050565b60008060006060848603121561454357600080fd5b83359250614553602085016144e8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156145a2576145a2614563565b604052919050565b803567ffffffffffffffff811681146144ff57600080fd5b600082601f8301126145d357600080fd5b6040516040810181811067ffffffffffffffff821117156145f6576145f6614563565b806040525080604084018581111561460d57600080fd5b845b8181101561462e57614620816145aa565b83526020928301920161460f565b509195945050505050565b600067ffffffffffffffff82111561465357614653614563565b5060051b60200190565b600082601f83011261466e57600080fd5b8135602061468361467e83614639565b614579565b82815260059290921b840181019181810190868411156146a257600080fd5b8286015b848110156146bd57803583529183019183016146a6565b509695505050505050565b60008060008060c085870312156146de57600080fd5b6146e886866145c2565b9350604085013567ffffffffffffffff8082111561470557600080fd5b6147118883890161465d565b945061472088606089016145c2565b935060a087013591508082111561473657600080fd5b506147438782880161465d565b91505092959194509250565b600067ffffffffffffffff82111561476957614769614563565b50601f01601f191660200190565b600082601f83011261478857600080fd5b813561479661467e8261474f565b8181528460208386010111156147ab57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156147da57600080fd5b813567ffffffffffffffff8111156147f157600080fd5b610dfa84828501614777565b60008060006060848603121561481257600080fd5b61481b846144e8565b9250614553602085016144e8565b6000806040838503121561483c57600080fd5b8235915061484c602084016144e8565b90509250929050565b60008060006060848603121561486a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561489357600080fd5b610dc1826144e8565b600080604083850312156148af57600080fd5b6148b8836144e8565b9150602083013567ffffffffffffffff8111156148d457600080fd5b6148e085828601614777565b9150509250929050565b6000806000604084860312156148ff57600080fd5b83359250602084013567ffffffffffffffff8082111561491e57600080fd5b818601915086601f83011261493257600080fd5b81358181111561494157600080fd5b8760208260051b850101111561495657600080fd5b6020830194508093505050509250925092565b8060005b6002811015611d0357815167ffffffffffffffff1684526020938401939091019060010161496d565b600081518084526020808501945080840160005b838110156149c6578151875295820195908201906001016149aa565b509495945050505050565b600081518084526020808501945080840160005b838110156149c65781516001600160a01b0316875295820195908201906001016149e5565b602081528151602082015260006020830151614a296040840182614969565b506040830151614a3c6080840182614969565b5060608301516101e08060c0850152614a59610200850183614996565b91506080850151601f19808685030160e0870152614a778483614996565b935060a08701519150610100818786030181880152614a968584614996565b945060c08801519250610120828887030181890152614ab586856149d1565b955060e0890151935061014084818a0152828a015194506101609250614ae0838a018661ffff169052565b90890151935061018090614af78983018615159052565b89015188870384016101a08a01529350614b118685614490565b955081890151935082888703016101c0890152614b2e8685614490565b9550808901519350505080868503018387015250614b4c8382614490565b9695505050505050565b60008060408385031215614b6957600080fd5b614b72836144e8565b915060208301358015158114614b8757600080fd5b809150509250929050565b600080600060408486031215614ba757600080fd5b614bb0846144e8565b9250602084013567ffffffffffffffff80821115614bcd57600080fd5b818601915086601f830112614be157600080fd5b813581811115614bf057600080fd5b87602082850101111561495657600080fd5b60008060008060808587031215614c1857600080fd5b614c21856144e8565b9350614c2f602086016144e8565b925060408501359150606085013567ffffffffffffffff811115614c5257600080fd5b61474387828801614777565b60006020808385031215614c7157600080fd5b823567ffffffffffffffff811115614c8857600080fd5b8301601f81018513614c9957600080fd5b8035614ca761467e82614639565b81815260059190911b82018301908381019087831115614cc657600080fd5b928401925b82841015614ce457833582529284019290840190614ccb565b979650505050505050565b60008060408385031215614d0257600080fd5b614d0b836144e8565b915061484c602084016144e8565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d4157600080fd5b815167ffffffffffffffff811115614d5857600080fd5b8201601f81018413614d6957600080fd5b8051614d7761467e8261474f565b818152856020838501011115614d8c57600080fd5b613ff182602083016020860161446c565b614da78186614969565b60c060408201526000614dbd60c0830186614996565b614dca6060840186614969565b82810360a0840152614ce48185614996565b600181811c90821680614df057607f821691505b602082108103614e1057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d0157600081815260208120601f850160051c81016020861015614e3d5750805b601f850160051c820191505b8181101561379957828155600101614e49565b815167ffffffffffffffff811115614e7657614e76614563565b614e8a81614e848454614ddc565b84614e16565b602080601f831160018114614ebf5760008415614ea75750858301515b600019600386901b1c1916600185901b178555613799565b600085815260208120601f198616915b82811015614eee57888601518255948401946001909101908401614ecf565b5085821015614f0c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000610dfa6040830184614490565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115613ace57613ace614f35565b80820180821115610bb457610bb4614f35565b600060018201614f8b57614f8b614f35565b5060010190565b60006060820185835260206001600160a01b0386168185015260606040850152818551808452608086019150828701935060005b81811015614fec57845167ffffffffffffffff1683529383019391830191600101614fc6565b509098975050505050505050565b81810381811115610bb457610bb4614f35565b60006020828403121561501f57600080fd5b5051919050565b600082601f83011261503757600080fd5b8135602061504761467e83614639565b82815260059290921b8401810191818101908684111561506657600080fd5b8286015b848110156146bd5761507b816144e8565b835291830191830161506a565b600082601f83011261509957600080fd5b813560206150a961467e83614639565b82815260059290921b840181019181810190868411156150c857600080fd5b8286015b848110156146bd576150dd816145aa565b83529183019183016150cc565b6000806000806000806000806000806101808b8d03121561510a57600080fd5b8a3567ffffffffffffffff8082111561512257600080fd5b61512e8e838f0161465d565b9b5060208d013591508082111561514457600080fd5b6151508e838f0161465d565b9a5060408d013591508082111561516657600080fd5b6151728e838f0161465d565b99506151818e60608f016145c2565b98506151908e60a08f016145c2565b975060e08d01359150808211156151a657600080fd5b6151b28e838f01615026565b96506101008d01359150808211156151c957600080fd5b6151d58e838f01614777565b95506101208d01359150808211156151ec57600080fd5b6151f88e838f01614777565b94506101408d013591508082111561520f57600080fd5b61521b8e838f01614777565b93506101608d013591508082111561523257600080fd5b5061523f8d828e01615088565b9150509295989b9194979a5092959850565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161528981601785016020880161446c565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516152c681602884016020880161446c565b01602801949350505050565b67ffffffffffffffff818116838216019080821115613ace57613ace614f35565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614b4c6080830184614490565b60006020828403121561533757600080fd5b8151610dc181614439565b600081600019048311821515161561535c5761535c614f35565b500290565b60008161537057615370614f35565b506000190190565b6000825161538a81846020870161446c565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052600436106103805760003560e01c806369c67247116101d1578063b88d4fde11610102578063e8a3d485116100a0578063f0f11e051161006f578063f0f11e0514610ae2578063f14faf6f14610b02578063f72c0d8b14610b22578063f76f8d7814610b5657600080fd5b8063e8a3d48514610a4f578063e985e9c514610a64578063ed08fa8014610aad578063ef6f66d714610ac257600080fd5b8063d52fd095116100dc578063d52fd095146109a8578063d547741f146109c8578063de62d842146109e8578063e345e0bc14610a0857600080fd5b8063b88d4fde14610948578063c4d66de814610968578063c87b56dd1461098857600080fd5b8063993bef8d1161016f578063a217fddf11610149578063a217fddf146108bd578063a22cb465146108d2578063a3f4df7e146108f2578063b510391f1461092857600080fd5b8063993bef8d1461085d578063997edc611461087d5780639cc7f7081461089d57600080fd5b80638cb0a511116101ab5780638cb0a511146107b65780638f88b767146107c957806391d14854146107e957806395d89b411461083057600080fd5b806369c672471461074957806370a082311461076957806372927aa31461078957600080fd5b80632f2ff15d116102b657806342966c68116102545780634f8a0f83116102235780634f8a0f83146106cd57806352d1902d146106fa57806354fd4d501461070f5780636352211e1461072957600080fd5b806342966c681461066557806348c02dc1146106855780634f1ef2861461069a5780634f6ccce7146106ad57600080fd5b806336568abe1161029057806336568abe146105f15780633659cfe6146106115780633e7e86691461063157806342842e0e1461064557600080fd5b80632f2ff15d1461059e5780632f745c59146105be578063310ed7f0146105de57600080fd5b806311e322081161032357806323b872dd116102fd57806323b872dd14610506578063248a9ca314610526578063263f3e7e146105575780632e0f26251461057757600080fd5b806311e32208146104b157806318160ddd146104d15780631e6ad4b8146104e657600080fd5b8063081812fc1161035f578063081812fc14610424578063095ea7b31461045c57806309c3dd871461047e5780630f485c021461049e57600080fd5b8062cd01101461038557806301ffc9a7146103b857806306fdde03146103e8575b600080fd5b34801561039157600080fd5b506103a56103a0366004614417565b610b86565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103d86103d336600461444f565b610bba565b60405190151581526020016103af565b3480156103f457600080fd5b5060408051808201909152600a8152694879706572436572747360b01b60208201525b6040516103af91906144bc565b34801561043057600080fd5b5061044461043f3660046144cf565b610bc5565b6040516001600160a01b0390911681526020016103af565b34801561046857600080fd5b5061047c610477366004614504565b610bec565b005b34801561048a57600080fd5b506104176104993660046144cf565b610d06565b6103a56104ac36600461452e565b610d80565b3480156104bd57600080fd5b506103a56104cc3660046146c8565b610dc8565b3480156104dd57600080fd5b506099546103a5565b3480156104f257600080fd5b506103a56105013660046147c8565b610e02565b34801561051257600080fd5b5061047c6105213660046147fd565b610e6b565b34801561053257600080fd5b506103a56105413660046144cf565b6000908152610101602052604090206001015490565b34801561056357600080fd5b506103a56105723660046144cf565b610ee4565b34801561058357600080fd5b5061058c600081565b60405160ff90911681526020016103af565b3480156105aa57600080fd5b5061047c6105b9366004614829565b610f2f565b3480156105ca57600080fd5b506103a56105d9366004614504565b610f55565b61047c6105ec366004614855565b610ffd565b3480156105fd57600080fd5b5061047c61060c366004614829565b611013565b34801561061d57600080fd5b5061047c61062c366004614881565b61109f565b34801561063d57600080fd5b50600061058c565b34801561065157600080fd5b5061047c6106603660046147fd565b61121a565b34801561067157600080fd5b5061047c6106803660046144cf565b611235565b34801561069157600080fd5b5061047c6112aa565b61047c6106a836600461489c565b61130c565b3480156106b957600080fd5b506103a56106c83660046144cf565b611474565b3480156106d957600080fd5b506103a56106e83660046144cf565b600090815260ff602052604090205490565b34801561070657600080fd5b506103a5611518565b34801561071b57600080fd5b506101975461ffff166103a5565b34801561073557600080fd5b506104446107443660046144cf565b6115dd565b34801561075557600080fd5b5061047c6107643660046148ea565b611642565b34801561077557600080fd5b506103a5610784366004614881565b611793565b34801561079557600080fd5b506107a96107a43660046144cf565b61182d565b6040516103af9190614a0a565b61047c6107c436600461452e565b611c7b565b3480156107d557600080fd5b506104176107e43660046144cf565b611d09565b3480156107f557600080fd5b506103d8610804366004614829565b6000918252610101602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561083c57600080fd5b506040805180820190915260048152631210d49560e21b6020820152610417565b34801561086957600080fd5b506103a56108783660046144cf565b611da4565b34801561088957600080fd5b506103a56108983660046147c8565b611db9565b3480156108a957600080fd5b506103a56108b83660046144cf565b611e15565b3480156108c957600080fd5b506103a5600081565b3480156108de57600080fd5b5061047c6108ed366004614b56565b611e60565b3480156108fe57600080fd5b506104176040518060400160405280600a8152602001694879706572436572747360b01b81525081565b34801561093457600080fd5b5061047c610943366004614b92565b611e6b565b34801561095457600080fd5b5061047c610963366004614c02565b612070565b34801561097457600080fd5b5061047c610983366004614881565b6120e9565b34801561099457600080fd5b506104176109a33660046144cf565b612287565b3480156109b457600080fd5b506104176109c33660046144cf565b6122d2565b3480156109d457600080fd5b5061047c6109e3366004614829565b6122ec565b3480156109f457600080fd5b5061047c610a03366004614c5e565b612312565b348015610a1457600080fd5b506103a5610a23366004614829565b600082815260fc602090815260408083206001600160a01b038516845260010190915290205492915050565b348015610a5b57600080fd5b5061041761239b565b348015610a7057600080fd5b506103d8610a7f366004614cef565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610ab957600080fd5b5060fe546103a5565b348015610ace57600080fd5b50610417610add3660046144cf565b61241e565b348015610aee57600080fd5b506103a5610afd3660046147c8565b612438565b348015610b0e57600080fd5b5061047c610b1d3660046144cf565b6112a1565b348015610b2e57600080fd5b506103a57f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610b6257600080fd5b50610417604051806040016040528060048152602001631210d49560e21b81525081565b600082815260ff60205260408120805483908110610ba657610ba6614d19565b906000526020600020015490505b92915050565b6000610bb482612494565b6000610bd0826124b9565b506000908152606960205260409020546001600160a01b031690565b6000610bf7826115dd565b9050806001600160a01b0316836001600160a01b031603610c695760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610c855750610c858133610a7f565b610cf75760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610c60565b610d01838361251d565b505050565b610197546040516391383c8960e01b8152600481018390526060916201000090046001600160a01b0316906391383c89906024015b600060405180830381865afa158015610d58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb49190810190614d2f565b6000610d8d33858461258b565b610d968461260e565b9050610db6838260fd600088815260200190815260200160002054612620565b610dc18482846126f3565b9392505050565b600084848484604051602001610de19493929190614d9d565b6040516020818303038152906040528051906020012090505b949350505050565b6000610e108261019961289a565b600081815261019960205260409020909150610e2c8382614e5c565b507f2efcce702e3d0b95b3deb632da6d41c3d169e0c3effb9066d949f14d6f13224f8183604051610e5e929190614f1c565b60405180910390a1919050565b610e76335b8261290f565b610ed95760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610c60565b610d0183838361298d565b6000818152606760205260408120546001600160a01b0316610f1c576040516338077a2b60e01b815260048101839052602401610c60565b50600090815260fd602052604090205490565b60008281526101016020526040902060010154610f4b81612b4c565b610d018383612b56565b6000610f6083611793565b8210610fd45760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610c60565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b61100833848361258b565b610d018383836126f3565b6001600160a01b03811633146110915760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610c60565b61109b8282612bfa565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361112c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610c60565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146111f25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610c60565b6111fb81612c7f565b6040805160008082526020820190925261121791839190612ca9565b50565b610d0183838360405180602001604052806000815250612070565b61123e33610e70565b6112a15760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610c60565b61121781612e49565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36112d481612b4c565b6101978054600191906000906112ef90849061ffff16614f4b565b92506101000a81548161ffff021916908361ffff16021790555050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113995760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610c60565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113f47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461145f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610c60565b61146882612c7f565b61109b82826001612ca9565b600061147f60995490565b82106114f35760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610c60565b6099828154811061150657611506614d19565b90600052602060002001549050919050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115b85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610c60565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000818152606760205260408120546001600160a01b031680610bb45760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c60565b6000838152606760205260409020546001600160a01b031661167a576040516338077a2b60e01b815260048101849052602401610c60565b60008160018190036116a2576040516314b27b7f60e31b815260048101869052602401610c60565b60005b818110156116e5578484828181106116bf576116bf614d19565b90506020020135836116d19190614f66565b9250806116dd81614f79565b9150506116a5565b506116ef85611e15565b821180611703575061170085611e15565b82105b156117215760405163b4fa3fb360e01b815260040160405180910390fd5b82600061172d87610ee4565b905060015b82811015611789576000611746600061260e565b9050611753338285612620565b61177689828a8a8681811061176a5761176a614d19565b905060200201356126f3565b508061178181614f79565b915050611732565b5050505050505050565b60006001600160a01b0382166118115760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610c60565b506001600160a01b031660009081526068602052604090205490565b611835614213565b600082815261019c6020908152604080832081516101a0810183528154815282518084019384905290949193850192909160018501916002918390855b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161187257505050928452505060408051808201918290526020909301929150600284810191826000855b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116118da579050505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561197657602002820191906000526020600020905b815481526020019060010190808311611962575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156119ce57602002820191906000526020600020905b8154815260200190600101908083116119ba575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611a2657602002820191906000526020600020905b815481526020019060010190808311611a12575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611a8857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a6a575b505050918352505060078201546020820152600882015461ffff8116604083015262010000900460ff1615156060820152600982018054608090920191611ace90614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611afa90614ddc565b8015611b475780601f10611b1c57610100808354040283529160200191611b47565b820191906000526020600020905b815481529060010190602001808311611b2a57829003601f168201915b50505050508152602001600a82018054611b6090614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8c90614ddc565b8015611bd95780601f10611bae57610100808354040283529160200191611bd9565b820191906000526020600020905b815481529060010190602001808311611bbc57829003601f168201915b50505050508152602001600b82018054611bf290614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1e90614ddc565b8015611c6b5780601f10611c4057610100808354040283529160200191611c6b565b820191906000526020600020905b815481529060010190602001808311611c4e57829003601f168201915b5050505050815250509050919050565b6000611c86846115dd565b9050806001600160a01b0316836001600160a01b031603611cd15760405162ea9f2160e81b8152600481018590523360248201526001600160a01b0384166044820152606401610c60565b611cdb338561290f565b611cf85760405163390cdd9b60e21b815260040160405180910390fd5b611d03848484612f28565b50505050565b6101986020526000908152604090208054611d2390614ddc565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4f90614ddc565b8015611d9c5780601f10611d7157610100808354040283529160200191611d9c565b820191906000526020600020905b815481529060010190602001808311611d7f57829003601f168201915b505050505081565b600060fe828154811061150657611506614d19565b6000611dc78261019861289a565b600081815261019860205260409020909150611de38382614e5c565b507f8b841033bc947e807d9766c542105a3dbb0bae62591be7b5c8cd4f37f698bf738183604051610e5e929190614f1c565b6000818152606760205260408120546001600160a01b0316611e4d576040516338077a2b60e01b815260048101839052602401610c60565b50600090815260fb602052604090205490565b61109b338383612fb2565b600080611e788484613080565b91509150611e86858361315e565b611e9882600001518360c00151613335565b8151600081815261019c602090815260409091208451815590840151849190611ec7906001830190600261428e565b506040820151611edd906002808401919061428e565b5060608201518051611ef9916003840191602090910190614336565b5060808201518051611f15916004840191602090910190614336565b5060a08201518051611f31916005840191602090910190614336565b5060c08201518051611f4d916006840191602090910190614371565b5060e082015160078201556101008201516008820180546101208501511515620100000262ffffff1990911661ffff909316929092179190911790556101408201516009820190611f9e9082614e5c565b50610160820151600a820190611fb49082614e5c565b50610180820151600b820190611fca9082614e5c565b50508251905060005b8181101561202b576000611fe7600061260e565b905061201889828688868151811061200157612001614d19565b602002602001015167ffffffffffffffff16613414565b508061202381614f79565b915050611fd3565b507f99ba308ef0906cce9332a23fc9ff0c458c3eb58aa3f023baa558fe9539d520f682888560405161205f93929190614f92565b60405180910390a150505050505050565b61207a338361290f565b6120dd5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610c60565b611d03848484846134e8565b600054610100900460ff16158080156121095750600054600160ff909116105b806121235750303b158015612123575060005460ff166001145b6121955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c60565b6000805460ff1916600117905580156121b8576000805461ff0019166101001790555b61019780547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038516021790556121f9613571565b612201613571565b612209613571565b612214600033612b56565b61223e7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333612b56565b801561109b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610197546060906201000090046001600160a01b031663ed03f41a6122ab84610ee4565b846040518363ffffffff1660e01b8152600401610d3b929190918252602082015260400190565b61019a6020526000908152604090208054611d2390614ddc565b6000828152610101602052604090206001015461230881612b4c565b610d018383612bfa565b8051600082612322600184614ffa565b8151811061233257612332614d19565b6020026020010151905060005b82811015611d0357600084828151811061235b5761235b614d19565b602002602001015190508281146123885761237f818461237a84611e15565b6126f3565b61238881612e49565b508061239381614f79565b91505061233f565b606061019760029054906101000a90046001600160a01b03166001600160a01b0316639f4475da6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156123f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124199190810190614d2f565b905090565b6101996020526000908152604090208054611d2390614ddc565b60006124468261019a61289a565b600081815261019a602052604090209091506124628382614e5c565b507f4527d373276b1ece0c8dd18e140572f93feffd35a0993d9e4de70623b1ac93ce8183604051610e5e929190614f1c565b60006001600160e01b03198216637965db0b60e01b1480610bb45750610bb4826135f0565b6000818152606760205260409020546001600160a01b03166112175760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c60565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612552826115dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600082815260fc602090815260408083206001600160a01b03871684526001019091529020546125bb848461290f565b1580156125ca57506000198114155b15611d0357818110156125fa5760405163054365bb60e31b81526004810183905260248101829052604401610c60565b611d0383856126098585614ffa565b612f28565b6000610100546001610bb49190614f66565b61262a838361364b565b600082815260fd6020908152604080832084905583835260ff90915281205490036126855760fe80546001810182556000919091527f54075df80ec1ae6ac9100e1fd0ebf3246c17f5c933137af392011f4c5f61513a018190555b600081815260ff6020908152604080832080546001810182559084529183209091018490555182919084907fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb65908390a4600161010060008282546126e99190614f66565b9091555050505050565b6000838152606760205260409020546001600160a01b031661272b576040516338077a2b60e01b815260048101849052602401610c60565b6000828152606760205260409020546001600160a01b0316612763576040516338077a2b60e01b815260048101839052602401610c60565b600083815260fb60205260409020548111156127ad57600083815260fb60205260409081902054905163cf47918160e01b8152610c60918391600401918252602082015260400190565b600082815260fd602052604080822054858352912054146127eb57604051630240901360e61b81526004810184905260248101839052604401610c60565b60006127f6846115dd565b90506000612803846115dd565b600086815260fb6020526040812080549293508592909190612826908490614ffa565b9091555050600084815260fb602052604081208054859290612849908490614f66565b9091555050600085905260fd60205283857f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc68560405161288b91815260200190565b60405180910390a35050505050565b600082516000036128be5760405163a447fc5360e01b815260040160405180910390fd5b826040516020016128cf91906144bc565b6040516020818303038152906040528051906020012090506128f182826137a1565b15610bb45760405163331d850160e01b815260040160405180910390fd5b60008061291b836115dd565b9050806001600160a01b0316846001600160a01b0316148061296257506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80610dfa5750836001600160a01b031661297b84610bc5565b6001600160a01b031614949350505050565b826001600160a01b03166129a0826115dd565b6001600160a01b031614612a1c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c60565b6001600160a01b038216612a7e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c60565b612a898383836137c8565b612a9460008261251d565b6001600160a01b0383166000908152606860205260408120805460019290612abd908490614ffa565b90915550506001600160a01b0382166000908152606860205260408120805460019290612aeb908490614f66565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611217813361386a565b6000828152610101602090815260408083206001600160a01b038516845290915290205460ff1661109b576000828152610101602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612bb63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152610101602090815260408083206001600160a01b038516845290915290205460ff161561109b576000828152610101602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361109b81612b4c565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612cdc57610d01836138eb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612d36575060408051601f3d908101601f19168201909252612d339181019061500d565b60015b612da85760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610c60565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612e3d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610c60565b50610d018383836139a9565b6000612e54826115dd565b9050336001600160a01b03821614612e7f5760405163390cdd9b60e21b815260040160405180910390fd5b600082815260fd602090815260408083205460fb90925290912054612ea3846139ce565b600084815260fd6020908152604080832083905560fb82528083208390555183815286917f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc6910160405180910390a3600082857fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a450505050565b600083815260fc6020908152604080832080546001808201835582865284862090910180546001600160a01b0319166001600160a01b038916908117909155808652908201845293829020859055905184815290929186917f621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b91015b60405180910390a350505050565b816001600160a01b0316836001600160a01b0316036130135760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c60565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613088614213565b606060008390036130ac5760405163a447fc5360e01b815260040160405180910390fd5b60008080808080808080806130c38d8f018f6150ea565b99509950995099509950995099509950995099506130e3878a888b610dc8565b8c5260c08c0185905260208c0187905260408c0186905260608c0189905260808c0188905260a08c018a905261311881613a75565b67ffffffffffffffff1660e08d015260006101008d015260016101208d01526101408c01939093526101608b01919091526101808a015296505050505050509250929050565b6001600160a01b03821661318557604051630c63e1ed60e11b815260040160405180910390fd5b60208181015190810151905167ffffffffffffffff918216911611156131e257602081015180519060015b6020020151604051630b58ad1560e21b815267ffffffffffffffff928316600482015291166024820152604401610c60565b60408101516020810151905167ffffffffffffffff9182169116111561321157604081015180519060016131b0565b60408101515160208201515167ffffffffffffffff9182169116111561324357602081015151604082015160006131b0565b60808101515160005b818110156132c45761019960008460800151838151811061326f5761326f614d19565b60200260200101518152602001908152602001600020805461329090614ddc565b90506000036132b25760405163725a844f60e01b815260040160405180910390fd5b806132bc81614f79565b91505061324c565b5060608201515160005b8181101561332e576132ff610198856060015183815181106132f2576132f2614d19565b60200260200101516137a1565b61331c5760405163725a844f60e01b815260040160405180910390fd5b8061332681614f79565b9150506132ce565b5050505050565b60005b8151811015610d015761019b600083838151811061335857613358614d19565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812086825290925290205460ff16156133aa5760405163755402db60e11b815260040160405180910390fd5b600161019b60008484815181106133c3576133c3614d19565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208782529092529020805460ff19169115159190911790558061340c81614f79565b915050613338565b6001600160a01b03841661343b57604051630c63e1ed60e11b815260040160405180910390fd5b8260000361345f5760405163d338ed0760e01b815260048101849052602401610c60565b6000838152606760205260409020546001600160a01b031615613498576040516314b27b7f60e31b815260048101849052602401610c60565b6134a3848484612620565b600083815260fb602052604090208190558260007f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc683604051612fa491815260200190565b6134f384848461298d565b6134ff84848484613ad5565b611d035760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c60565b600054610100900460ff166135ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c60565b565b60006001600160e01b031982166370b0048160e11b148061362157506001600160e01b03198216631dba0dcf60e11b145b8061363c57506001600160e01b03198216630354d60560e61b145b80610bb45750610bb482613c29565b6001600160a01b0382166136a15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c60565b6000818152606760205260409020546001600160a01b0316156137065760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c60565b613712600083836137c8565b6001600160a01b038216600090815260686020526040812080546001929061373b908490614f66565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b505050505050565b600081815260208390526040812080548291906137bd90614ddc565b905011905092915050565b6137d3838383613c4e565b600081815260fc6020526040812054905b8181101561385257600083815260fc6020526040812080548390811061380c5761380c614d19565b600091825260208083209091015486835260fc825260408084206001600160a01b039092168452600191909101909152812055508061384a81614f79565b9150506137e4565b50600082815260fc60205260408120611d03916143c6565b6000828152610101602090815260408083206001600160a01b038516845290915290205460ff1661109b576138a9816001600160a01b03166014613d06565b6138b4836020613d06565b6040516020016138c5929190615251565b60408051601f198184030181529082905262461bcd60e51b8252610c60916004016144bc565b6001600160a01b0381163b6139685760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610c60565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6139b283613eaf565b6000825111806139bf5750805b15610d0157611d038383613eef565b60006139d9826115dd565b90506139e7816000846137c8565b6139f260008361251d565b6001600160a01b0381166000908152606860205260408120805460019290613a1b908490614ffa565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008151600003613a8857506000919050565b6000805b8351811015613ace57838181518110613aa757613aa7614d19565b602002602001015182613aba91906152d2565b915080613ac681614f79565b915050613a8c565b5092915050565b60006001600160a01b0384163b15613c2157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613b199033908990889088906004016152f3565b6020604051808303816000875af1925050508015613b54575060408051601f3d908101601f19168201909252613b5191810190615325565b60015b613c07573d808015613b82576040519150601f19603f3d011682016040523d82523d6000602084013e613b87565b606091505b508051600003613bff5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c60565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dfa565b506001610dfa565b60006001600160e01b0319821663780e9d6360e01b1480610bb45750610bb482613ffa565b6001600160a01b038316613ca957613ca481609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b613ccc565b816001600160a01b0316836001600160a01b031614613ccc57613ccc838261404a565b6001600160a01b038216613ce357610d01816140e7565b826001600160a01b0316826001600160a01b031614610d0157610d018282614196565b60606000613d15836002615342565b613d20906002614f66565b67ffffffffffffffff811115613d3857613d38614563565b6040519080825280601f01601f191660200182016040528015613d62576020820181803683370190505b509050600360fc1b81600081518110613d7d57613d7d614d19565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613dac57613dac614d19565b60200101906001600160f81b031916908160001a9053506000613dd0846002615342565b613ddb906001614f66565b90505b6001811115613e60577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613e1c57613e1c614d19565b1a60f81b828281518110613e3257613e32614d19565b60200101906001600160f81b031916908160001a90535060049490941c93613e5981615361565b9050613dde565b508315610dc15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c60565b613eb8816138eb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613f6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610c60565b600080846001600160a01b031684604051613f899190615378565b600060405180830381855af49150503d8060008114613fc4576040519150601f19603f3d011682016040523d82523d6000602084013e613fc9565b606091505b5091509150613ff182826040518060600160405280602781526020016153ab602791396141da565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b148061402b57506001600160e01b03198216635b5e139f60e01b145b80610bb457506301ffc9a760e01b6001600160e01b0319831614610bb4565b6000600161405784611793565b6140619190614ffa565b6000838152609860205260409020549091508082146140b4576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906140f990600190614ffa565b6000838152609a60205260408120546099805493945090928490811061412157614121614d19565b90600052602060002001549050806099838154811061414257614142614d19565b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061417a5761417a615394565b6001900381819060005260206000200160009055905550505050565b60006141a183611793565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b606083156141e9575081610dc1565b8251156141f95782518084602001fd5b8160405162461bcd60e51b8152600401610c6091906144bc565b604080516101a08101909152600081526020810161422f6143e4565b815260200161423c6143e4565b81526020016060815260200160608152602001606081526020016060815260200160008152602001600061ffff1681526020016000151581526020016060815260200160608152602001606081525090565b6001830191839082156143265791602002820160005b838211156142f057835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555092602001926008016020816007010492830192600103026142a4565b80156143245782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026142f0565b505b50614332929150614402565b5090565b828054828255906000526020600020908101928215614326579160200282015b82811115614326578251825591602001919060010190614356565b828054828255906000526020600020908101928215614326579160200282015b8281111561432657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614391565b50805460008255906000526020600020908101906112179190614402565b60405180604001604052806002906020820280368337509192915050565b5b808211156143325760008155600101614403565b6000806040838503121561442a57600080fd5b50508035926020909101359150565b6001600160e01b03198116811461121757600080fd5b60006020828403121561446157600080fd5b8135610dc181614439565b60005b8381101561448757818101518382015260200161446f565b50506000910152565b600081518084526144a881602086016020860161446c565b601f01601f19169290920160200192915050565b602081526000610dc16020830184614490565b6000602082840312156144e157600080fd5b5035919050565b80356001600160a01b03811681146144ff57600080fd5b919050565b6000806040838503121561451757600080fd5b614520836144e8565b946020939093013593505050565b60008060006060848603121561454357600080fd5b83359250614553602085016144e8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156145a2576145a2614563565b604052919050565b803567ffffffffffffffff811681146144ff57600080fd5b600082601f8301126145d357600080fd5b6040516040810181811067ffffffffffffffff821117156145f6576145f6614563565b806040525080604084018581111561460d57600080fd5b845b8181101561462e57614620816145aa565b83526020928301920161460f565b509195945050505050565b600067ffffffffffffffff82111561465357614653614563565b5060051b60200190565b600082601f83011261466e57600080fd5b8135602061468361467e83614639565b614579565b82815260059290921b840181019181810190868411156146a257600080fd5b8286015b848110156146bd57803583529183019183016146a6565b509695505050505050565b60008060008060c085870312156146de57600080fd5b6146e886866145c2565b9350604085013567ffffffffffffffff8082111561470557600080fd5b6147118883890161465d565b945061472088606089016145c2565b935060a087013591508082111561473657600080fd5b506147438782880161465d565b91505092959194509250565b600067ffffffffffffffff82111561476957614769614563565b50601f01601f191660200190565b600082601f83011261478857600080fd5b813561479661467e8261474f565b8181528460208386010111156147ab57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156147da57600080fd5b813567ffffffffffffffff8111156147f157600080fd5b610dfa84828501614777565b60008060006060848603121561481257600080fd5b61481b846144e8565b9250614553602085016144e8565b6000806040838503121561483c57600080fd5b8235915061484c602084016144e8565b90509250929050565b60008060006060848603121561486a57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561489357600080fd5b610dc1826144e8565b600080604083850312156148af57600080fd5b6148b8836144e8565b9150602083013567ffffffffffffffff8111156148d457600080fd5b6148e085828601614777565b9150509250929050565b6000806000604084860312156148ff57600080fd5b83359250602084013567ffffffffffffffff8082111561491e57600080fd5b818601915086601f83011261493257600080fd5b81358181111561494157600080fd5b8760208260051b850101111561495657600080fd5b6020830194508093505050509250925092565b8060005b6002811015611d0357815167ffffffffffffffff1684526020938401939091019060010161496d565b600081518084526020808501945080840160005b838110156149c6578151875295820195908201906001016149aa565b509495945050505050565b600081518084526020808501945080840160005b838110156149c65781516001600160a01b0316875295820195908201906001016149e5565b602081528151602082015260006020830151614a296040840182614969565b506040830151614a3c6080840182614969565b5060608301516101e08060c0850152614a59610200850183614996565b91506080850151601f19808685030160e0870152614a778483614996565b935060a08701519150610100818786030181880152614a968584614996565b945060c08801519250610120828887030181890152614ab586856149d1565b955060e0890151935061014084818a0152828a015194506101609250614ae0838a018661ffff169052565b90890151935061018090614af78983018615159052565b89015188870384016101a08a01529350614b118685614490565b955081890151935082888703016101c0890152614b2e8685614490565b9550808901519350505080868503018387015250614b4c8382614490565b9695505050505050565b60008060408385031215614b6957600080fd5b614b72836144e8565b915060208301358015158114614b8757600080fd5b809150509250929050565b600080600060408486031215614ba757600080fd5b614bb0846144e8565b9250602084013567ffffffffffffffff80821115614bcd57600080fd5b818601915086601f830112614be157600080fd5b813581811115614bf057600080fd5b87602082850101111561495657600080fd5b60008060008060808587031215614c1857600080fd5b614c21856144e8565b9350614c2f602086016144e8565b925060408501359150606085013567ffffffffffffffff811115614c5257600080fd5b61474387828801614777565b60006020808385031215614c7157600080fd5b823567ffffffffffffffff811115614c8857600080fd5b8301601f81018513614c9957600080fd5b8035614ca761467e82614639565b81815260059190911b82018301908381019087831115614cc657600080fd5b928401925b82841015614ce457833582529284019290840190614ccb565b979650505050505050565b60008060408385031215614d0257600080fd5b614d0b836144e8565b915061484c602084016144e8565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d4157600080fd5b815167ffffffffffffffff811115614d5857600080fd5b8201601f81018413614d6957600080fd5b8051614d7761467e8261474f565b818152856020838501011115614d8c57600080fd5b613ff182602083016020860161446c565b614da78186614969565b60c060408201526000614dbd60c0830186614996565b614dca6060840186614969565b82810360a0840152614ce48185614996565b600181811c90821680614df057607f821691505b602082108103614e1057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d0157600081815260208120601f850160051c81016020861015614e3d5750805b601f850160051c820191505b8181101561379957828155600101614e49565b815167ffffffffffffffff811115614e7657614e76614563565b614e8a81614e848454614ddc565b84614e16565b602080601f831160018114614ebf5760008415614ea75750858301515b600019600386901b1c1916600185901b178555613799565b600085815260208120601f198616915b82811015614eee57888601518255948401946001909101908401614ecf565b5085821015614f0c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000610dfa6040830184614490565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115613ace57613ace614f35565b80820180821115610bb457610bb4614f35565b600060018201614f8b57614f8b614f35565b5060010190565b60006060820185835260206001600160a01b0386168185015260606040850152818551808452608086019150828701935060005b81811015614fec57845167ffffffffffffffff1683529383019391830191600101614fc6565b509098975050505050505050565b81810381811115610bb457610bb4614f35565b60006020828403121561501f57600080fd5b5051919050565b600082601f83011261503757600080fd5b8135602061504761467e83614639565b82815260059290921b8401810191818101908684111561506657600080fd5b8286015b848110156146bd5761507b816144e8565b835291830191830161506a565b600082601f83011261509957600080fd5b813560206150a961467e83614639565b82815260059290921b840181019181810190868411156150c857600080fd5b8286015b848110156146bd576150dd816145aa565b83529183019183016150cc565b6000806000806000806000806000806101808b8d03121561510a57600080fd5b8a3567ffffffffffffffff8082111561512257600080fd5b61512e8e838f0161465d565b9b5060208d013591508082111561514457600080fd5b6151508e838f0161465d565b9a5060408d013591508082111561516657600080fd5b6151728e838f0161465d565b99506151818e60608f016145c2565b98506151908e60a08f016145c2565b975060e08d01359150808211156151a657600080fd5b6151b28e838f01615026565b96506101008d01359150808211156151c957600080fd5b6151d58e838f01614777565b95506101208d01359150808211156151ec57600080fd5b6151f88e838f01614777565b94506101408d013591508082111561520f57600080fd5b61521b8e838f01614777565b93506101608d013591508082111561523257600080fd5b5061523f8d828e01615088565b9150509295989b9194979a5092959850565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161528981601785016020880161446c565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516152c681602884016020880161446c565b01602801949350505050565b67ffffffffffffffff818116838216019080821115613ace57613ace614f35565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614b4c6080830184614490565b60006020828403121561533757600080fd5b8151610dc181614439565b600081600019048311821515161561535c5761535c614f35565b500290565b60008161537057615370614f35565b506000190190565b6000825161538a81846020870161446c565b9190910192915050565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000810000a",
  "devdoc": {
    "author": "bitbeckers, mr_bluesky",
    "events": {
      "ImpactClaimed(uint256,address,uint64[])": {
        "params": {
          "fractions": "Units of tokens issued under the hypercert.",
          "id": "Id of the claimed impact.",
          "minter": "Address of cert minter."
        }
      },
      "ImpactScopeAdded(bytes32,string)": {
        "params": {
          "id": "Id of the impact scope.",
          "text": "Short text code of the impact scope."
        }
      },
      "RightAdded(bytes32,string)": {
        "params": {
          "id": "Id of the right.",
          "text": "Short text code of the right."
        }
      },
      "WorkScopeAdded(bytes32,string)": {
        "params": {
          "id": "Id of the work scope.",
          "text": "Short text code of the work scope."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addImpactScope(string)": {
        "params": {
          "text": "Text representing the impact scope"
        },
        "returns": {
          "id": "Id of the impact scope"
        }
      },
      "addRight(string)": {
        "params": {
          "text": "Text representing the right"
        },
        "returns": {
          "id": "Id of the right"
        }
      },
      "addWorkScope(string)": {
        "params": {
          "text": "Text representing the work scope"
        },
        "returns": {
          "id": "Id of the work scope"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "contractURI()": {
        "details": "This function SHOULD return the URI for this contract in JSON format, starting with  header `data:application/json;`.  See https://eips.ethereum.org/EIPS/eip-3525 for the JSON schema for contract URI.",
        "returns": {
          "_0": "The JSON formatted URI of the current ERC3525 contract"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getImpactCert(uint256)": {
        "params": {
          "claimID": "Id of the claim"
        },
        "returns": {
          "_0": "The claim, if it doesn't exist with default values"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,bytes)": {
        "params": {
          "account": "Account issuing the new hypercertificate",
          "data": "Data representing the parameters of the claim"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "slotByIndex(uint256)": {
        "params": {
          "_index": "The index in the slot list"
        },
        "returns": {
          "_0": "The slot at `index` of all slots."
        }
      },
      "slotCount()": {
        "returns": {
          "_0": "The total amount of slots"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "Id of the interface"
        },
        "returns": {
          "_0": "true, if the interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenInSlotByIndex(uint256,uint256)": {
        "params": {
          "_index": "The index in the token list of the slot",
          "_slot": "The slot to query tokens with"
        },
        "returns": {
          "_0": "The token ID at `_index` of all tokens with `_slot`"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenSupplyInSlot(uint256)": {
        "params": {
          "_slot": "The slot to query token supply for"
        },
        "returns": {
          "_0": "The total amount of tokens with the specified `_slot`"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "valueDecimals()": {
        "returns": {
          "_0": "The number of decimals for value"
        }
      }
    },
    "title": "Hypercertificate minting logic",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ImpactClaimed(uint256,address,uint64[])": {
        "notice": "Emitted when an impact is claimed."
      },
      "ImpactScopeAdded(bytes32,string)": {
        "notice": "Emitted when a new impact scope is added."
      },
      "RightAdded(bytes32,string)": {
        "notice": "Emitted when a new right is added."
      },
      "WorkScopeAdded(bytes32,string)": {
        "notice": "Emitted when a new work scope is added."
      }
    },
    "kind": "user",
    "methods": {
      "DECIMALS()": {
        "notice": "Token value decimals"
      },
      "NAME()": {
        "notice": "Contract name"
      },
      "SYMBOL()": {
        "notice": "Token symbol"
      },
      "UPGRADER_ROLE()": {
        "notice": "User role required in order to upgrade the contract"
      },
      "addImpactScope(string)": {
        "notice": "Adds a new impact scope"
      },
      "addRight(string)": {
        "notice": "Adds a new right"
      },
      "addWorkScope(string)": {
        "notice": "Adds a new work scope"
      },
      "constructor": {
        "notice": "Contract constructor logic"
      },
      "contractURI()": {
        "notice": "Returns the Uniform Resource Identifier (URI) for the current ERC3525 contract."
      },
      "getImpactCert(uint256)": {
        "notice": "Gets the impact claim with the specified id"
      },
      "impactScopes(bytes32)": {
        "notice": "Mapping of id's to impact-scopes"
      },
      "initialize(address)": {
        "notice": "Contract initialization logic"
      },
      "mint(address,bytes)": {
        "notice": "Issues a new hypercertificate"
      },
      "rights(bytes32)": {
        "notice": "Mapping of id's to rights"
      },
      "slotByIndex(uint256)": {
        "notice": "Get the slot at the specified index of all slots stored by the contract."
      },
      "slotCount()": {
        "notice": "Get the total amount of slots stored by the contract."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns a flag indicating if the contract supports the specified interface"
      },
      "tokenInSlotByIndex(uint256,uint256)": {
        "notice": "Get the token at the specified index of all tokens with the same slot."
      },
      "tokenSupplyInSlot(uint256)": {
        "notice": "Get the total amount of tokens with the same slot."
      },
      "updateVersion()": {
        "notice": "Update the contract version numberOnly allowed for member of UPGRADER_ROLE"
      },
      "valueDecimals()": {
        "notice": "Get the number of decimals the token uses for value - e.g. 6, means the user  representation of the value of a token can be calculated by dividing it by 1,000,000.  Considering the compatibility with third-party wallets, this function is defined as  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens."
      },
      "version()": {
        "notice": "gets the current version of the contract"
      },
      "workScopes(bytes32)": {
        "notice": "Mapping of id's to work-scopes"
      }
    },
    "notice": "Contains functions and events to initialize and issue a hypercertificate",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 814,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 817,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3062,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3392,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1123,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1125,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1129,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1133,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1137,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1143,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1985,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2200,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2204,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2207,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2211,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2527,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 2169,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3491,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_values",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3497,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_approvedValues",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_struct(ApproveData)3486_storage)"
      },
      {
        "astId": 3502,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_slots",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3505,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_slotArray",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3511,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_tokensBySlot",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3513,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_tokenCounter",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 39,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_roles",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "258",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1093,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "__gap",
        "offset": 0,
        "slot": "357",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5628,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_version",
        "offset": 0,
        "slot": "407",
        "type": "t_uint16"
      },
      {
        "astId": 5631,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_metadata",
        "offset": 2,
        "slot": "407",
        "type": "t_address"
      },
      {
        "astId": 5636,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "workScopes",
        "offset": 0,
        "slot": "408",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 5641,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "impactScopes",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 5646,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "rights",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 5652,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_contributorImpacts",
        "offset": 0,
        "slot": "411",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 5657,
        "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
        "label": "_impactCerts",
        "offset": 0,
        "slot": "412",
        "type": "t_mapping(t_uint256,t_struct(Claim)5692_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)2_storage": {
        "base": "t_uint64",
        "encoding": "inplace",
        "label": "uint64[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(ApproveData)3486_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC3525Upgradeable.ApproveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ApproveData)3486_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)5692_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HyperCertMinter.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)5692_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ApproveData)3486_storage": {
        "encoding": "inplace",
        "label": "struct ERC3525Upgradeable.ApproveData",
        "members": [
          {
            "astId": 3481,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "approvals",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3485,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Claim)5692_storage": {
        "encoding": "inplace",
        "label": "struct HyperCertMinter.Claim",
        "members": [
          {
            "astId": 5659,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "claimHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5663,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "workTimeframe",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint64)2_storage"
          },
          {
            "astId": 5667,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "impactTimeframe",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint64)2_storage"
          },
          {
            "astId": 5670,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "workScopes",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5673,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "impactScopes",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5676,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "rights",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5679,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "contributors",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5681,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "totalUnits",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5683,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "version",
            "offset": 0,
            "slot": "8",
            "type": "t_uint16"
          },
          {
            "astId": 5685,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "exists",
            "offset": 2,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 5687,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "name",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 5689,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "description",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 5691,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "uri",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/HyperCertMinter.sol:HyperCertMinter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}